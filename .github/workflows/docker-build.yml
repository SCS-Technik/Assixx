name: Docker Image Build & Registry Push

on:
  push:
    branches:
      - master
      - develop
      - "feature/docker-*"
    tags:
      - "v*"
  pull_request:
    branches:
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-test-docker-compose:
    runs-on: ubuntu-latest
    needs: [build-and-push-image, security-scan-trivy]
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Docker Compose tests
        run: |
          cp docker/.env.docker.example docker/.env
          cd docker && docker compose -f docker-compose.test.yml up -d

          # Wait for MySQL to accept connections
          echo "Waiting for MySQL to accept connections..."
          for i in {1..90}; do
            if docker exec assixx-mysql mysql -h localhost -u root -pStrongP@ssw0rd!123 -e "SELECT 1" > /dev/null 2>&1; then
              echo "MySQL is accepting connections!"
              break
            fi
            
            if [ $i -eq 1 ]; then
              echo "MySQL container status:"
              docker ps -a | grep mysql || true
            fi
            
            if [ $((i % 20)) -eq 0 ]; then
              echo "MySQL logs (last 10 lines):"
              docker logs assixx-mysql --tail 10 2>&1 || true
            fi
            
            echo "Waiting for MySQL to initialize... ($i/90)"
            sleep 2
          done

          # Wait for backend to be healthy (max 90 seconds)
          echo "Waiting for backend service to be healthy..."
          for i in {1..90}; do
            if docker compose -f docker-compose.test.yml ps | grep "assixx-backend" | grep -q "(healthy)"; then
              echo "Backend service is healthy!"
              break
            fi
            
            # Show logs every 15 seconds
            if [ $((i % 15)) -eq 0 ]; then
              echo "Backend logs:"
              docker compose -f docker-compose.test.yml logs backend --tail 20
            fi
            
            echo "Waiting... ($i/90)"
            sleep 1
          done

          docker compose -f docker-compose.test.yml ps

          # If not healthy, show full logs
          if ! docker compose -f docker-compose.test.yml ps | grep "assixx-backend" | grep -q "(healthy)"; then
            echo "Backend failed to become healthy. Full logs:"
            docker compose -f docker-compose.test.yml logs backend
          fi

          # Test the health endpoint
          curl -f http://localhost:3000/health || exit 1

          docker compose -f docker-compose.test.yml down

  security-scan-trivy:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for image to be available
        run: sleep 30

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-push-image.outputs.image-tag }}
          format: "sarif"
          output: "trivy-results.sarif"
        continue-on-error: true

      - name: Check if SARIF file exists
        id: check_sarif
        run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "sarif_exists=true" >> $GITHUB_OUTPUT
          else
            echo "sarif_exists=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: steps.check_sarif.outputs.sarif_exists == 'true'
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true
