services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: assixx-mysql
    restart: unless-stopped
    command: --sql-mode="" --default-time-zone='+02:00'
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-StrongP@ssw0rd!123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-main}
      MYSQL_USER: ${MYSQL_USER:-assixx_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-AssixxP@ss2025!}
      TZ: Europe/Berlin
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ../database/docker-init.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    networks:
      - assixx-network
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${MYSQL_ROOT_PASSWORD:-StrongP@ssw0rd!123}",
        ]
      interval: 10s
      timeout: 20s
      retries: 10
      start_period: 60s

  # Assixx Backend (Development Mode with Live Reload)
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
    container_name: assixx-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: ${MYSQL_USER:-assixx_user}
      DB_PASSWORD: ${MYSQL_PASSWORD:-AssixxP@ss2025!}
      DB_NAME: ${MYSQL_DATABASE:-main}
      JWT_SECRET: ${JWT_SECRET:-default-dev-jwt-secret}
      SESSION_SECRET: ${SESSION_SECRET:-default-dev-session-secret}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000}
      DELETION_GRACE_PERIOD_DAYS: ${DELETION_GRACE_PERIOD_DAYS:-30}
      DELETION_COOLING_OFF_HOURS: ${DELETION_COOLING_OFF_HOURS:-24}
      SCARF_ANALYTICS: false
      DO_NOT_TRACK: 1
    ports:
      - "3000:3000"
    volumes:
      - ../uploads:/app/uploads
      - ../backend/logs:/app/backend/logs
      - ../exports:/exports
      - ../backups:/backups
      # Live-Reload Volumes für Entwicklung
      - ../backend:/app/backend:delegated
      - ../frontend:/app/frontend:delegated
      - ../scripts:/app/scripts:delegated
      - ../package.json:/app/package.json:delegated
      # pnpm-lock.yaml als read-only mounten (löst EBUSY Problem)
      - ../pnpm-lock.yaml:/app/pnpm-lock.yaml:ro
      - ../pnpm-workspace.yaml:/app/pnpm-workspace.yaml:delegated
      - ../tsconfig.json:/app/tsconfig.json:delegated
      - ../tsconfig.test.json:/app/tsconfig.test.json:delegated
      - ../eslint.config.js:/app/eslint.config.js:delegated
      - ../jest.config.js:/app/jest.config.js:delegated
      - ../jest.setup.ts:/app/jest.setup.ts:delegated
      - ../jest.globalSetup.js:/app/jest.globalSetup.js:delegated
      - ../jest.globalTeardown.js:/app/jest.globalTeardown.js:delegated
      - ../.prettierignore:/app/.prettierignore:delegated
      - ../.prettierrc.json:/app/.prettierrc.json:delegated
      - ../nodemon.json:/app/nodemon.json:delegated
      - ../.env:/app/.env:ro
      - /app/node_modules
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - assixx-network
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    # Development command mit auto-install - run as root but create files with user permissions
    command: sh -c "pnpm install --frozen-lockfile && pnpm run dev"

  # Optional: Redis für Sessions/Cache
  redis:
    image: redis:7-alpine
    container_name: assixx-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - assixx-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Tenant Deletion Worker
  deletion-worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
    container_name: assixx-deletion-worker
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: ${MYSQL_USER:-assixx_user}
      DB_PASSWORD: ${MYSQL_PASSWORD:-AssixxP@ss2025!}
      DB_NAME: ${MYSQL_DATABASE:-main}
      JWT_SECRET: ${JWT_SECRET:-default-dev-jwt-secret}
      SESSION_SECRET: ${SESSION_SECRET:-default-dev-session-secret}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      DELETION_WORKER_HEALTH_PORT: 3001
      DELETION_GRACE_PERIOD_DAYS: ${DELETION_GRACE_PERIOD_DAYS:-30}
      DELETION_COOLING_OFF_HOURS: ${DELETION_COOLING_OFF_HOURS:-24}
      # Email settings for deletion notifications
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
    ports:
      - "3001:3001" # Health check port
    volumes:
      - ../backend:/app/backend:delegated
      - ../scripts:/app/scripts:delegated
      - ../package.json:/app/package.json:delegated
      - ../pnpm-lock.yaml:/app/pnpm-lock.yaml:delegated
      - ../pnpm-workspace.yaml:/app/pnpm-workspace.yaml:delegated
      - ../tsconfig.json:/app/tsconfig.json:delegated
      - ../.env:/app/.env:ro
      - /app/node_modules
      - ../exports:/exports
      - ../backups:/backups
      # Worker specific logs
      - ../backend/logs/deletion-worker:/app/backend/logs/deletion-worker
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - assixx-network
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    # Worker command - use tsx directly
    command: ["pnpm", "exec", "tsx", "/app/backend/src/workers/deletionWorker.ts"]

  # phpMyAdmin für Datenbank-Verwaltung (NUR für Development!)
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: assixx-phpmyadmin
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: assixx_user
      PMA_PASSWORD: ${MYSQL_PASSWORD:-AssixxP@ss2025!}
      UPLOAD_LIMIT: 50M
    networks:
      - assixx-network
    depends_on:
      - mysql

  # Optional: Nginx als Reverse Proxy (für Production)
  # nginx:
  #   image: nginx:alpine
  #   container_name: assixx-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
  #     - ./frontend/dist:/usr/share/nginx/html:ro
  #   depends_on:
  #     - backend
  #   networks:
  #     - assixx-network

networks:
  assixx-network:
    driver: bridge

volumes:
  mysql_data:
    name: assixx_mysql_data
    external: true
  redis_data:
    name: assixx_redis_data
    external: true
  pnpm-store:
