services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: assixx-mysql
    restart: unless-stopped
    command: --sql-mode=""
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-StrongP@ssw0rd!123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-main}
      MYSQL_USER: ${MYSQL_USER:-assixx_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-AssixxP@ss2025!}
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ../database/docker-init.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    networks:
      - assixx-network
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-pStrongP@ssw0rd!123",
          "--silent",
        ]
      interval: 5s
      timeout: 20s
      retries: 30
      start_period: 90s

  # Assixx Backend (Development Mode with Live Reload)
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
    container_name: assixx-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: ${MYSQL_USER:-assixx_user}
      DB_PASSWORD: ${MYSQL_PASSWORD:-AssixxP@ss2025!}
      DB_NAME: ${MYSQL_DATABASE:-main}
      JWT_SECRET: ${JWT_SECRET:-default-dev-jwt-secret}
      SESSION_SECRET: ${SESSION_SECRET:-default-dev-session-secret}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000}
    ports:
      - "3000:3000"
    volumes:
      - ../uploads:/app/uploads
      - ../backend/logs:/app/backend/logs
      # Live-Reload Volumes für Entwicklung
      - ../backend:/app/backend:delegated
      - ../frontend:/app/frontend:delegated
      - ../package.json:/app/package.json:ro
      - ../tsconfig.json:/app/tsconfig.json:ro
      - ../eslint.config.js:/app/eslint.config.js:ro
      - ../.env:/app/.env:ro
      - /app/node_modules
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - assixx-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 60s
    # Development command mit nodemon
    command: ["pnpm", "run", "dev"]

  # Optional: Redis für Sessions/Cache
  redis:
    image: redis:7-alpine
    container_name: assixx-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - assixx-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # phpMyAdmin für Datenbank-Verwaltung (NUR für Development!)
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: assixx-phpmyadmin
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: assixx_user
      PMA_PASSWORD: ${MYSQL_PASSWORD:-AssixxP@ss2025!}
      UPLOAD_LIMIT: 50M
    networks:
      - assixx-network
    depends_on:
      - mysql

networks:
  assixx-network:
    driver: bridge

volumes:
  mysql_data:
    # Kein external: true für Tests
  redis_data:
    # Kein external: true für Tests
