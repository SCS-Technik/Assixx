{
  "openapi": "3.0.0",
  "info": {
    "title": "Assixx API Documentation",
    "version": "1.0.0",
    "description": "Multi-Tenant SaaS Platform für Industrieunternehmen",
    "contact": { "name": "SCS-Technik", "email": "support@scs-technik.de" },
    "license": { "name": "Proprietary", "url": "https://assixx.com/license" }
  },
  "servers": [{ "url": "https://api.assixx.com/api", "description": "Production Server" }],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter your JWT token in the format: Bearer <token>"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": { "type": "string", "description": "Error message" },
          "message": { "type": "string", "description": "Error message (alternative field)" },
          "code": { "type": "string", "description": "Error code" },
          "details": { "type": "object", "description": "Additional error details" }
        }
      },
      "Success": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean", "example": true },
          "message": { "type": "string", "description": "Success message" },
          "data": { "type": "object", "description": "Response data" }
        }
      },
      "PaginationInfo": {
        "type": "object",
        "properties": {
          "currentPage": { "type": "integer", "example": 1 },
          "totalPages": { "type": "integer", "example": 10 },
          "totalItems": { "type": "integer", "example": 100 },
          "itemsPerPage": { "type": "integer", "example": 10 },
          "hasNext": { "type": "boolean", "example": true },
          "hasPrev": { "type": "boolean", "example": false }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "User ID" },
          "username": { "type": "string", "description": "Username" },
          "email": { "type": "string", "format": "email", "description": "Email address" },
          "first_name": { "type": "string", "description": "First name" },
          "last_name": { "type": "string", "description": "Last name" },
          "role": { "type": "string", "enum": ["root", "admin", "employee"], "description": "User role" },
          "tenant_id": { "type": "integer", "description": "Tenant ID" },
          "department_id": { "type": "integer", "nullable": true, "description": "Department ID" },
          "is_active": { "type": "boolean", "description": "Whether the user is active" },
          "created_at": { "type": "string", "format": "date-time", "description": "Creation timestamp" },
          "updated_at": { "type": "string", "format": "date-time", "description": "Last update timestamp" }
        },
        "required": ["id", "username", "email", "role", "tenant_id"]
      },
      "LoginRequest": {
        "type": "object",
        "required": ["username", "password"],
        "properties": {
          "username": { "type": "string", "description": "Username for authentication", "example": "admin" },
          "password": {
            "type": "string",
            "format": "password",
            "description": "User password",
            "example": "SecurePass123!"
          },
          "fingerprint": {
            "type": "string",
            "description": "Browser fingerprint for session isolation",
            "example": "abc123def456"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Login erfolgreich" },
          "token": { "type": "string", "description": "JWT token (also set as httpOnly cookie)" },
          "role": { "type": "string", "enum": ["root", "admin", "employee"] },
          "user": { "$ref": "#/components/schemas/User" }
        }
      },
      "BlackboardEntry": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "Entry ID" },
          "title": { "type": "string", "description": "Entry title" },
          "content": { "type": "string", "description": "Entry content" },
          "priority": {
            "type": "string",
            "enum": ["low", "normal", "high", "urgent"],
            "description": "Entry priority"
          },
          "visibility": {
            "type": "string",
            "enum": ["company", "department", "team", "personal"],
            "description": "Visibility scope"
          },
          "status": { "type": "string", "enum": ["active", "archived"], "description": "Entry status" },
          "created_by": { "type": "integer", "description": "User ID who created the entry" },
          "tenant_id": { "type": "integer", "description": "Tenant ID" },
          "department_id": {
            "type": "integer",
            "nullable": true,
            "description": "Department ID (for department visibility)"
          },
          "team_id": { "type": "integer", "nullable": true, "description": "Team ID (for team visibility)" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "can_edit": { "type": "boolean", "description": "Whether current user can edit this entry" },
          "can_delete": { "type": "boolean", "description": "Whether current user can delete this entry" },
          "is_read": { "type": "boolean", "description": "Whether current user has read this entry" }
        },
        "required": ["id", "title", "content", "priority", "visibility", "status", "created_by", "tenant_id"]
      },
      "KvpSuggestion": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "Suggestion ID" },
          "title": { "type": "string", "description": "Suggestion title" },
          "description": { "type": "string", "description": "Detailed description" },
          "category": {
            "type": "string",
            "enum": ["Sicherheit", "Produktivität", "Qualität", "Kosten", "Umwelt", "Sonstiges"],
            "description": "Suggestion category"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "approved", "implemented", "rejected"],
            "description": "Current status"
          },
          "is_shared": { "type": "boolean", "description": "Whether the suggestion is shared publicly" },
          "created_by": { "type": "integer", "description": "User ID who created the suggestion" },
          "tenant_id": { "type": "integer", "description": "Tenant ID" },
          "potential_savings": { "type": "number", "nullable": true, "description": "Estimated savings in EUR" },
          "implementation_effort": {
            "type": "string",
            "nullable": true,
            "enum": ["low", "medium", "high"],
            "description": "Effort required to implement"
          },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "comment_count": { "type": "integer", "description": "Number of comments" },
          "attachment_count": { "type": "integer", "description": "Number of attachments" }
        },
        "required": ["id", "title", "description", "category", "status", "created_by", "tenant_id"]
      },
      "CalendarEvent": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "Event ID" },
          "title": { "type": "string", "description": "Event title" },
          "description": { "type": "string", "nullable": true, "description": "Event description" },
          "start_date": { "type": "string", "format": "date-time", "description": "Event start date and time" },
          "end_date": { "type": "string", "format": "date-time", "description": "Event end date and time" },
          "all_day": { "type": "boolean", "description": "Whether this is an all-day event" },
          "location": { "type": "string", "nullable": true, "description": "Event location" },
          "visibility": {
            "type": "string",
            "enum": ["company", "department", "team", "personal"],
            "description": "Event visibility scope"
          },
          "status": { "type": "string", "enum": ["active", "cancelled"], "description": "Event status" },
          "created_by": { "type": "integer", "description": "User ID who created the event" },
          "tenant_id": { "type": "integer", "description": "Tenant ID" },
          "department_id": {
            "type": "integer",
            "nullable": true,
            "description": "Department ID (for department events)"
          },
          "team_id": { "type": "integer", "nullable": true, "description": "Team ID (for team events)" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "can_edit": { "type": "boolean", "description": "Whether current user can edit this event" },
          "can_delete": { "type": "boolean", "description": "Whether current user can delete this event" }
        },
        "required": ["id", "title", "start_date", "end_date", "visibility", "status", "created_by", "tenant_id"]
      },
      "ShiftTemplate": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "Template ID" },
          "name": { "type": "string", "description": "Template name" },
          "start_time": {
            "type": "string",
            "format": "time",
            "description": "Shift start time (HH:mm)",
            "example": "08:00"
          },
          "end_time": {
            "type": "string",
            "format": "time",
            "description": "Shift end time (HH:mm)",
            "example": "16:00"
          },
          "break_duration": { "type": "integer", "description": "Break duration in minutes", "example": 30 },
          "required_staff": { "type": "integer", "description": "Number of required staff", "example": 3 },
          "description": { "type": "string", "nullable": true, "description": "Template description" },
          "color": { "type": "string", "nullable": true, "description": "Display color (hex)", "example": "#4CAF50" },
          "is_active": { "type": "boolean", "description": "Whether template is active" },
          "tenant_id": { "type": "integer", "description": "Tenant ID" },
          "created_at": { "type": "string", "format": "date-time" }
        },
        "required": ["id", "name", "start_time", "end_time", "tenant_id"]
      },
      "ShiftPlan": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "Plan ID" },
          "name": { "type": "string", "description": "Plan name" },
          "start_date": { "type": "string", "format": "date", "description": "Plan start date" },
          "end_date": { "type": "string", "format": "date", "description": "Plan end date" },
          "department_id": { "type": "integer", "nullable": true, "description": "Department ID" },
          "team_id": { "type": "integer", "nullable": true, "description": "Team ID" },
          "description": { "type": "string", "nullable": true, "description": "Plan description" },
          "status": { "type": "string", "enum": ["draft", "published", "archived"], "description": "Plan status" },
          "tenant_id": { "type": "integer", "description": "Tenant ID" },
          "created_by": { "type": "integer", "description": "User ID who created the plan" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" }
        },
        "required": ["id", "name", "start_date", "end_date", "status", "tenant_id", "created_by"]
      },
      "Survey": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "Survey ID" },
          "title": { "type": "string", "description": "Survey title" },
          "description": { "type": "string", "nullable": true, "description": "Survey description" },
          "status": { "type": "string", "enum": ["draft", "active", "closed"], "description": "Survey status" },
          "start_date": { "type": "string", "format": "date", "nullable": true, "description": "Survey start date" },
          "end_date": { "type": "string", "format": "date", "nullable": true, "description": "Survey end date" },
          "is_anonymous": { "type": "boolean", "description": "Whether responses are anonymous" },
          "is_mandatory": { "type": "boolean", "description": "Whether survey is mandatory" },
          "questions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": { "type": "integer" },
                "question": { "type": "string" },
                "type": { "type": "string", "enum": ["text", "radio", "checkbox", "scale", "date"] },
                "required": { "type": "boolean" },
                "options": { "type": "array", "items": { "type": "string" } }
              }
            },
            "description": "Survey questions"
          },
          "response_count": { "type": "integer", "description": "Number of responses" },
          "created_by": { "type": "integer", "description": "User ID who created the survey" },
          "tenant_id": { "type": "integer", "description": "Tenant ID" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" }
        },
        "required": ["id", "title", "status", "tenant_id", "created_by"]
      },
      "Document": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "Document ID" },
          "title": { "type": "string", "description": "Document title" },
          "description": { "type": "string", "description": "Document description" },
          "file_name": { "type": "string", "description": "Original filename" },
          "file_path": { "type": "string", "description": "Server file path" },
          "file_size": { "type": "integer", "description": "File size in bytes" },
          "file_type": { "type": "string", "description": "MIME type" },
          "category": {
            "type": "string",
            "enum": ["personal", "company", "department", "team", "payroll"],
            "description": "Document category"
          },
          "year": { "type": "integer", "nullable": true, "description": "Year (for payroll documents)" },
          "month": { "type": "integer", "nullable": true, "description": "Month (for payroll documents)" },
          "uploaded_by": { "type": "integer", "description": "User ID who uploaded the document" },
          "target_user_id": {
            "type": "integer",
            "nullable": true,
            "description": "Target user (for personal documents)"
          },
          "target_department_id": { "type": "integer", "nullable": true, "description": "Target department" },
          "target_team_id": { "type": "integer", "nullable": true, "description": "Target team" },
          "tenant_id": { "type": "integer", "description": "Tenant ID" },
          "created_at": { "type": "string", "format": "date-time", "description": "Upload timestamp" },
          "is_read": { "type": "boolean", "description": "Whether the current user has read this document" }
        },
        "required": ["id", "title", "file_name", "category", "tenant_id"]
      },
      "Conversation": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "Conversation ID" },
          "name": { "type": "string", "nullable": true, "description": "Conversation name (for group chats)" },
          "is_group": { "type": "boolean", "description": "Whether this is a group conversation" },
          "created_by": { "type": "integer", "description": "User ID who created the conversation" },
          "created_at": { "type": "string", "format": "date-time", "description": "Creation timestamp" },
          "updated_at": { "type": "string", "format": "date-time", "description": "Last activity timestamp" },
          "participants": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "user_id": { "type": "integer" },
                "username": { "type": "string" },
                "first_name": { "type": "string" },
                "last_name": { "type": "string" },
                "is_online": { "type": "boolean" },
                "joined_at": { "type": "string", "format": "date-time" }
              }
            },
            "description": "List of conversation participants"
          },
          "last_message": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": { "type": "integer" },
              "message": { "type": "string" },
              "sender_name": { "type": "string" },
              "sent_at": { "type": "string", "format": "date-time" }
            },
            "description": "Preview of the last message"
          },
          "unread_count": { "type": "integer", "description": "Number of unread messages for current user" }
        },
        "required": ["id", "is_group", "created_by", "created_at", "participants"]
      },
      "ChatMessage": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "Message ID" },
          "conversation_id": { "type": "integer", "description": "Conversation ID" },
          "sender_id": { "type": "integer", "description": "Sender user ID" },
          "sender_name": { "type": "string", "description": "Sender display name" },
          "message": { "type": "string", "description": "Message content" },
          "attachment": {
            "type": "object",
            "nullable": true,
            "properties": {
              "filename": { "type": "string", "description": "Attachment filename" },
              "original_name": { "type": "string", "description": "Original filename" },
              "file_size": { "type": "integer", "description": "File size in bytes" },
              "mime_type": { "type": "string", "description": "MIME type" }
            },
            "description": "File attachment information"
          },
          "sent_at": { "type": "string", "format": "date-time", "description": "Message timestamp" },
          "is_read": { "type": "boolean", "description": "Whether the current user has read this message" },
          "read_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the message was read"
          },
          "is_edited": { "type": "boolean", "description": "Whether the message has been edited" },
          "edited_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the message was edited"
          }
        },
        "required": ["id", "conversation_id", "sender_id", "message", "sent_at"]
      },
      "Department": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "Department ID" },
          "name": { "type": "string", "description": "Department name" },
          "description": { "type": "string", "nullable": true, "description": "Department description" },
          "manager_id": { "type": "integer", "nullable": true, "description": "User ID of department manager" },
          "manager_name": { "type": "string", "nullable": true, "description": "Manager display name" },
          "parent_id": { "type": "integer", "nullable": true, "description": "Parent department ID" },
          "parent_name": { "type": "string", "nullable": true, "description": "Parent department name" },
          "location": { "type": "string", "nullable": true, "description": "Physical location" },
          "cost_center": { "type": "string", "nullable": true, "description": "Cost center code" },
          "employee_count": { "type": "integer", "description": "Number of employees in department" },
          "tenant_id": { "type": "integer", "description": "Tenant ID" },
          "created_at": { "type": "string", "format": "date-time", "description": "Creation timestamp" },
          "updated_at": { "type": "string", "format": "date-time", "description": "Last update timestamp" }
        },
        "required": ["id", "name", "tenant_id"]
      },
      "Team": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "description": "Team ID" },
          "name": { "type": "string", "description": "Team name" },
          "description": { "type": "string", "nullable": true, "description": "Team description" },
          "department_id": { "type": "integer", "nullable": true, "description": "Department ID this team belongs to" },
          "department_name": { "type": "string", "nullable": true, "description": "Department name" },
          "leader_id": { "type": "integer", "nullable": true, "description": "User ID of team leader" },
          "leader_name": { "type": "string", "nullable": true, "description": "Leader display name" },
          "max_members": { "type": "integer", "nullable": true, "description": "Maximum team size" },
          "member_count": { "type": "integer", "description": "Current number of team members" },
          "location": { "type": "string", "nullable": true, "description": "Team location" },
          "budget": { "type": "number", "nullable": true, "description": "Team budget" },
          "is_active": { "type": "boolean", "description": "Whether team is active" },
          "goals": { "type": "string", "nullable": true, "description": "Team goals and objectives" },
          "tenant_id": { "type": "integer", "description": "Tenant ID" },
          "created_at": { "type": "string", "format": "date-time", "description": "Creation timestamp" },
          "updated_at": { "type": "string", "format": "date-time", "description": "Last update timestamp" }
        },
        "required": ["id", "name", "tenant_id", "is_active"]
      }
    }
  },
  "security": [{ "bearerAuth": [] }],
  "tags": [
    { "name": "Authentication", "description": "User authentication and authorization" },
    { "name": "Admin", "description": "Admin-specific operations" },
    { "name": "Employee", "description": "Employee-specific operations" },
    { "name": "Documents", "description": "Document management" },
    { "name": "Blackboard", "description": "Company announcements (Schwarzes Brett)" },
    { "name": "Calendar", "description": "Event and calendar management" },
    { "name": "Chat", "description": "Real-time messaging" },
    { "name": "KVP", "description": "Continuous improvement process (KVP)" },
    { "name": "Shifts", "description": "Shift planning and management" },
    { "name": "Survey", "description": "Survey creation and management" },
    { "name": "Features", "description": "Feature management" },
    { "name": "Departments", "description": "Department management and organization structure" },
    { "name": "Teams", "description": "Team management and team member operations" },
    { "name": "Audit Trail v2", "description": "Audit logging and compliance API v2" },
    { "name": "Auth v2", "description": "Authentication API v2 with improved standards" },
    { "name": "Blackboard v2", "description": "Company announcements and bulletin board API v2" },
    { "name": "Calendar v2", "description": "Calendar event management (API v2)" },
    { "name": "Documents v2", "description": "Document management API v2" },
    {
      "name": "KVP v2",
      "description": "Continuous improvement process (Kontinuierlicher Verbesserungsprozess) API v2"
    },
    { "name": "Logs v2", "description": "System audit logs API v2 (Root only)" },
    { "name": "Machines v2", "description": "Industrial machine management API v2" },
    { "name": "Reports v2", "description": "Reporting and analytics API v2 - aggregated data and insights" },
    { "name": "Shifts v2", "description": "Shift planning and management API v2" },
    { "name": "Surveys v2", "description": "Survey management API v2" },
    { "name": "Teams v2", "description": "Team management API v2" }
  ],
  "paths": {
    "/admin/employees": {
      "post": {
        "summary": "Create a new employee",
        "description": "Create a new employee account within the admin's tenant",
        "tags": ["Admin"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["username", "email", "password"],
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Unique username for the employee",
                    "example": "john.doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Employee email address",
                    "example": "john.doe@company.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "Initial password for the employee",
                    "example": "SecurePass123!"
                  },
                  "first_name": { "type": "string", "description": "Employee first name", "example": "John" },
                  "last_name": { "type": "string", "description": "Employee last name", "example": "Doe" },
                  "phone": { "type": "string", "description": "Employee phone number", "example": "+49 123 456789" },
                  "department_id": {
                    "type": "integer",
                    "description": "Department ID to assign the employee to",
                    "example": 1
                  },
                  "position": { "type": "string", "description": "Job position/title", "example": "Software Developer" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Employee created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Mitarbeiter erfolgreich erstellt" },
                    "employeeId": {
                      "type": "integer",
                      "description": "ID of the newly created employee",
                      "example": 123
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - User is not an admin",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "409": {
            "description": "Conflict - Username or email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Ein Mitarbeiter mit diesem Benutzernamen oder dieser E-Mail existiert bereits."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      },
      "get": {
        "summary": "Get all employees",
        "description": "Retrieve a list of all employees within the admin's tenant",
        "tags": ["Admin"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": { "type": "integer", "minimum": 1, "default": 1 },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100, "default": 20 },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": { "type": "string" },
            "description": "Search term for filtering employees by name or email"
          }
        ],
        "responses": {
          "200": {
            "description": "List of employees retrieved successfully",
            "content": {
              "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/User" } } }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - User is not an admin",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/admin/employees/{id}": {
      "get": {
        "summary": "Get single employee",
        "description": "Retrieve detailed information about a specific employee",
        "tags": ["Admin"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Employee ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Employee information retrieved successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - User is not an admin",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "404": {
            "description": "Employee not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Mitarbeiter nicht gefunden" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      },
      "put": {
        "summary": "Update employee information",
        "description": "Update an existing employee's information (Admin only)",
        "tags": ["Admin"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Employee ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "format": "email", "description": "Updated email address" },
                  "first_name": { "type": "string", "description": "Updated first name" },
                  "last_name": { "type": "string", "description": "Updated last name" },
                  "phone": { "type": "string", "description": "Updated phone number" },
                  "department_id": { "type": "integer", "description": "Updated department ID" },
                  "position": { "type": "string", "description": "Updated job position" },
                  "is_active": { "type": "boolean", "description": "Active status" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Employee updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Mitarbeiter erfolgreich aktualisiert" },
                    "success": { "type": "boolean", "example": true }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - Cannot change employee role or not an admin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Die Rolle eines Mitarbeiters kann nicht geändert werden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Employee not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Mitarbeiter nicht gefunden" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/admin/upload-document/{employeeId}": {
      "post": {
        "summary": "Upload document for employee",
        "description": "Upload a PDF document for a specific employee (Admin only)",
        "tags": ["Admin"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "employeeId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Employee ID to upload document for"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["document"],
                "properties": {
                  "document": { "type": "string", "format": "binary", "description": "PDF file to upload (max 3MB)" },
                  "title": { "type": "string", "description": "Document title" },
                  "description": { "type": "string", "description": "Document description" },
                  "year": { "type": "string", "description": "Year (for payroll documents)" },
                  "month": { "type": "string", "description": "Month (for payroll documents)" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Dokument erfolgreich hochgeladen" },
                    "documentId": { "type": "integer", "description": "ID of the uploaded document" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - No file uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Keine Datei hochgeladen" } }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - User is not an admin",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "404": {
            "description": "Employee not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Mitarbeiter nicht gefunden" } }
                }
              }
            }
          },
          "413": {
            "description": "File too large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "error": { "type": "string", "example": "Nur PDF-Dateien sind erlaubt!" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/admin/dashboard-stats": {
      "get": {
        "summary": "Get admin dashboard statistics",
        "description": "Retrieve statistics for the admin dashboard including employee, department, team, and document counts",
        "tags": ["Admin"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Dashboard statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "employeeCount": {
                      "type": "integer",
                      "description": "Total number of employees in the tenant",
                      "example": 42
                    },
                    "departmentCount": {
                      "type": "integer",
                      "description": "Total number of departments in the tenant",
                      "example": 5
                    },
                    "teamCount": {
                      "type": "integer",
                      "description": "Total number of teams in the tenant",
                      "example": 12
                    },
                    "documentCount": {
                      "type": "integer",
                      "description": "Total number of documents in the tenant",
                      "example": 156
                    },
                    "adminName": {
                      "type": "string",
                      "description": "Username of the current admin",
                      "example": "admin123"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - User is not an admin",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/auth/validate": {
      "get": {
        "summary": "Validate current JWT token",
        "description": "Validates the current JWT token and returns user information if valid",
        "tags": ["Authentication"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Token is valid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "valid": { "type": "boolean", "example": true },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "username": { "type": "string" },
                        "role": { "type": "string", "enum": ["root", "admin", "employee"] },
                        "tenant_id": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Token is invalid or expired",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "500": { "description": "Server error" }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login user",
        "description": "Authenticate user with username, password and optional browser fingerprint",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["username", "password"],
                "properties": {
                  "username": { "type": "string", "description": "Username for authentication", "example": "admin" },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User password",
                    "example": "SecurePass123!"
                  },
                  "fingerprint": {
                    "type": "string",
                    "description": "Browser fingerprint for session isolation",
                    "example": "abc123def456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "headers": {
              "Set-Cookie": { "schema": { "type": "string", "description": "HTTP-only cookie containing JWT token" } }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Login erfolgreich" },
                    "token": { "type": "string", "description": "JWT token (also set as httpOnly cookie)" },
                    "role": { "type": "string", "enum": ["root", "admin", "employee"] },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "username": { "type": "string" },
                        "email": { "type": "string" },
                        "role": { "type": "string" },
                        "tenant_id": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing credentials",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "401": {
            "description": "Invalid credentials",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "500": { "description": "Server error" }
        }
      }
    },
    "/auth/register": {
      "post": {
        "summary": "Register new user",
        "description": "Create a new user account with optional tenant assignment",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["username", "email", "password"],
                "properties": {
                  "username": { "type": "string", "description": "Unique username", "example": "johndoe" },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address",
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "Strong password",
                    "example": "SecurePass123!"
                  },
                  "first_name": { "type": "string", "description": "First name", "example": "John" },
                  "last_name": { "type": "string", "description": "Last name", "example": "Doe" },
                  "role": {
                    "type": "string",
                    "enum": ["admin", "employee"],
                    "description": "User role (cannot register as root)",
                    "example": "employee"
                  },
                  "tenant_id": {
                    "type": "integer",
                    "description": "Tenant ID for multi-tenant assignment",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registration successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Registration successful" },
                    "user": { "$ref": "#/components/schemas/User" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "500": { "description": "Server error" }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Logout user",
        "description": "Logout the current user and clear authentication token",
        "tags": ["Authentication"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Logout successful",
            "headers": {
              "Set-Cookie": { "schema": { "type": "string", "description": "Clears the httpOnly token cookie" } }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Logout successful" } }
                }
              }
            }
          }
        }
      }
    },
    "/blackboard": {
      "get": {
        "summary": "Get all blackboard entries",
        "description": "Retrieve all blackboard entries visible to the user with pagination and filtering",
        "tags": ["Blackboard"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": { "type": "string", "enum": ["active", "archived"], "default": "active" },
            "description": "Filter by entry status"
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string",
              "enum": ["all", "company", "department", "team", "personal"],
              "default": "all"
            },
            "description": "Filter by visibility scope"
          },
          {
            "in": "query",
            "name": "search",
            "schema": { "type": "string" },
            "description": "Search in title and content"
          },
          {
            "in": "query",
            "name": "page",
            "schema": { "type": "integer", "minimum": 1, "default": 1 },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100, "default": 18 },
            "description": "Items per page"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": ["created_at", "updated_at", "title", "priority"],
              "default": "created_at"
            },
            "description": "Sort by field"
          },
          {
            "in": "query",
            "name": "sortDir",
            "schema": { "type": "string", "enum": ["ASC", "DESC"], "default": "DESC" },
            "description": "Sort direction"
          }
        ],
        "responses": {
          "200": {
            "description": "Blackboard entries retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "entries": { "type": "array", "items": { "$ref": "#/components/schemas/BlackboardEntry" } },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "currentPage": { "type": "integer" },
                        "totalPages": { "type": "integer" },
                        "totalItems": { "type": "integer" },
                        "itemsPerPage": { "type": "integer" },
                        "hasNext": { "type": "boolean" },
                        "hasPrev": { "type": "boolean" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      },
      "post": {
        "summary": "Create blackboard entry",
        "description": "Create a new blackboard entry with optional file attachment",
        "tags": ["Blackboard"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["title", "content", "org_level"],
                "properties": {
                  "title": { "type": "string", "description": "Entry title", "example": "Wichtige Ankündigung" },
                  "content": {
                    "type": "string",
                    "description": "Entry content (supports Markdown)",
                    "example": "Dies ist eine wichtige Mitteilung für alle Mitarbeiter."
                  },
                  "org_level": {
                    "type": "string",
                    "enum": ["company", "department", "team"],
                    "description": "Organizational level"
                  },
                  "org_id": { "type": "integer", "description": "Department/Team ID (not needed for company level)" },
                  "priority": {
                    "type": "string",
                    "enum": ["low", "normal", "high", "urgent"],
                    "default": "normal",
                    "description": "Entry priority"
                  },
                  "color": {
                    "type": "string",
                    "enum": ["blue", "green", "yellow", "red", "purple"],
                    "default": "blue",
                    "description": "Display color"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Expiration date (optional)"
                  },
                  "tags": { "type": "array", "items": { "type": "string" }, "description": "Tags for categorization" },
                  "requires_confirmation": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether users must confirm reading"
                  },
                  "attachment": {
                    "type": "string",
                    "format": "binary",
                    "description": "Optional file attachment (PDF, JPEG, PNG, GIF - max 10MB)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Entry created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Blackboard entry created successfully" },
                    "entry": { "$ref": "#/components/schemas/BlackboardEntry" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": { "schema": { "type": "object", "properties": { "message": { "type": "string" } } } }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - No permission for this org level",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "You do not have permission to create entries at this level"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "File too large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string", "example": "Nur PDF und Bilder (JPEG, PNG, GIF) sind erlaubt!" }
                  }
                }
              }
            }
          },
          "500": { "description": "Server error" }
        }
      }
    },
    "/calendar": {
      "get": {
        "summary": "Get all calendar events",
        "description": "Retrieve all calendar events visible to the user with pagination and filtering",
        "tags": ["Calendar"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": { "type": "string", "enum": ["active", "cancelled"], "default": "active" },
            "description": "Filter by event status"
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string",
              "enum": ["all", "company", "department", "team", "personal"],
              "default": "all"
            },
            "description": "Filter by visibility scope"
          },
          {
            "in": "query",
            "name": "search",
            "schema": { "type": "string" },
            "description": "Search in title and description"
          },
          {
            "in": "query",
            "name": "start_date",
            "schema": { "type": "string", "format": "date" },
            "description": "Filter events starting from this date"
          },
          {
            "in": "query",
            "name": "end_date",
            "schema": { "type": "string", "format": "date" },
            "description": "Filter events ending before this date"
          },
          {
            "in": "query",
            "name": "page",
            "schema": { "type": "integer", "minimum": 1, "default": 1 },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100, "default": 50 },
            "description": "Items per page"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": ["start_date", "end_date", "title", "created_at"],
              "default": "start_date"
            },
            "description": "Sort by field"
          },
          {
            "in": "query",
            "name": "sortDir",
            "schema": { "type": "string", "enum": ["ASC", "DESC"], "default": "ASC" },
            "description": "Sort direction"
          }
        ],
        "responses": {
          "200": {
            "description": "Calendar events retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "events": { "type": "array", "items": { "$ref": "#/components/schemas/CalendarEvent" } },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "currentPage": { "type": "integer" },
                        "totalPages": { "type": "integer" },
                        "totalItems": { "type": "integer" },
                        "itemsPerPage": { "type": "integer" },
                        "hasNext": { "type": "boolean" },
                        "hasPrev": { "type": "boolean" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/chat/users": {
      "get": {
        "summary": "Get available chat users",
        "description": "Retrieve list of users available for chat within the tenant",
        "tags": ["Chat"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": { "type": "string" },
            "description": "Search by username or name"
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "username": { "type": "string" },
                          "first_name": { "type": "string" },
                          "last_name": { "type": "string" },
                          "role": { "type": "string" },
                          "is_online": { "type": "boolean" },
                          "last_seen": { "type": "string", "format": "date-time" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/chat/conversations": {
      "get": {
        "summary": "Get user conversations",
        "description": "Retrieve all conversations for the authenticated user",
        "tags": ["Chat"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Conversations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversations": { "type": "array", "items": { "$ref": "#/components/schemas/Conversation" } }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      },
      "post": {
        "summary": "Create new conversation",
        "description": "Create a new chat conversation with one or more participants",
        "tags": ["Chat"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["participants"],
                "properties": {
                  "participants": {
                    "type": "array",
                    "items": { "type": "integer" },
                    "description": "Array of user IDs to include in conversation",
                    "example": [2, 3, 4]
                  },
                  "name": {
                    "type": "string",
                    "description": "Optional conversation name (for group chats)",
                    "example": "Project Team Chat"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Conversation created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Konversation erfolgreich erstellt" },
                    "conversation": { "$ref": "#/components/schemas/Conversation" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/chat/conversations/{id}/messages": {
      "get": {
        "summary": "Get messages from conversation",
        "description": "Retrieve all messages from a specific conversation",
        "tags": ["Chat"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Conversation ID"
          },
          {
            "in": "query",
            "name": "page",
            "schema": { "type": "integer", "minimum": 1, "default": 1 },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100, "default": 50 },
            "description": "Messages per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Messages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "messages": { "type": "array", "items": { "$ref": "#/components/schemas/ChatMessage" } },
                    "pagination": { "$ref": "#/components/schemas/PaginationInfo" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - Not a participant in this conversation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string", "example": "Sie sind kein Teilnehmer dieser Konversation" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Conversation not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "error": { "type": "string", "example": "Konversation nicht gefunden" } }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Send message to conversation",
        "description": "Send a new message to a conversation with optional file attachment",
        "tags": ["Chat"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Conversation ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["message"],
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Message content",
                    "example": "Hallo, wie geht es dir?"
                  },
                  "attachment": {
                    "type": "string",
                    "format": "binary",
                    "description": "Optional file attachment (max 10MB)"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["message"],
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Message content",
                    "example": "Hallo, wie geht es dir?"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Message sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Nachricht erfolgreich gesendet" },
                    "data": { "$ref": "#/components/schemas/ChatMessage" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - Not a participant in this conversation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string", "example": "Sie sind kein Teilnehmer dieser Konversation" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Conversation not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "error": { "type": "string", "example": "Konversation nicht gefunden" } }
                }
              }
            }
          },
          "413": {
            "description": "File too large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "error": { "type": "string", "example": "Dateityp nicht erlaubt" } }
                }
              }
            }
          }
        }
      }
    },
    "/chat/attachments/{filename}": {
      "get": {
        "summary": "Download chat attachment",
        "description": "Download a file attachment from a chat message",
        "tags": ["Chat"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "filename",
            "required": true,
            "schema": { "type": "string" },
            "description": "Attachment filename"
          },
          {
            "in": "query",
            "name": "download",
            "schema": { "type": "boolean", "default": false },
            "description": "Force download instead of inline display"
          }
        ],
        "responses": {
          "200": {
            "description": "File content",
            "content": {
              "image/jpeg": { "schema": { "type": "string", "format": "binary" } },
              "image/png": { "schema": { "type": "string", "format": "binary" } },
              "image/gif": { "schema": { "type": "string", "format": "binary" } },
              "image/webp": { "schema": { "type": "string", "format": "binary" } },
              "application/pdf": { "schema": { "type": "string", "format": "binary" } },
              "text/plain": { "schema": { "type": "string", "format": "binary" } },
              "application/msword": { "schema": { "type": "string", "format": "binary" } },
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                "schema": { "type": "string", "format": "binary" }
              }
            },
            "headers": {
              "Content-Disposition": {
                "schema": { "type": "string", "example": "attachment; filename=\"document.pdf\"" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - No access to this file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "error": { "type": "string", "example": "Kein Zugriff auf diese Datei" } }
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "error": { "type": "string", "example": "Datei nicht gefunden" } }
                }
              }
            }
          }
        }
      }
    },
    "/chat/unread-count": {
      "get": {
        "summary": "Get unread message count",
        "description": "Get the total number of unread messages for the authenticated user",
        "tags": ["Chat"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Unread count retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unreadCount": {
                      "type": "integer",
                      "description": "Total number of unread messages",
                      "example": 5
                    },
                    "conversations": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "conversationId": { "type": "integer" },
                          "unreadCount": { "type": "integer" },
                          "lastMessage": { "type": "string", "format": "date-time" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/chat/conversations/{id}/read": {
      "post": {
        "summary": "Mark conversation as read",
        "description": "Mark all messages in a conversation as read",
        "tags": ["Chat"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Conversation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation marked as read",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Konversation als gelesen markiert" },
                    "markedCount": { "type": "integer", "description": "Number of messages marked as read" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - Not a participant in this conversation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string", "example": "Sie sind kein Teilnehmer dieser Konversation" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Conversation not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "error": { "type": "string", "example": "Konversation nicht gefunden" } }
                }
              }
            }
          }
        }
      }
    },
    "/chat/conversations/{id}": {
      "delete": {
        "summary": "Delete conversation",
        "description": "Delete a conversation (admin only or if you're the only participant)",
        "tags": ["Chat"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Conversation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Konversation erfolgreich gelöscht" } }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - Cannot delete this conversation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string", "example": "Sie können diese Konversation nicht löschen" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Conversation not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "error": { "type": "string", "example": "Konversation nicht gefunden" } }
                }
              }
            }
          }
        }
      }
    },
    "/departments": {
      "post": {
        "summary": "Create a new department",
        "description": "Create a new department (Admin/Root only)",
        "tags": ["Departments"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": { "type": "string", "description": "Department name", "example": "Produktion" },
                  "description": {
                    "type": "string",
                    "description": "Department description",
                    "example": "Produktionsabteilung für alle Fertigungsprozesse"
                  },
                  "manager_id": { "type": "integer", "description": "User ID of department manager", "example": 42 },
                  "parent_id": {
                    "type": "integer",
                    "description": "Parent department ID for hierarchical structure",
                    "example": 1
                  },
                  "location": {
                    "type": "string",
                    "description": "Physical location",
                    "example": "Gebäude A, 2. Stock"
                  },
                  "cost_center": { "type": "string", "description": "Cost center code", "example": "CC-PROD-001" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Department created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Abteilung erfolgreich erstellt" },
                    "departmentId": { "type": "integer", "example": 5 }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Abteilungsname ist erforderlich" } }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - Not admin/root",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Zugriff verweigert" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      },
      "get": {
        "summary": "Get all departments",
        "description": "Retrieve all departments for the tenant",
        "tags": ["Departments"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Departments retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Department" } }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/departments/{id}": {
      "get": {
        "summary": "Get department by ID",
        "description": "Retrieve a specific department by its ID",
        "tags": ["Departments"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Department ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Department retrieved successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Department" } } }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "404": {
            "description": "Department not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Abteilung nicht gefunden" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      },
      "put": {
        "summary": "Update department",
        "description": "Update an existing department (Admin/Root only)",
        "tags": ["Departments"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Department ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "description": "Department name", "example": "Produktion" },
                  "description": { "type": "string", "description": "Department description" },
                  "manager_id": { "type": "integer", "description": "User ID of department manager" },
                  "parent_id": { "type": "integer", "description": "Parent department ID" },
                  "location": { "type": "string", "description": "Physical location" },
                  "cost_center": { "type": "string", "description": "Cost center code" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Department updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Abteilung erfolgreich aktualisiert" } }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Eine Abteilung kann nicht sich selbst als Übergeordnete haben"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - Not admin/root",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Zugriff verweigert" } }
                }
              }
            }
          },
          "404": {
            "description": "Department not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Abteilung nicht gefunden" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      },
      "delete": {
        "summary": "Delete department",
        "description": "Delete a department (Admin/Root only). Cannot delete if users are assigned.",
        "tags": ["Departments"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Department ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Department deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Abteilung erfolgreich gelöscht" } }
                }
              }
            }
          },
          "400": {
            "description": "Cannot delete - has assigned users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Diese Abteilung kann nicht gelöscht werden, da ihr noch Benutzer zugeordnet sind"
                    },
                    "users": { "type": "array", "items": { "$ref": "#/components/schemas/User" } }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - Not admin/root",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Zugriff verweigert" } }
                }
              }
            }
          },
          "404": {
            "description": "Department not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Abteilung nicht gefunden" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/departments/{id}/members": {
      "get": {
        "summary": "Get department members",
        "description": "Retrieve all users assigned to a specific department",
        "tags": ["Departments"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Department ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Department members retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "integer" },
                      "username": { "type": "string" },
                      "email": { "type": "string" },
                      "first_name": { "type": "string" },
                      "last_name": { "type": "string" },
                      "role": { "type": "string", "enum": ["root", "admin", "employee"] },
                      "position": { "type": "string" },
                      "is_active": { "type": "boolean" }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "404": {
            "description": "Department not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Abteilung nicht gefunden" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/documents/upload": {
      "post": {
        "summary": "Upload a document",
        "description": "Upload a PDF document to the system (Admin only)",
        "tags": ["Documents"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["document", "category"],
                "properties": {
                  "document": { "type": "string", "format": "binary", "description": "PDF file to upload (max 5MB)" },
                  "title": { "type": "string", "description": "Document title", "example": "Arbeitsvertrag" },
                  "description": {
                    "type": "string",
                    "description": "Document description",
                    "example": "Arbeitsvertrag für neuen Mitarbeiter"
                  },
                  "category": {
                    "type": "string",
                    "enum": ["personal", "company", "department", "team", "payroll"],
                    "description": "Document category"
                  },
                  "userId": { "type": "integer", "description": "Target user ID (for personal documents)" },
                  "teamId": { "type": "integer", "description": "Target team ID (for team documents)" },
                  "departmentId": {
                    "type": "integer",
                    "description": "Target department ID (for department documents)"
                  },
                  "year": { "type": "integer", "description": "Year (for payroll documents)", "example": 2025 },
                  "month": { "type": "integer", "description": "Month (for payroll documents)", "example": 6 }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Dokument erfolgreich hochgeladen" },
                    "documentId": { "type": "integer", "description": "ID of the uploaded document", "example": 123 }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid file or parameters",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - User is not an admin",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "413": {
            "description": "File too large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "error": { "type": "string", "example": "Nur PDF-Dateien sind erlaubt!" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/documents": {
      "get": {
        "summary": "Get all documents",
        "description": "Retrieve a list of documents with optional filtering (Admin only)",
        "tags": ["Documents"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "category",
            "schema": { "type": "string", "enum": ["personal", "company", "department", "team", "payroll"] },
            "description": "Filter by document category"
          },
          {
            "in": "query",
            "name": "userId",
            "schema": { "type": "integer" },
            "description": "Filter by target user ID"
          },
          {
            "in": "query",
            "name": "year",
            "schema": { "type": "integer" },
            "description": "Filter by year (for payroll documents)"
          },
          {
            "in": "query",
            "name": "month",
            "schema": { "type": "integer" },
            "description": "Filter by month (for payroll documents)"
          },
          {
            "in": "query",
            "name": "page",
            "schema": { "type": "integer", "minimum": 1, "default": 1 },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100, "default": 20 },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "archived",
            "schema": { "type": "boolean" },
            "description": "Filter by archived status"
          }
        ],
        "responses": {
          "200": {
            "description": "Documents retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "documents": { "type": "array", "items": { "$ref": "#/components/schemas/Document" } },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "currentPage": { "type": "integer" },
                        "totalPages": { "type": "integer" },
                        "totalDocuments": { "type": "integer" },
                        "hasNext": { "type": "boolean" },
                        "hasPrev": { "type": "boolean" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - User is not an admin",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/documents/preview/{documentId}": {
      "get": {
        "summary": "Preview document",
        "description": "Get document content for inline preview (iframe display)",
        "tags": ["Documents"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Document ID to preview"
          }
        ],
        "responses": {
          "200": {
            "description": "Document content for preview",
            "content": { "application/pdf": { "schema": { "type": "string", "format": "binary" } } },
            "headers": {
              "Content-Type": { "schema": { "type": "string", "example": "application/pdf" } },
              "Content-Disposition": { "schema": { "type": "string", "example": "inline; filename=\"document.pdf\"" } }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - No access to this document",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Kein Zugriff auf dieses Dokument" } }
                }
              }
            }
          },
          "404": {
            "description": "Document not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Dokument nicht gefunden" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error or document has no content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Dokument hat keinen Inhalt" } }
                }
              }
            }
          }
        }
      }
    },
    "/employee/info": {
      "get": {
        "summary": "Get employee information",
        "description": "Retrieve the current employee's personal information",
        "tags": ["Employee"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Employee information retrieved successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - User is not an employee",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "404": {
            "description": "Employee not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Mitarbeiter nicht gefunden" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/employee/documents": {
      "get": {
        "summary": "Get employee documents",
        "description": "Retrieve all documents accessible to the employee (personal, team, department, and company documents)",
        "tags": ["Employee"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Documents retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Document" } }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - User is not an employee",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/kvp": {
      "get": {
        "summary": "Get all KVP suggestions",
        "description": "Retrieve all KVP suggestions visible to the user with pagination and filtering",
        "tags": ["KVP"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": { "type": "string", "enum": ["pending", "approved", "implemented", "rejected"] },
            "description": "Filter by suggestion status"
          },
          { "in": "query", "name": "category", "schema": { "type": "string" }, "description": "Filter by category" },
          {
            "in": "query",
            "name": "search",
            "schema": { "type": "string" },
            "description": "Search in title and description"
          },
          {
            "in": "query",
            "name": "page",
            "schema": { "type": "integer", "minimum": 1, "default": 1 },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100, "default": 10 },
            "description": "Items per page"
          },
          {
            "in": "query",
            "name": "shared",
            "schema": { "type": "boolean" },
            "description": "Filter by shared/private status"
          }
        ],
        "responses": {
          "200": {
            "description": "KVP suggestions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "type": "array", "items": { "$ref": "#/components/schemas/KvpSuggestion" } },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "currentPage": { "type": "integer" },
                        "totalPages": { "type": "integer" },
                        "totalItems": { "type": "integer" },
                        "itemsPerPage": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      },
      "post": {
        "summary": "Create KVP suggestion",
        "description": "Create a new KVP suggestion",
        "tags": ["KVP"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "description", "category"],
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Suggestion title",
                    "example": "Optimierung der Pausenzeiten"
                  },
                  "description": {
                    "type": "string",
                    "description": "Detailed description",
                    "example": "Durch versetzte Pausenzeiten können wir die Produktivität steigern..."
                  },
                  "category": {
                    "type": "string",
                    "enum": ["Sicherheit", "Produktivität", "Qualität", "Kosten", "Umwelt", "Sonstiges"],
                    "description": "Suggestion category"
                  },
                  "potential_savings": { "type": "number", "description": "Estimated savings in EUR", "example": 5000 },
                  "implementation_effort": {
                    "type": "string",
                    "enum": ["low", "medium", "high"],
                    "description": "Effort required"
                  },
                  "is_shared": { "type": "boolean", "default": false, "description": "Share with other users" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Suggestion created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "KVP-Vorschlag erfolgreich erstellt" },
                    "suggestion": { "$ref": "#/components/schemas/KvpSuggestion" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/kvp/categories": {
      "get": {
        "summary": "Get KVP categories",
        "description": "Retrieve all available KVP categories",
        "tags": ["KVP"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Categories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" },
                  "example": ["Sicherheit", "Produktivität", "Qualität", "Kosten", "Umwelt", "Sonstiges"]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/kvp/stats": {
      "get": {
        "summary": "Get KVP statistics",
        "description": "Retrieve statistics about KVP suggestions",
        "tags": ["KVP"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": { "type": "integer", "description": "Total number of suggestions" },
                    "byStatus": {
                      "type": "object",
                      "properties": {
                        "pending": { "type": "integer" },
                        "approved": { "type": "integer" },
                        "implemented": { "type": "integer" },
                        "rejected": { "type": "integer" }
                      }
                    },
                    "byCategory": { "type": "object", "additionalProperties": { "type": "integer" } },
                    "thisMonth": { "type": "integer", "description": "Suggestions created this month" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/kvp/{id}": {
      "get": {
        "summary": "Get KVP suggestion by ID",
        "description": "Retrieve a specific KVP suggestion with all details",
        "tags": ["KVP"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "KVP suggestion ID"
          }
        ],
        "responses": {
          "200": {
            "description": "KVP suggestion retrieved successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/KvpSuggestion" } } }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "404": {
            "description": "Suggestion not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "error": { "type": "string", "example": "Vorschlag nicht gefunden" } }
                }
              }
            }
          }
        }
      }
    },
    "/kvp/{id}/comments": {
      "get": {
        "summary": "Get comments for KVP suggestion",
        "description": "Retrieve all comments for a specific KVP suggestion",
        "tags": ["KVP"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "KVP suggestion ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Comments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comments": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "comment": { "type": "string" },
                          "created_by": { "type": "integer" },
                          "created_by_name": { "type": "string" },
                          "created_at": { "type": "string", "format": "date-time" }
                        }
                      },
                      "example": [
                        {
                          "id": 1,
                          "comment": "Sehr gute Idee! Das sollten wir umsetzen.",
                          "created_by": 42,
                          "created_by_name": "Max Mustermann",
                          "created_at": "2025-06-23T10:30:00Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "404": { "description": "Suggestion not found" }
        }
      },
      "post": {
        "summary": "Add comment to KVP suggestion",
        "description": "Add a new comment to a specific KVP suggestion",
        "tags": ["KVP"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "KVP suggestion ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["comment"],
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Comment text",
                    "example": "Sehr gute Idee! Das sollten wir umsetzen."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comment added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Kommentar erfolgreich hinzugefügt" },
                    "comment": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "comment": { "type": "string" },
                        "created_at": { "type": "string", "format": "date-time" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "404": { "description": "Suggestion not found" }
        }
      }
    },
    "/shifts/templates": {
      "get": {
        "summary": "Get all shift templates",
        "description": "Retrieve all available shift templates for the tenant",
        "tags": ["Shifts"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Shift templates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "templates": { "type": "array", "items": { "$ref": "#/components/schemas/ShiftTemplate" } }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": { "type": "string", "example": "Fehler beim Laden der Schichtvorlagen" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/shifts/plans": {
      "get": {
        "summary": "Get all shift plans",
        "description": "Retrieve shift plans with optional filtering",
        "tags": ["Shifts"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "department_id",
            "schema": { "type": "integer" },
            "description": "Filter by department ID"
          },
          { "in": "query", "name": "team_id", "schema": { "type": "integer" }, "description": "Filter by team ID" },
          {
            "in": "query",
            "name": "start_date",
            "schema": { "type": "string", "format": "date" },
            "description": "Filter plans starting from this date"
          },
          {
            "in": "query",
            "name": "end_date",
            "schema": { "type": "string", "format": "date" },
            "description": "Filter plans ending before this date"
          },
          {
            "in": "query",
            "name": "status",
            "schema": { "type": "string", "enum": ["draft", "published", "archived"] },
            "description": "Filter by plan status"
          },
          {
            "in": "query",
            "name": "page",
            "schema": { "type": "integer", "minimum": 1, "default": 1 },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100, "default": 20 },
            "description": "Items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Shift plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plans": { "type": "array", "items": { "$ref": "#/components/schemas/ShiftPlan" } },
                    "total": { "type": "integer", "description": "Total number of plans" },
                    "page": { "type": "integer", "description": "Current page" },
                    "limit": { "type": "integer", "description": "Items per page" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "500": { "description": "Server error" }
        }
      }
    },
    "/surveys": {
      "get": {
        "summary": "Get all surveys",
        "description": "Retrieve all surveys for the tenant with pagination and filtering",
        "tags": ["Survey"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": { "type": "string", "enum": ["active", "draft", "closed"] },
            "description": "Filter by survey status"
          },
          {
            "in": "query",
            "name": "page",
            "schema": { "type": "integer", "minimum": 1, "default": 1 },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100, "default": 20 },
            "description": "Items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Surveys retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "surveys": { "type": "array", "items": { "$ref": "#/components/schemas/Survey" } },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "currentPage": { "type": "integer" },
                        "totalPages": { "type": "integer" },
                        "totalItems": { "type": "integer" },
                        "itemsPerPage": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Feature not available",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string", "example": "Feature not available for your subscription" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "error": { "type": "string", "example": "Fehler beim Abrufen der Umfragen" } }
                }
              }
            }
          }
        }
      }
    },
    "/teams": {
      "post": {
        "summary": "Create a new team",
        "description": "Create a new team (Admin/Root only)",
        "tags": ["Teams"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": { "type": "string", "description": "Team name", "example": "DevOps Team" },
                  "description": {
                    "type": "string",
                    "description": "Team description",
                    "example": "Verantwortlich für CI/CD und Infrastruktur"
                  },
                  "department_id": {
                    "type": "integer",
                    "description": "Department ID this team belongs to",
                    "example": 2
                  },
                  "leader_id": { "type": "integer", "description": "User ID of team leader", "example": 15 },
                  "max_members": { "type": "integer", "description": "Maximum team size", "example": 10 },
                  "location": { "type": "string", "description": "Team location", "example": "Gebäude B, Raum 201" },
                  "budget": { "type": "number", "description": "Team budget", "example": 50000 },
                  "is_active": { "type": "boolean", "default": true, "description": "Whether team is active" },
                  "goals": { "type": "string", "description": "Team goals and objectives" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Team created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Team erfolgreich erstellt" },
                    "teamId": { "type": "integer", "example": 8 }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Teamname ist erforderlich" } }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - Not admin/root",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Zugriff verweigert" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      },
      "get": {
        "summary": "Get all teams",
        "description": "Retrieve all teams for the tenant",
        "tags": ["Teams"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Teams retrieved successfully",
            "content": {
              "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Team" } } }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/teams/{id}": {
      "get": {
        "summary": "Get team by ID",
        "description": "Retrieve a specific team by its ID",
        "tags": ["Teams"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Team ID" }
        ],
        "responses": {
          "200": {
            "description": "Team retrieved successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Team" } } }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "404": {
            "description": "Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Team nicht gefunden" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      },
      "put": {
        "summary": "Update team",
        "description": "Update an existing team (Admin/Root only)",
        "tags": ["Teams"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Team ID" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "description": "Team name" },
                  "description": { "type": "string", "description": "Team description" },
                  "department_id": { "type": "integer", "description": "Department ID" },
                  "leader_id": { "type": "integer", "description": "Team leader user ID" },
                  "max_members": { "type": "integer", "description": "Maximum team size" },
                  "location": { "type": "string", "description": "Team location" },
                  "budget": { "type": "number", "description": "Team budget" },
                  "is_active": { "type": "boolean", "description": "Whether team is active" },
                  "goals": { "type": "string", "description": "Team goals" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Team updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Team erfolgreich aktualisiert" } }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Teamname ist erforderlich" } }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - Not admin/root",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Zugriff verweigert" } }
                }
              }
            }
          },
          "404": {
            "description": "Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Team nicht gefunden" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      },
      "delete": {
        "summary": "Delete team",
        "description": "Delete a team (Admin/Root only)",
        "tags": ["Teams"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Team ID" }
        ],
        "responses": {
          "200": {
            "description": "Team deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Team erfolgreich gelöscht" } }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - Not admin/root",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Zugriff verweigert" } }
                }
              }
            }
          },
          "404": {
            "description": "Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Team nicht gefunden" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/teams/{id}/members": {
      "get": {
        "summary": "Get team members",
        "description": "Retrieve all members of a specific team",
        "tags": ["Teams"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Team ID" }
        ],
        "responses": {
          "200": {
            "description": "Team members retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "integer" },
                      "username": { "type": "string" },
                      "email": { "type": "string" },
                      "first_name": { "type": "string" },
                      "last_name": { "type": "string" },
                      "role": { "type": "string", "enum": ["root", "admin", "employee"] },
                      "position": { "type": "string" },
                      "joined_at": { "type": "string", "format": "date-time" },
                      "is_leader": { "type": "boolean" }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "404": {
            "description": "Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Team nicht gefunden" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      },
      "post": {
        "summary": "Add user to team",
        "description": "Add a user to a team (Admin/Root only)",
        "tags": ["Teams"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Team ID" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["userId"],
                "properties": {
                  "userId": { "type": "integer", "description": "User ID to add to team", "example": 42 }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User added to team successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Benutzer erfolgreich zum Team hinzugefügt" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Benutzer-ID ist erforderlich" } }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - Not admin/root",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Zugriff verweigert" } }
                }
              }
            }
          },
          "404": {
            "description": "Team or user not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Team nicht gefunden" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/teams/{id}/members/{userId}": {
      "delete": {
        "summary": "Remove user from team",
        "description": "Remove a user from a team (Admin/Root only)",
        "tags": ["Teams"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Team ID" },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "User ID to remove"
          }
        ],
        "responses": {
          "200": {
            "description": "User removed from team successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Benutzer erfolgreich aus dem Team entfernt" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          },
          "403": {
            "description": "Forbidden - Not admin/root",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string", "example": "Zugriff verweigert" } }
                }
              }
            }
          },
          "404": {
            "description": "Team, user, or membership not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Benutzer ist kein Mitglied dieses Teams" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
          }
        }
      }
    },
    "/api/users/profile": {
      "get": {
        "summary": "Get current user profile",
        "tags": ["Users"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "success": { "type": "boolean" }, "data": { "type": "object" } }
                }
              }
            }
          },
          "401": { "description": "Not authenticated" },
          "404": { "description": "User not found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/api/v2/admin-permissions/my": {
      "get": {
        "summary": "Get current admin's permissions",
        "description": "Get all department and group permissions for the currently authenticated admin",
        "tags": ["Admin Permissions v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Permissions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": {
                      "type": "object",
                      "properties": {
                        "departments": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "integer" },
                              "name": { "type": "string" },
                              "description": { "type": "string" },
                              "canRead": { "type": "boolean" },
                              "canWrite": { "type": "boolean" },
                              "canDelete": { "type": "boolean" }
                            }
                          }
                        },
                        "groups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "integer" },
                              "name": { "type": "string" },
                              "departmentCount": { "type": "integer" },
                              "canRead": { "type": "boolean" },
                              "canWrite": { "type": "boolean" },
                              "canDelete": { "type": "boolean" }
                            }
                          }
                        },
                        "hasAllAccess": { "type": "boolean" },
                        "totalDepartments": { "type": "integer" },
                        "assignedDepartments": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/admin-permissions/{adminId}": {
      "get": {
        "summary": "Get permissions for a specific admin",
        "description": "Get all department and group permissions for a specific admin (root only)",
        "tags": ["Admin Permissions v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "adminId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Admin user ID"
          }
        ],
        "responses": {
          "200": { "description": "Permissions retrieved successfully" },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/admin-permissions": {
      "post": {
        "summary": "Set permissions for an admin",
        "description": "Set department and/or group permissions for an admin user (root only)",
        "tags": ["Admin Permissions v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["adminId"],
                "properties": {
                  "adminId": { "type": "integer", "description": "Admin user ID" },
                  "departmentIds": {
                    "type": "array",
                    "items": { "type": "integer" },
                    "description": "Array of department IDs to grant access to"
                  },
                  "groupIds": {
                    "type": "array",
                    "items": { "type": "integer" },
                    "description": "Array of group IDs to grant access to"
                  },
                  "permissions": {
                    "type": "object",
                    "properties": {
                      "canRead": { "type": "boolean", "default": true },
                      "canWrite": { "type": "boolean", "default": false },
                      "canDelete": { "type": "boolean", "default": false }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Permissions set successfully" },
          "400": { "$ref": "#/components/responses/BadRequestV2" },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/admin-permissions/{adminId}/departments/{departmentId}": {
      "delete": {
        "summary": "Remove department permission",
        "description": "Remove a specific department permission from an admin (root only)",
        "tags": ["Admin Permissions v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "adminId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Admin user ID"
          },
          {
            "in": "path",
            "name": "departmentId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Department ID"
          }
        ],
        "responses": {
          "200": { "description": "Permission removed successfully" },
          "400": { "$ref": "#/components/responses/BadRequestV2" },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/admin-permissions/{adminId}/groups/{groupId}": {
      "delete": {
        "summary": "Remove group permission",
        "description": "Remove a specific group permission from an admin (root only)",
        "tags": ["Admin Permissions v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "adminId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Admin user ID"
          },
          {
            "in": "path",
            "name": "groupId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Group ID"
          }
        ],
        "responses": {
          "200": { "description": "Group permission removed successfully" },
          "400": { "$ref": "#/components/responses/BadRequestV2" },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/admin-permissions/bulk": {
      "post": {
        "summary": "Bulk update permissions",
        "description": "Assign or remove permissions for multiple admins at once (root only)",
        "tags": ["Admin Permissions v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["adminIds", "operation"],
                "properties": {
                  "adminIds": {
                    "type": "array",
                    "items": { "type": "integer" },
                    "description": "Array of admin user IDs"
                  },
                  "operation": {
                    "type": "string",
                    "enum": ["assign", "remove"],
                    "description": "Operation to perform"
                  },
                  "departmentIds": {
                    "type": "array",
                    "items": { "type": "integer" },
                    "description": "Department IDs for assign operation"
                  },
                  "groupIds": {
                    "type": "array",
                    "items": { "type": "integer" },
                    "description": "Group IDs for assign operation"
                  },
                  "permissions": {
                    "type": "object",
                    "properties": {
                      "canRead": { "type": "boolean", "default": true },
                      "canWrite": { "type": "boolean", "default": false },
                      "canDelete": { "type": "boolean", "default": false }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk operation completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "successCount": { "type": "integer" },
                        "totalCount": { "type": "integer" },
                        "errors": { "type": "array", "items": { "type": "string" } }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestV2" },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/admin-permissions/{adminId}/check/{departmentId}/{permissionLevel}": {
      "get": {
        "summary": "Check admin access",
        "description": "Check if an admin has specific access to a department (root only, for debugging)",
        "tags": ["Admin Permissions v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "adminId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Admin user ID"
          },
          {
            "in": "path",
            "name": "departmentId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Department ID"
          },
          {
            "in": "path",
            "name": "permissionLevel",
            "required": false,
            "schema": { "type": "string", "enum": ["read", "write", "delete"], "default": "read" },
            "description": "Permission level to check"
          }
        ],
        "responses": {
          "200": {
            "description": "Access check result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "hasAccess": { "type": "boolean" },
                        "source": { "type": "string", "enum": ["direct", "group"] },
                        "permissions": {
                          "type": "object",
                          "properties": {
                            "canRead": { "type": "boolean" },
                            "canWrite": { "type": "boolean" },
                            "canDelete": { "type": "boolean" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestV2" },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/audit-trail": {
      "get": {
        "summary": "Get audit entries",
        "description": "Retrieve audit trail entries with optional filters. Users can only see their own entries unless they are root.",
        "tags": ["Audit Trail v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "Filter by user ID (root only)",
            "schema": { "type": "integer" }
          },
          { "name": "action", "in": "query", "description": "Filter by action type", "schema": { "type": "string" } },
          {
            "name": "resourceType",
            "in": "query",
            "description": "Filter by resource type",
            "schema": { "type": "string" }
          },
          {
            "name": "resourceId",
            "in": "query",
            "description": "Filter by resource ID",
            "schema": { "type": "integer" }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "schema": { "type": "string", "enum": ["success", "failure"] }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Start date (ISO 8601)",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "End date (ISO 8601)",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search in user name, resource name, or action",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": { "type": "integer", "minimum": 1, "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100, "default": 50 }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "enum": ["created_at", "action", "user_id", "resource_type"],
              "default": "created_at"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order",
            "schema": { "type": "string", "enum": ["asc", "desc"], "default": "desc" }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit entries retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "entries": { "type": "array", "items": { "$ref": "#/components/schemas/AuditEntry" } },
                        "pagination": { "$ref": "#/components/schemas/Pagination" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" }
        }
      }
    },
    "/api/v2/audit-trail/stats": {
      "get": {
        "summary": "Get audit statistics",
        "description": "Get aggregated statistics from audit trail (admin/root only)",
        "tags": ["Audit Trail v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Start date (ISO 8601)",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "End date (ISO 8601)",
            "schema": { "type": "string", "format": "date-time" }
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": { "$ref": "#/components/schemas/AuditStats" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" }
        }
      }
    },
    "/api/v2/audit-trail/reports": {
      "post": {
        "summary": "Generate compliance report",
        "description": "Generate a compliance report based on audit trail data (admin/root only)",
        "tags": ["Audit Trail v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["reportType", "dateFrom", "dateTo"],
                "properties": {
                  "reportType": {
                    "type": "string",
                    "enum": ["gdpr", "data_access", "data_changes", "user_activity"],
                    "description": "Type of compliance report"
                  },
                  "dateFrom": { "type": "string", "format": "date-time", "description": "Start date for the report" },
                  "dateTo": { "type": "string", "format": "date-time", "description": "End date for the report" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Report generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": { "$ref": "#/components/schemas/ComplianceReport" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" }
        }
      }
    },
    "/api/v2/audit-trail/export": {
      "get": {
        "summary": "Export audit entries",
        "description": "Export audit entries in JSON or CSV format (admin/root only)",
        "tags": ["Audit Trail v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "description": "Export format",
            "schema": { "type": "string", "enum": ["json", "csv"], "default": "json" }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Start date (ISO 8601)",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "End date (ISO 8601)",
            "schema": { "type": "string", "format": "date-time" }
          }
        ],
        "responses": {
          "200": {
            "description": "Export successful",
            "content": {
              "application/json": { "schema": { "type": "object" } },
              "text/csv": { "schema": { "type": "string" } }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" }
        }
      }
    },
    "/api/v2/audit-trail/retention": {
      "delete": {
        "summary": "Delete old audit entries",
        "description": "Delete audit entries older than specified days (root only, minimum 90 days)",
        "tags": ["Audit Trail v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["olderThanDays", "confirmPassword"],
                "properties": {
                  "olderThanDays": {
                    "type": "integer",
                    "minimum": 90,
                    "description": "Delete entries older than this many days"
                  },
                  "confirmPassword": { "type": "string", "description": "User's password for confirmation" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Entries deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "deletedCount": { "type": "integer" },
                        "cutoffDate": { "type": "string", "format": "date-time" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" }
        }
      }
    },
    "/api/v2/audit-trail/{id}": {
      "get": {
        "summary": "Get specific audit entry",
        "description": "Get a specific audit entry by ID. Users can only see their own entries unless they are root.",
        "tags": ["Audit Trail v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Audit entry ID",
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "Entry retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": { "$ref": "#/components/schemas/AuditEntry" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/api/v2/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticate user with email and password",
        "tags": ["Auth v2"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": { "type": "string", "format": "email", "example": "user@example.com" },
                  "password": { "type": "string", "format": "password", "example": "SecurePass123!" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": { "type": "string" },
                        "refreshToken": { "type": "string" },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "integer" },
                            "email": { "type": "string" },
                            "firstName": { "type": "string" },
                            "lastName": { "type": "string" },
                            "role": { "type": "string" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/auth/register": {
      "post": {
        "summary": "Register new user",
        "description": "Create a new user account (tenant admins only)",
        "tags": ["Auth v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password", "firstName", "lastName"],
                "properties": {
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string", "format": "password" },
                  "firstName": { "type": "string" },
                  "lastName": { "type": "string" },
                  "role": { "type": "string", "enum": ["employee", "admin"], "default": "employee" }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/auth/logout": {
      "post": {
        "summary": "User logout",
        "description": "Invalidate user session and tokens",
        "tags": ["Auth v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "Logout successful" } }
      }
    },
    "/api/v2/auth/refresh": {
      "post": {
        "summary": "Refresh access token",
        "description": "Get new access token using refresh token",
        "tags": ["Auth v2"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["refreshToken"],
                "properties": { "refreshToken": { "type": "string" } }
              }
            }
          }
        },
        "responses": { "200": { "description": "Token refreshed successfully" } }
      }
    },
    "/api/v2/auth/verify": {
      "get": {
        "summary": "Verify current token",
        "description": "Check if current access token is valid",
        "tags": ["Auth v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "Token is valid" } }
      }
    },
    "/api/v2/auth/me": {
      "get": {
        "summary": "Get current user",
        "description": "Get current authenticated user information",
        "tags": ["Auth v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "User information retrieved" } }
      }
    },
    "/api/v2/blackboard/entries": {
      "get": {
        "summary": "List blackboard entries",
        "tags": ["Blackboard v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": { "type": "string", "enum": ["active", "archived"] },
            "description": "Filter by status"
          },
          {
            "in": "query",
            "name": "filter",
            "schema": { "type": "string", "enum": ["all", "company", "department", "team"] },
            "description": "Filter by organization level"
          },
          {
            "in": "query",
            "name": "search",
            "schema": { "type": "string" },
            "description": "Search in title and content"
          },
          {
            "in": "query",
            "name": "priority",
            "schema": { "type": "string", "enum": ["low", "medium", "high", "urgent"] },
            "description": "Filter by priority"
          },
          {
            "in": "query",
            "name": "requiresConfirmation",
            "schema": { "type": "boolean" },
            "description": "Filter by confirmation requirement"
          },
          {
            "in": "query",
            "name": "page",
            "schema": { "type": "integer", "minimum": 1 },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 },
            "description": "Items per page"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": { "type": "string", "enum": ["created_at", "updated_at", "title", "priority", "expires_at"] },
            "description": "Sort field"
          },
          {
            "in": "query",
            "name": "sortDir",
            "schema": { "type": "string", "enum": ["ASC", "DESC"] },
            "description": "Sort direction"
          }
        ],
        "responses": {
          "200": {
            "description": "List of blackboard entries",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BlackboardEntriesResponseV2" } }
            }
          }
        }
      },
      "post": {
        "summary": "Create new blackboard entry",
        "tags": ["Blackboard v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateBlackboardEntryRequestV2" } }
          }
        },
        "responses": {
          "201": {
            "description": "Entry created successfully",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BlackboardEntryResponseV2" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestV2" }
        }
      }
    },
    "/api/v2/blackboard/entries/{id}": {
      "get": {
        "summary": "Get blackboard entry by ID",
        "tags": ["Blackboard v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Entry ID" }
        ],
        "responses": {
          "200": {
            "description": "Blackboard entry details",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BlackboardEntryResponseV2" } }
            }
          },
          "404": { "$ref": "#/components/responses/NotFoundV2" }
        }
      },
      "put": {
        "summary": "Update blackboard entry",
        "tags": ["Blackboard v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Entry ID" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateBlackboardEntryRequestV2" } }
          }
        },
        "responses": {
          "200": {
            "description": "Entry updated successfully",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BlackboardEntryResponseV2" } }
            }
          },
          "404": { "$ref": "#/components/responses/NotFoundV2" }
        }
      },
      "delete": {
        "summary": "Delete blackboard entry",
        "tags": ["Blackboard v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Entry ID" }
        ],
        "responses": {
          "200": {
            "description": "Entry deleted successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponseV2" } } }
          },
          "404": { "$ref": "#/components/responses/NotFoundV2" }
        }
      }
    },
    "/api/v2/blackboard/entries/{id}/archive": {
      "post": {
        "summary": "Archive blackboard entry",
        "tags": ["Blackboard v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Entry ID" }
        ],
        "responses": {
          "200": {
            "description": "Entry archived successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponseV2" } } }
          },
          "404": { "$ref": "#/components/responses/NotFoundV2" }
        }
      }
    },
    "/api/v2/blackboard/entries/{id}/unarchive": {
      "post": {
        "summary": "Unarchive blackboard entry",
        "tags": ["Blackboard v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Entry ID" }
        ],
        "responses": {
          "200": {
            "description": "Entry unarchived successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponseV2" } } }
          },
          "404": { "$ref": "#/components/responses/NotFoundV2" }
        }
      }
    },
    "/api/v2/blackboard/entries/{id}/confirm": {
      "post": {
        "summary": "Confirm reading a blackboard entry",
        "tags": ["Blackboard v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Entry ID" }
        ],
        "responses": {
          "200": {
            "description": "Entry confirmed successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponseV2" } } }
          },
          "400": { "$ref": "#/components/responses/BadRequestV2" }
        }
      }
    },
    "/api/v2/blackboard/entries/{id}/confirmations": {
      "get": {
        "summary": "Get confirmation status for an entry",
        "tags": ["Blackboard v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Entry ID" }
        ],
        "responses": {
          "200": {
            "description": "List of users and their confirmation status",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConfirmationStatusResponseV2" } }
            }
          }
        }
      }
    },
    "/api/v2/blackboard/dashboard": {
      "get": {
        "summary": "Get dashboard entries for current user",
        "tags": ["Blackboard v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "integer", "minimum": 1, "maximum": 10 },
            "description": "Number of entries to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Priority entries for dashboard",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DashboardEntriesResponseV2" } }
            }
          }
        }
      }
    },
    "/api/v2/blackboard/tags": {
      "get": {
        "summary": "Get all available tags",
        "tags": ["Blackboard v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "List of tags",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TagsResponseV2" } } }
          }
        }
      }
    },
    "/api/v2/blackboard/entries/{id}/attachments": {
      "post": {
        "summary": "Upload attachment to entry",
        "tags": ["Blackboard v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Entry ID" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "attachment": { "type": "string", "format": "binary", "description": "File to upload (PDF or image)" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attachment uploaded successfully",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AttachmentUploadResponseV2" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestV2" }
        }
      },
      "get": {
        "summary": "Get attachments for an entry",
        "tags": ["Blackboard v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Entry ID" }
        ],
        "responses": {
          "200": {
            "description": "List of attachments",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AttachmentsResponseV2" } } }
          }
        }
      }
    },
    "/api/v2/blackboard/attachments/{attachmentId}": {
      "get": {
        "summary": "Download attachment",
        "tags": ["Blackboard v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Attachment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "File download",
            "content": { "application/octet-stream": { "schema": { "type": "string", "format": "binary" } } }
          },
          "404": { "$ref": "#/components/responses/NotFoundV2" }
        }
      },
      "delete": {
        "summary": "Delete attachment",
        "tags": ["Blackboard v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Attachment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Attachment deleted successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponseV2" } } }
          },
          "404": { "$ref": "#/components/responses/NotFoundV2" }
        }
      }
    },
    "/api/v2/calendar/events": {
      "get": {
        "summary": "Get calendar events",
        "tags": ["Calendar v2"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": { "type": "string", "enum": ["active", "cancelled"] },
            "description": "Filter by event status"
          },
          {
            "in": "query",
            "name": "filter",
            "schema": { "type": "string", "enum": ["all", "company", "department", "team", "personal"] },
            "description": "Filter by visibility scope"
          },
          {
            "in": "query",
            "name": "search",
            "schema": { "type": "string" },
            "description": "Search in title and description"
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": { "type": "string", "format": "date" },
            "description": "Filter events starting from this date"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": { "type": "string", "format": "date" },
            "description": "Filter events ending before this date"
          },
          { "in": "query", "name": "page", "schema": { "type": "integer", "minimum": 1, "default": 1 } },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100, "default": 50 }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": ["startDate", "endDate", "title", "createdAt"],
              "default": "startDate"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": { "type": "string", "enum": ["asc", "desc"], "default": "asc" }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CalendarEventsResponse" } } }
          }
        }
      },
      "post": {
        "summary": "Create a new event",
        "tags": ["Calendar v2"],
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "startTime", "endTime", "orgLevel"],
                "properties": {
                  "title": { "type": "string" },
                  "description": { "type": "string" },
                  "location": { "type": "string" },
                  "startTime": { "type": "string", "format": "date-time" },
                  "endTime": { "type": "string", "format": "date-time" },
                  "allDay": { "type": "boolean" },
                  "orgLevel": { "type": "string", "enum": ["company", "department", "team", "personal"] },
                  "orgId": { "type": "integer" },
                  "reminderMinutes": { "type": "integer" },
                  "color": { "type": "string" },
                  "recurrenceRule": { "type": "string" },
                  "attendeeIds": { "type": "array", "items": { "type": "integer" } }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Event created successfully" },
          "400": { "description": "Validation error" }
        }
      }
    },
    "/api/v2/calendar/events/{id}": {
      "get": {
        "summary": "Get event by ID",
        "tags": ["Calendar v2"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Event ID" }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CalendarEventResponse" } } }
          },
          "404": { "description": "Event not found" }
        }
      },
      "put": {
        "summary": "Update an event",
        "tags": ["Calendar v2"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Event ID" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": { "type": "string" },
                  "description": { "type": "string" },
                  "location": { "type": "string" },
                  "startTime": { "type": "string", "format": "date-time" },
                  "endTime": { "type": "string", "format": "date-time" },
                  "allDay": { "type": "boolean" },
                  "orgLevel": { "type": "string", "enum": ["company", "department", "team", "personal"] },
                  "orgId": { "type": "integer" },
                  "reminderMinutes": { "type": "integer" },
                  "color": { "type": "string" },
                  "recurrenceRule": { "type": "string" },
                  "status": { "type": "string", "enum": ["tentative", "confirmed", "cancelled"] }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Event updated successfully" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Event not found" }
        }
      },
      "delete": {
        "summary": "Delete an event",
        "tags": ["Calendar v2"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Event ID" }
        ],
        "responses": {
          "200": { "description": "Event deleted successfully" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Event not found" }
        }
      }
    },
    "/api/v2/calendar/events/{id}/attendees/response": {
      "put": {
        "summary": "Update attendee response",
        "tags": ["Calendar v2"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Event ID" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["response"],
                "properties": { "response": { "type": "string", "enum": ["accepted", "declined", "tentative"] } }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Response updated successfully" },
          "404": { "description": "Event not found" }
        }
      }
    },
    "/api/v2/calendar/export": {
      "get": {
        "summary": "Export calendar events",
        "tags": ["Calendar v2"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "required": true,
            "schema": { "type": "string", "enum": ["ics", "csv"] },
            "description": "Export format"
          }
        ],
        "responses": {
          "200": {
            "description": "Export file",
            "content": {
              "text/calendar": { "schema": { "type": "string" } },
              "text/csv": { "schema": { "type": "string" } }
            }
          }
        }
      }
    },
    "/api/v2/calendar/dashboard": {
      "get": {
        "summary": "Get upcoming events for dashboard",
        "tags": ["Calendar v2"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "days",
            "schema": { "type": "integer", "minimum": 1, "maximum": 365, "default": 7 },
            "description": "Number of days to look ahead"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "integer", "minimum": 1, "maximum": 50, "default": 5 },
            "description": "Maximum number of events to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Upcoming events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": { "type": "array", "items": { "$ref": "#/components/schemas/CalendarEvent" } }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/calendar/unread-events": {
      "get": {
        "summary": "Get unread calendar events (events requiring response)",
        "tags": ["Calendar v2"],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "List of unread events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalUnread": { "type": "number", "description": "Total count of events requiring response" },
                    "eventsRequiringResponse": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "number" },
                          "title": { "type": "string" },
                          "startTime": { "type": "string" },
                          "requiresResponse": { "type": "boolean" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/chat/users": {
      "get": {
        "summary": "Get available chat users",
        "tags": ["Chat v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": { "type": "string" },
            "description": "Search by name, username, or email"
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiSuccessResponse" } } }
          }
        }
      }
    },
    "/api/v2/chat/conversations": {
      "get": {
        "summary": "Get user's conversations",
        "tags": ["Chat v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/PageParam" },
          { "$ref": "#/components/parameters/LimitParam" },
          { "$ref": "#/components/parameters/SearchParam" },
          {
            "in": "query",
            "name": "isGroup",
            "schema": { "type": "boolean" },
            "description": "Filter by group conversations"
          },
          {
            "in": "query",
            "name": "hasUnread",
            "schema": { "type": "boolean" },
            "description": "Filter conversations with unread messages"
          }
        ],
        "responses": { "200": { "description": "Conversations retrieved successfully" } }
      },
      "post": {
        "summary": "Create a new conversation",
        "tags": ["Chat v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["participantIds"],
                "properties": {
                  "participantIds": {
                    "type": "array",
                    "items": { "type": "integer" },
                    "description": "Array of user IDs to include"
                  },
                  "name": { "type": "string", "description": "Conversation name (for groups)" },
                  "isGroup": { "type": "boolean", "description": "Force group conversation" }
                }
              }
            }
          }
        },
        "responses": { "201": { "description": "Conversation created successfully" } }
      }
    },
    "/api/v2/chat/conversations/{id}": {
      "get": {
        "summary": "Get conversation details",
        "tags": ["Chat v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Conversation ID"
          }
        ],
        "responses": { "200": { "description": "Conversation retrieved successfully" } }
      },
      "put": {
        "summary": "Update conversation",
        "tags": ["Chat v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "id", "required": true, "schema": { "type": "integer" } }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "object", "properties": { "name": { "type": "string" } } } }
          }
        },
        "responses": { "200": { "description": "Conversation updated successfully" } }
      },
      "delete": {
        "summary": "Delete conversation",
        "tags": ["Chat v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "id", "required": true, "schema": { "type": "integer" } }],
        "responses": { "200": { "description": "Conversation deleted successfully" } }
      }
    },
    "/api/v2/chat/conversations/{id}/messages": {
      "get": {
        "summary": "Get messages from conversation",
        "tags": ["Chat v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" } },
          { "$ref": "#/components/parameters/PageParam" },
          { "$ref": "#/components/parameters/LimitParam" },
          { "$ref": "#/components/parameters/SearchParam" },
          { "in": "query", "name": "startDate", "schema": { "type": "string", "format": "date-time" } },
          { "in": "query", "name": "endDate", "schema": { "type": "string", "format": "date-time" } },
          { "in": "query", "name": "hasAttachment", "schema": { "type": "boolean" } }
        ],
        "responses": { "200": { "description": "Messages retrieved successfully" } }
      },
      "post": {
        "summary": "Send message to conversation",
        "tags": ["Chat v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "id", "required": true, "schema": { "type": "integer" } }],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": { "type": "string", "description": "Message content" },
                  "attachment": { "type": "string", "format": "binary", "description": "Optional file attachment" }
                }
              }
            },
            "application/json": {
              "schema": { "type": "object", "required": ["message"], "properties": { "message": { "type": "string" } } }
            }
          }
        },
        "responses": { "201": { "description": "Message sent successfully" } }
      }
    },
    "/api/v2/chat/messages/{id}": {
      "put": {
        "summary": "Edit a message",
        "tags": ["Chat v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "id", "required": true, "schema": { "type": "integer" } }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "object", "required": ["message"], "properties": { "message": { "type": "string" } } }
            }
          }
        },
        "responses": { "200": { "description": "Message updated successfully" } }
      },
      "delete": {
        "summary": "Delete a message",
        "tags": ["Chat v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "id", "required": true, "schema": { "type": "integer" } }],
        "responses": { "200": { "description": "Message deleted successfully" } }
      }
    },
    "/api/v2/chat/conversations/{id}/read": {
      "post": {
        "summary": "Mark conversation as read",
        "tags": ["Chat v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "id", "required": true, "schema": { "type": "integer" } }],
        "responses": { "200": { "description": "Conversation marked as read" } }
      }
    },
    "/api/v2/chat/unread-count": {
      "get": {
        "summary": "Get unread message count",
        "tags": ["Chat v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "Unread count retrieved successfully" } }
      }
    },
    "/api/v2/chat/attachments/{filename}": {
      "get": {
        "summary": "Download chat attachment",
        "tags": ["Chat v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "filename", "required": true, "schema": { "type": "string" } },
          {
            "in": "query",
            "name": "download",
            "schema": { "type": "boolean" },
            "description": "Force download instead of inline"
          }
        ],
        "responses": {
          "200": {
            "description": "File content",
            "content": { "application/octet-stream": { "schema": { "type": "string", "format": "binary" } } }
          }
        }
      }
    },
    "/api/v2/chat/conversations/{id}/participants": {
      "post": {
        "summary": "Add participants to conversation",
        "tags": ["Chat v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "id", "required": true, "schema": { "type": "integer" } }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["participantIds"],
                "properties": { "participantIds": { "type": "array", "items": { "type": "integer" } } }
              }
            }
          }
        },
        "responses": { "200": { "description": "Participants added successfully" } }
      }
    },
    "/api/v2/chat/conversations/{id}/participants/{userId}": {
      "delete": {
        "summary": "Remove participant from conversation",
        "tags": ["Chat v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" } },
          { "in": "path", "name": "userId", "required": true, "schema": { "type": "integer" } }
        ],
        "responses": { "200": { "description": "Participant removed successfully" } }
      }
    },
    "/api/v2/chat/conversations/{id}/leave": {
      "post": {
        "summary": "Leave conversation",
        "tags": ["Chat v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "id", "required": true, "schema": { "type": "integer" } }],
        "responses": { "200": { "description": "Left conversation successfully" } }
      }
    },
    "/api/v2/chat/search": {
      "get": {
        "summary": "Search messages across all conversations",
        "tags": ["Chat v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "required": true,
            "schema": { "type": "string" },
            "description": "Search query"
          },
          { "$ref": "#/components/parameters/PageParam" },
          { "$ref": "#/components/parameters/LimitParam" }
        ],
        "responses": { "200": { "description": "Search results retrieved successfully" } }
      }
    },
    "/api/v2/department-groups": {
      "get": {
        "summary": "Get all department groups",
        "description": "Get all department groups with hierarchical structure",
        "tags": ["Department Groups v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Department groups retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "name": { "type": "string" },
                          "description": { "type": "string" },
                          "parentGroupId": { "type": "integer" },
                          "memberCount": { "type": "integer" },
                          "createdAt": { "type": "string", "format": "date-time" },
                          "updatedAt": { "type": "string", "format": "date-time" },
                          "createdBy": { "type": "integer" },
                          "departments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": { "type": "integer" },
                                "name": { "type": "string" },
                                "description": { "type": "string" }
                              }
                            }
                          },
                          "subgroups": {
                            "type": "array",
                            "items": { "$ref": "#/components/schemas/DepartmentGroupWithHierarchy" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      },
      "post": {
        "summary": "Create a new department group",
        "description": "Create a new department group (root only)",
        "tags": ["Department Groups v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": { "type": "string", "description": "Group name", "maxLength": 100 },
                  "description": { "type": "string", "description": "Group description", "maxLength": 500 },
                  "parentGroupId": { "type": "integer", "description": "Parent group ID for hierarchical structure" },
                  "departmentIds": {
                    "type": "array",
                    "items": { "type": "integer" },
                    "description": "Initial departments to add to the group"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Department group created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": { "type": "object", "properties": { "id": { "type": "integer" } } },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestV2" },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "409": { "description": "Conflict - Group name already exists" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/department-groups/{id}": {
      "get": {
        "summary": "Get a department group by ID",
        "description": "Get a single department group by its ID",
        "tags": ["Department Groups v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Department group ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Department group retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": { "$ref": "#/components/schemas/DepartmentGroup" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      },
      "put": {
        "summary": "Update a department group",
        "description": "Update a department group (root only)",
        "tags": ["Department Groups v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Department group ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": { "type": "string", "description": "Group name", "maxLength": 100 },
                  "description": { "type": "string", "description": "Group description", "maxLength": 500 }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Department group updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "success": { "type": "boolean" }, "message": { "type": "string" } }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestV2" },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" },
          "409": { "description": "Conflict - Group name already exists" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      },
      "delete": {
        "summary": "Delete a department group",
        "description": "Delete a department group (root only). Cannot delete if group has admin permissions or subgroups.",
        "tags": ["Department Groups v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Department group ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Department group deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "success": { "type": "boolean" }, "message": { "type": "string" } }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" },
          "409": { "description": "Conflict - Group has admin permissions or subgroups" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/department-groups/{id}/departments": {
      "post": {
        "summary": "Add departments to a group",
        "description": "Add one or more departments to a department group (root only)",
        "tags": ["Department Groups v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Department group ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["departmentIds"],
                "properties": {
                  "departmentIds": {
                    "type": "array",
                    "items": { "type": "integer" },
                    "description": "Array of department IDs to add",
                    "minItems": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Departments added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "success": { "type": "boolean" }, "message": { "type": "string" } }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestV2" },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      },
      "get": {
        "summary": "Get departments in a group",
        "description": "Get all departments in a department group",
        "tags": ["Department Groups v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Department group ID"
          },
          {
            "in": "query",
            "name": "includeSubgroups",
            "schema": { "type": "boolean", "default": true },
            "description": "Include departments from subgroups"
          }
        ],
        "responses": {
          "200": {
            "description": "Departments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "name": { "type": "string" },
                          "description": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/department-groups/{id}/departments/{departmentId}": {
      "delete": {
        "summary": "Remove a department from a group",
        "description": "Remove a department from a department group (root only)",
        "tags": ["Department Groups v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Department group ID"
          },
          {
            "in": "path",
            "name": "departmentId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Department ID to remove"
          }
        ],
        "responses": {
          "200": {
            "description": "Department removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "success": { "type": "boolean" }, "message": { "type": "string" } }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/departments": {
      "get": {
        "summary": "Get all departments",
        "description": "Retrieve all departments for the authenticated user's tenant",
        "tags": ["Departments v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "includeExtended",
            "schema": { "type": "boolean", "default": true },
            "description": "Include extended fields (managerName, employeeCount, teamCount)"
          }
        ],
        "responses": {
          "200": {
            "description": "Departments retrieved successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DepartmentsResponseV2" } } }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      },
      "post": {
        "summary": "Create a new department",
        "description": "Create a new department (admin/root only)",
        "tags": ["Departments v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateDepartmentRequestV2" } } }
        },
        "responses": {
          "201": {
            "description": "Department created successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DepartmentResponseV2" } } }
          },
          "400": { "$ref": "#/components/responses/BadRequestV2" },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/departments/stats": {
      "get": {
        "summary": "Get department statistics",
        "description": "Get statistics about departments and teams for the tenant",
        "tags": ["Departments v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DepartmentStatsResponseV2" } }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/departments/{id}": {
      "get": {
        "summary": "Get department by ID",
        "description": "Retrieve a specific department by its ID",
        "tags": ["Departments v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Department ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Department retrieved successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DepartmentResponseV2" } } }
          },
          "400": { "$ref": "#/components/responses/BadRequestV2" },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      },
      "put": {
        "summary": "Update a department",
        "description": "Update an existing department (admin/root only)",
        "tags": ["Departments v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Department ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateDepartmentRequestV2" } } }
        },
        "responses": {
          "200": {
            "description": "Department updated successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DepartmentResponseV2" } } }
          },
          "400": { "$ref": "#/components/responses/BadRequestV2" },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      },
      "delete": {
        "summary": "Delete a department",
        "description": "Delete a department (admin/root only). Cannot delete if users are assigned.",
        "tags": ["Departments v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Department ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Department deleted successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessResponseV2" } } }
          },
          "400": { "$ref": "#/components/responses/BadRequestV2" },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/departments/{id}/members": {
      "get": {
        "summary": "Get department members",
        "description": "Retrieve all users assigned to a specific department",
        "tags": ["Departments v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Department ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Department members retrieved successfully",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DepartmentMembersResponseV2" } }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestV2" },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/documents": {
      "get": {
        "summary": "List documents with filters",
        "tags": ["Documents v2"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "category",
            "schema": { "type": "string", "enum": ["general", "personal", "work", "training", "hr", "salary"] },
            "description": "Filter by document category"
          },
          {
            "in": "query",
            "name": "recipientType",
            "schema": { "type": "string", "enum": ["user", "team", "department", "company"] },
            "description": "Filter by recipient type"
          },
          {
            "in": "query",
            "name": "userId",
            "schema": { "type": "integer" },
            "description": "Filter by user ID (admin only)"
          },
          { "in": "query", "name": "teamId", "schema": { "type": "integer" }, "description": "Filter by team ID" },
          {
            "in": "query",
            "name": "departmentId",
            "schema": { "type": "integer" },
            "description": "Filter by department ID"
          },
          {
            "in": "query",
            "name": "year",
            "schema": { "type": "integer" },
            "description": "Filter by year (for salary documents)"
          },
          {
            "in": "query",
            "name": "month",
            "schema": { "type": "integer", "minimum": 1, "maximum": 12 },
            "description": "Filter by month (for salary documents)"
          },
          {
            "in": "query",
            "name": "isArchived",
            "schema": { "type": "boolean", "default": false },
            "description": "Filter archived documents"
          },
          {
            "in": "query",
            "name": "search",
            "schema": { "type": "string" },
            "description": "Search in filename and description"
          },
          { "in": "query", "name": "page", "schema": { "type": "integer", "minimum": 1, "default": 1 } },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100, "default": 20 }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentsListResponse" } } }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Server error" }
        }
      },
      "post": {
        "summary": "Upload a new document",
        "tags": ["Documents v2"],
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["document", "category", "recipientType"],
                "properties": {
                  "document": { "type": "string", "format": "binary", "description": "PDF file to upload" },
                  "category": { "type": "string", "enum": ["general", "personal", "work", "training", "hr", "salary"] },
                  "recipientType": { "type": "string", "enum": ["user", "team", "department", "company"] },
                  "userId": { "type": "integer", "description": "Required when recipientType is 'user'" },
                  "teamId": { "type": "integer", "description": "Required when recipientType is 'team'" },
                  "departmentId": { "type": "integer", "description": "Required when recipientType is 'department'" },
                  "description": { "type": "string", "maxLength": 500 },
                  "tags": { "type": "string", "description": "JSON array of tags" },
                  "year": { "type": "integer", "description": "Required for salary documents" },
                  "month": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 12,
                    "description": "Required for salary documents"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document created successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentResponse" } } }
          },
          "400": { "description": "Bad request - Invalid data" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Admin only" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/api/v2/documents/{id}": {
      "get": {
        "summary": "Get document by ID",
        "tags": ["Documents v2"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Document ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentResponse" } } }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - No access to document" },
          "404": { "description": "Document not found" },
          "500": { "description": "Server error" }
        }
      },
      "put": {
        "summary": "Update document metadata",
        "tags": ["Documents v2"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Document ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": { "type": "string" },
                  "category": { "type": "string", "enum": ["general", "personal", "work", "training", "hr", "salary"] },
                  "description": { "type": "string", "maxLength": 500 },
                  "tags": { "type": "array", "items": { "type": "string" } },
                  "isPublic": { "type": "boolean" },
                  "expiresAt": { "type": "string", "format": "date-time" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document updated successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentResponse" } } }
          },
          "400": { "description": "Bad request" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Admin only" },
          "404": { "description": "Document not found" },
          "500": { "description": "Server error" }
        }
      },
      "delete": {
        "summary": "Delete a document",
        "tags": ["Documents v2"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Document ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Document deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": { "type": "object", "properties": { "message": { "type": "string" } } }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Admin only" },
          "404": { "description": "Document not found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/api/v2/documents/{id}/archive": {
      "post": {
        "summary": "Archive a document",
        "tags": ["Documents v2"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Document ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Document archived successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": { "type": "object", "properties": { "message": { "type": "string" } } }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Admin only" },
          "404": { "description": "Document not found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/api/v2/documents/{id}/unarchive": {
      "post": {
        "summary": "Unarchive a document",
        "tags": ["Documents v2"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Document ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Document unarchived successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": { "type": "object", "properties": { "message": { "type": "string" } } }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - Admin only" },
          "404": { "description": "Document not found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/api/v2/documents/{id}/download": {
      "get": {
        "summary": "Download a document file",
        "tags": ["Documents v2"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Document ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Document file",
            "content": { "application/pdf": { "schema": { "type": "string", "format": "binary" } } }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - No access to document" },
          "404": { "description": "Document not found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/api/v2/documents/{id}/preview": {
      "get": {
        "summary": "Preview a document inline",
        "tags": ["Documents v2"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Document ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Document file for preview",
            "content": { "application/pdf": { "schema": { "type": "string", "format": "binary" } } }
          },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden - No access to document" },
          "404": { "description": "Document not found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/api/v2/documents/stats": {
      "get": {
        "summary": "Get document statistics",
        "tags": ["Documents v2"],
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Document statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "unreadCount": { "type": "integer", "description": "Number of unread documents" },
                        "totalCount": { "type": "integer", "description": "Total number of documents" },
                        "storageUsed": { "type": "integer", "description": "Storage used in bytes (admin only)" },
                        "documentsByCategory": {
                          "type": "object",
                          "additionalProperties": { "type": "integer" },
                          "description": "Document count by category"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/api/v2/features": {
      "get": {
        "summary": "Get all available features",
        "description": "Retrieve all features available in the system. Public endpoint - no authentication required.",
        "tags": ["Features v2"],
        "parameters": [
          {
            "in": "query",
            "name": "includeInactive",
            "schema": { "type": "boolean", "default": false },
            "description": "Include inactive features in the response"
          }
        ],
        "responses": {
          "200": {
            "description": "Features retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": { "type": "array", "items": { "$ref": "#/components/schemas/FeatureV2" } },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "message": { "type": "string", "example": "Features retrieved successfully" },
                        "count": { "type": "integer", "example": 15 }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/v2/features/categories": {
      "get": {
        "summary": "Get features grouped by category",
        "description": "Retrieve all features organized by their categories. Public endpoint.",
        "tags": ["Features v2"],
        "parameters": [
          {
            "in": "query",
            "name": "includeInactive",
            "schema": { "type": "boolean", "default": false },
            "description": "Include inactive features in the response"
          }
        ],
        "responses": {
          "200": {
            "description": "Features by category retrieved successfully",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/FeaturesByCategoryResponse" } }
            }
          },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/v2/features/{code}": {
      "get": {
        "summary": "Get feature by code",
        "description": "Retrieve a specific feature by its unique code",
        "tags": ["Features v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "code",
            "required": true,
            "schema": { "type": "string" },
            "description": "Unique feature code",
            "example": "CHAT_MESSAGING"
          }
        ],
        "responses": {
          "200": {
            "description": "Feature retrieved successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FeatureResponse" } } }
          },
          "404": { "description": "Feature not found" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/v2/features/tenant/{tenantId}": {
      "get": {
        "summary": "Get features for a specific tenant",
        "description": "Retrieve all features activated for a specific tenant. Admin only.",
        "tags": ["Features v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Tenant ID",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant features retrieved successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TenantFeaturesResponse" } } }
          },
          "403": { "description": "Access denied" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/v2/features/my-features": {
      "get": {
        "summary": "Get features for authenticated user's tenant",
        "description": "Retrieve all features available for the current user's tenant",
        "tags": ["Features v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "My features retrieved successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MyFeaturesResponse" } } }
          },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/v2/features/tenant/{tenantId}/summary": {
      "get": {
        "summary": "Get tenant features summary",
        "description": "Get a summary of activated features for a tenant including counts by category",
        "tags": ["Features v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Tenant ID",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant features summary retrieved successfully",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TenantFeaturesSummaryResponse" } }
            }
          },
          "403": { "description": "Access denied" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/v2/features/activate": {
      "post": {
        "summary": "Activate a feature for a tenant",
        "description": "Activate a specific feature for a tenant. Admin/Root only.",
        "tags": ["Features v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FeatureActivationRequest" } } }
        },
        "responses": {
          "200": { "description": "Feature activated successfully" },
          "400": { "description": "Invalid request or feature already active" },
          "403": { "description": "Access denied" },
          "404": { "description": "Feature not found" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/v2/features/deactivate": {
      "post": {
        "summary": "Deactivate a feature for a tenant",
        "description": "Deactivate a specific feature for a tenant. Admin/Root only.",
        "tags": ["Features v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FeatureDeactivationRequest" } } }
        },
        "responses": {
          "200": { "description": "Feature deactivated successfully" },
          "403": { "description": "Access denied" },
          "404": { "description": "Feature not found or not active" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/v2/features/usage/{featureCode}": {
      "get": {
        "summary": "Get feature usage statistics",
        "description": "Get usage statistics for a specific feature within a date range",
        "tags": ["Features v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "featureCode",
            "required": true,
            "schema": { "type": "string" },
            "description": "Feature code",
            "example": "CHAT_MESSAGING"
          },
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "description": "Start date for usage stats",
            "example": "2025-01-01"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "description": "End date for usage stats",
            "example": "2025-01-31"
          }
        ],
        "responses": {
          "200": {
            "description": "Usage statistics retrieved successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UsageStatsResponse" } } }
          },
          "400": { "description": "Missing required parameters" },
          "404": { "description": "Feature not found" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/v2/features/test/{featureCode}": {
      "get": {
        "summary": "Test feature access",
        "description": "Test if the current user's tenant has access to a specific feature",
        "tags": ["Features v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "featureCode",
            "required": true,
            "schema": { "type": "string" },
            "description": "Feature code to test",
            "example": "CHAT_MESSAGING"
          }
        ],
        "responses": {
          "200": {
            "description": "Access granted",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FeatureAccessResponse" } } }
          },
          "403": { "description": "Feature access denied" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/v2/features/all-tenants": {
      "get": {
        "summary": "Get all tenants with their features",
        "description": "Get a complete list of all tenants and their activated features. Root only.",
        "tags": ["Features v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "All tenants with features retrieved successfully",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AllTenantsWithFeaturesResponse" } }
            }
          },
          "403": { "description": "Access denied - Root only" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/v2/kvp/categories": {
      "get": {
        "summary": "Get KVP categories",
        "description": "Retrieve all available KVP categories for the tenant",
        "tags": ["KVP v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Categories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "integer" },
                              "name": { "type": "string" },
                              "description": { "type": "string" },
                              "color": { "type": "string" },
                              "icon": { "type": "string" }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/kvp/dashboard/stats": {
      "get": {
        "summary": "Get KVP dashboard statistics",
        "description": "Retrieve statistics about KVP suggestions for dashboard display",
        "tags": ["KVP v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "totalSuggestions": { "type": "integer" },
                            "newSuggestions": { "type": "integer" },
                            "inProgress": { "type": "integer" },
                            "implemented": { "type": "integer" },
                            "rejected": { "type": "integer" },
                            "avgSavings": { "type": "number", "nullable": true }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/kvp/points/award": {
      "post": {
        "summary": "Award points to user",
        "description": "Award points to a user for their KVP suggestion (admin only)",
        "tags": ["KVP v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["userId", "suggestionId", "points", "reason"],
                "properties": {
                  "userId": { "type": "integer", "description": "User ID to award points to" },
                  "suggestionId": { "type": "integer", "description": "Related suggestion ID" },
                  "points": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "description": "Number of points to award"
                  },
                  "reason": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 500,
                    "description": "Reason for awarding points"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Points awarded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/KvpPointsV2" } } }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" }
        }
      }
    },
    "/api/v2/kvp/points/user/{userId}": {
      "get": {
        "summary": "Get user points summary",
        "description": "Get points summary for a specific user",
        "tags": ["KVP v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Points summary retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "totalPoints": { "type": "integer" },
                            "totalAwards": { "type": "integer" },
                            "suggestionsAwarded": { "type": "integer" },
                            "latestAwards": { "type": "array", "items": { "$ref": "#/components/schemas/KvpPointsV2" } }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/api/v2/kvp/points/user": {
      "get": {
        "summary": "Get current user points summary",
        "description": "Get points summary for the authenticated user",
        "tags": ["KVP v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Points summary retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "totalPoints": { "type": "integer" },
                            "totalAwards": { "type": "integer" },
                            "suggestionsAwarded": { "type": "integer" },
                            "latestAwards": { "type": "array", "items": { "$ref": "#/components/schemas/KvpPointsV2" } }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/kvp": {
      "get": {
        "summary": "List KVP suggestions",
        "description": "Get a paginated list of KVP suggestions with filters",
        "tags": ["KVP v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": { "type": "string", "enum": ["new", "in_progress", "implemented", "rejected"] }
          },
          { "name": "categoryId", "in": "query", "schema": { "type": "integer" } },
          {
            "name": "priority",
            "in": "query",
            "schema": { "type": "string", "enum": ["low", "normal", "high", "urgent"] }
          },
          {
            "name": "orgLevel",
            "in": "query",
            "schema": { "type": "string", "enum": ["company", "department", "team"] }
          },
          { "name": "search", "in": "query", "schema": { "type": "string" } },
          { "name": "page", "in": "query", "schema": { "type": "integer", "minimum": 1 } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "minimum": 1, "maximum": 100 } }
        ],
        "responses": {
          "200": {
            "description": "Suggestions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": { "type": "array", "items": { "$ref": "#/components/schemas/KvpSuggestionV2" } }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "post": {
        "summary": "Create KVP suggestion",
        "description": "Create a new KVP suggestion",
        "tags": ["KVP v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "description", "categoryId", "orgLevel", "orgId"],
                "properties": {
                  "title": { "type": "string", "minLength": 3, "maxLength": 255 },
                  "description": { "type": "string", "minLength": 10, "maxLength": 5000 },
                  "categoryId": { "type": "integer" },
                  "orgLevel": { "type": "string", "enum": ["company", "department", "team"] },
                  "orgId": { "type": "integer" },
                  "priority": { "type": "string", "enum": ["low", "normal", "high", "urgent"], "default": "normal" },
                  "expectedBenefit": { "type": "string", "maxLength": 500 },
                  "estimatedCost": { "type": "number", "minimum": 0 }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Suggestion created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/KvpSuggestionV2" } } }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/kvp/{id}": {
      "get": {
        "summary": "Get KVP suggestion by ID",
        "description": "Retrieve a specific KVP suggestion with all details",
        "tags": ["KVP v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Suggestion ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Suggestion retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/KvpSuggestionV2" } } }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "put": {
        "summary": "Update KVP suggestion",
        "description": "Update an existing KVP suggestion",
        "tags": ["KVP v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Suggestion ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": { "type": "string", "minLength": 3, "maxLength": 255 },
                  "description": { "type": "string", "minLength": 10, "maxLength": 5000 },
                  "categoryId": { "type": "integer" },
                  "priority": { "type": "string", "enum": ["low", "normal", "high", "urgent"] },
                  "status": {
                    "type": "string",
                    "enum": ["new", "in_progress", "implemented", "rejected"],
                    "description": "Only admin/manager can change status"
                  },
                  "expectedBenefit": { "type": "string", "maxLength": 500 },
                  "estimatedCost": { "type": "number", "minimum": 0 },
                  "actualSavings": {
                    "type": "number",
                    "minimum": 0,
                    "description": "Only admin/manager can set actual savings"
                  },
                  "implementationDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Only admin/manager can set implementation date"
                  },
                  "assignedTo": {
                    "type": "integer",
                    "description": "User ID assigned to implement (admin/manager only)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Suggestion updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/KvpSuggestionV2" } } }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "delete": {
        "summary": "Delete KVP suggestion",
        "description": "Delete a KVP suggestion (only own suggestions or admin)",
        "tags": ["KVP v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Suggestion ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Suggestion deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": { "type": null },
                        "message": { "type": "string", "example": "Suggestion deleted successfully" }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/api/v2/kvp/{id}/comments": {
      "get": {
        "summary": "Get comments for KVP suggestion",
        "description": "Retrieve all comments for a specific KVP suggestion",
        "tags": ["KVP v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Suggestion ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Comments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": { "type": "array", "items": { "$ref": "#/components/schemas/KvpCommentV2" } }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "post": {
        "summary": "Add comment to KVP suggestion",
        "description": "Add a new comment to a specific KVP suggestion",
        "tags": ["KVP v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Suggestion ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["comment"],
                "properties": {
                  "comment": { "type": "string", "minLength": 1, "maxLength": 2000 },
                  "isInternal": { "type": "boolean", "default": false }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comment added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/KvpCommentV2" } } }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/api/v2/kvp/{id}/attachments": {
      "get": {
        "summary": "Get attachments for KVP suggestion",
        "description": "Retrieve all attachments for a specific KVP suggestion",
        "tags": ["KVP v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Suggestion ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Attachments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": { "type": "array", "items": { "$ref": "#/components/schemas/KvpAttachmentV2" } }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "post": {
        "summary": "Upload attachments to KVP suggestion",
        "description": "Upload up to 5 attachments to a specific KVP suggestion",
        "tags": ["KVP v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Suggestion ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["files"],
                "properties": {
                  "files": {
                    "type": "array",
                    "items": { "type": "string", "format": "binary" },
                    "description": "File attachments (JPG, PNG, PDF, DOC, DOCX - max 10MB each, max 5 files)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attachments uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "uploadedCount": { "type": "integer" },
                            "attachments": {
                              "type": "array",
                              "items": { "$ref": "#/components/schemas/KvpAttachmentV2" }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" },
          "413": {
            "description": "File too large",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } }
          }
        }
      }
    },
    "/api/v2/kvp/attachments/{attachmentId}/download": {
      "get": {
        "summary": "Download KVP attachment",
        "description": "Download a specific attachment file",
        "tags": ["KVP v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "attachmentId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Attachment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "File download",
            "content": { "application/octet-stream": { "schema": { "type": "string", "format": "binary" } } }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/api/v2/logs": {
      "get": {
        "summary": "Get system logs",
        "description": "Retrieve system audit logs with filters (Root only)",
        "tags": ["Logs v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/PageParam" },
          { "$ref": "#/components/parameters/LimitParam" },
          { "name": "userId", "in": "query", "description": "Filter by user ID", "schema": { "type": "integer" } },
          { "name": "tenantId", "in": "query", "description": "Filter by tenant ID", "schema": { "type": "integer" } },
          { "name": "action", "in": "query", "description": "Filter by action type", "schema": { "type": "string" } },
          {
            "name": "entityType",
            "in": "query",
            "description": "Filter by entity type",
            "schema": { "type": "string" }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Filter logs after this date",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Filter logs before this date",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search in user names, emails, actions, entity types",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved logs",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "logs": { "type": "array", "items": { "$ref": "#/components/schemas/LogEntryV2" } },
                            "pagination": { "$ref": "#/components/schemas/PaginationMeta" }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" }
        }
      },
      "delete": {
        "summary": "Delete logs",
        "description": "Delete logs based on filters (Root only, requires password confirmation)",
        "tags": ["Logs v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["confirmPassword"],
                "properties": {
                  "userId": { "type": "integer", "description": "Delete logs for specific user" },
                  "tenantId": { "type": "integer", "description": "Delete logs for specific tenant" },
                  "olderThanDays": { "type": "integer", "description": "Delete logs older than specified days" },
                  "confirmPassword": {
                    "type": "string",
                    "format": "password",
                    "description": "Root user password confirmation"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully deleted logs",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": { "message": { "type": "string" }, "deletedCount": { "type": "integer" } }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" }
        }
      }
    },
    "/api/v2/logs/stats": {
      "get": {
        "summary": "Get log statistics",
        "description": "Get statistical overview of system logs (Root only)",
        "tags": ["Logs v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Successfully retrieved statistics",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "totalLogs": { "type": "integer", "description": "Total number of logs" },
                            "todayLogs": { "type": "integer", "description": "Number of logs created today" },
                            "uniqueUsers": { "type": "integer", "description": "Number of unique users in logs" },
                            "uniqueTenants": { "type": "integer", "description": "Number of unique tenants in logs" },
                            "topActions": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": { "action": { "type": "string" }, "count": { "type": "integer" } }
                              }
                            },
                            "topUsers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "userId": { "type": "integer" },
                                  "userName": { "type": "string" },
                                  "count": { "type": "integer" }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" }
        }
      }
    },
    "/api/v2/machines": {
      "get": {
        "summary": "List all machines",
        "description": "Get a paginated list of machines with optional filters",
        "tags": ["Machines v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/PageParam" },
          { "$ref": "#/components/parameters/LimitParam" },
          { "$ref": "#/components/parameters/SearchParam" },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by machine status",
            "schema": {
              "type": "string",
              "enum": ["operational", "maintenance", "repair", "standby", "decommissioned"]
            }
          },
          {
            "name": "machineType",
            "in": "query",
            "description": "Filter by machine type",
            "schema": {
              "type": "string",
              "enum": ["production", "packaging", "quality_control", "logistics", "utility", "other"]
            }
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Filter by department ID",
            "schema": { "type": "integer" }
          },
          {
            "name": "needsMaintenance",
            "in": "query",
            "description": "Filter machines needing maintenance",
            "schema": { "type": "boolean" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "enum": ["created_at", "updated_at", "name", "next_maintenance"],
              "default": "created_at"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order",
            "schema": { "type": "string", "enum": ["asc", "desc"], "default": "desc" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved machines list",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": { "type": "array", "items": { "$ref": "#/components/schemas/MachineV2" } }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "post": {
        "summary": "Create new machine",
        "description": "Create a new machine in the system (admin only)",
        "tags": ["Machines v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100,
                    "description": "Machine name",
                    "example": "CNC Machine 001"
                  },
                  "model": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Machine model",
                    "example": "DMG MORI DMU 50"
                  },
                  "manufacturer": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Machine manufacturer",
                    "example": "DMG MORI"
                  },
                  "serialNumber": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Unique serial number",
                    "example": "SN-2024-001"
                  },
                  "assetNumber": {
                    "type": "string",
                    "maxLength": 50,
                    "description": "Internal asset number",
                    "example": "ASSET-001"
                  },
                  "departmentId": { "type": "integer", "description": "Department ID" },
                  "areaId": { "type": "integer", "description": "Area ID within department" },
                  "location": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Physical location",
                    "example": "Building A, Floor 2, Bay 3"
                  },
                  "machineType": {
                    "type": "string",
                    "enum": ["production", "packaging", "quality_control", "logistics", "utility", "other"],
                    "default": "production",
                    "description": "Type of machine"
                  },
                  "status": {
                    "type": "string",
                    "enum": ["operational", "maintenance", "repair", "standby", "decommissioned"],
                    "default": "operational",
                    "description": "Current machine status"
                  },
                  "purchaseDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Date of purchase",
                    "example": "2024-01-15"
                  },
                  "installationDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Date of installation",
                    "example": "2024-02-01"
                  },
                  "warrantyUntil": {
                    "type": "string",
                    "format": "date",
                    "description": "Warranty expiration date",
                    "example": "2027-01-15"
                  },
                  "lastMaintenance": { "type": "string", "format": "date", "description": "Date of last maintenance" },
                  "nextMaintenance": {
                    "type": "string",
                    "format": "date",
                    "description": "Date of next scheduled maintenance"
                  },
                  "operatingHours": { "type": "integer", "minimum": 0, "description": "Total operating hours" },
                  "productionCapacity": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Production capacity",
                    "example": "500 units/hour"
                  },
                  "energyConsumption": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Energy consumption",
                    "example": "50 kW"
                  },
                  "manualUrl": { "type": "string", "format": "uri", "description": "URL to machine manual" },
                  "qrCode": { "type": "string", "maxLength": 255, "description": "QR code data" },
                  "notes": { "type": "string", "description": "Additional notes" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Machine created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/MachineV2" } } }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" }
        }
      }
    },
    "/api/v2/machines/statistics": {
      "get": {
        "summary": "Get machine statistics",
        "description": "Get statistical overview of all machines in the system",
        "tags": ["Machines v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Successfully retrieved machine statistics",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "totalMachines": { "type": "integer", "description": "Total number of active machines" },
                            "operational": { "type": "integer", "description": "Number of operational machines" },
                            "inMaintenance": { "type": "integer", "description": "Number of machines in maintenance" },
                            "inRepair": { "type": "integer", "description": "Number of machines in repair" },
                            "standby": { "type": "integer", "description": "Number of machines on standby" },
                            "decommissioned": { "type": "integer", "description": "Number of decommissioned machines" },
                            "needsMaintenanceSoon": {
                              "type": "integer",
                              "description": "Number of machines needing maintenance within 30 days"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/machines/categories": {
      "get": {
        "summary": "Get machine categories",
        "description": "Get all available machine categories",
        "tags": ["Machines v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Successfully retrieved machine categories",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "integer" },
                              "name": { "type": "string" },
                              "description": { "type": "string" },
                              "icon": { "type": "string" },
                              "sortOrder": { "type": "integer" },
                              "isActive": { "type": "boolean" }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/machines/upcoming-maintenance": {
      "get": {
        "summary": "Get upcoming maintenance",
        "description": "Get machines that need maintenance within specified days",
        "tags": ["Machines v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "description": "Number of days to look ahead (1-365)",
            "required": false,
            "schema": { "type": "integer", "minimum": 1, "maximum": 365, "default": 30 }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved machines needing maintenance",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": { "type": "array", "items": { "$ref": "#/components/schemas/MachineV2" } }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/machines/maintenance": {
      "post": {
        "summary": "Add maintenance record",
        "description": "Record a new maintenance activity for a machine (admin only)",
        "tags": ["Machines v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["machineId", "maintenanceType", "performedDate"],
                "properties": {
                  "machineId": { "type": "integer", "description": "ID of the machine" },
                  "maintenanceType": {
                    "type": "string",
                    "enum": ["preventive", "corrective", "inspection", "calibration", "cleaning", "other"],
                    "description": "Type of maintenance performed"
                  },
                  "performedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when maintenance was performed"
                  },
                  "performedBy": { "type": "integer", "description": "ID of the user who performed maintenance" },
                  "externalCompany": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Name of external company if maintenance was outsourced"
                  },
                  "description": { "type": "string", "description": "Detailed description of maintenance performed" },
                  "partsReplaced": { "type": "string", "description": "List of parts that were replaced" },
                  "cost": { "type": "number", "format": "float", "minimum": 0, "description": "Cost of maintenance" },
                  "durationHours": {
                    "type": "number",
                    "format": "float",
                    "minimum": 0,
                    "description": "Duration of maintenance in hours"
                  },
                  "statusAfter": {
                    "type": "string",
                    "enum": ["operational", "needs_repair", "decommissioned"],
                    "default": "operational",
                    "description": "Machine status after maintenance"
                  },
                  "nextMaintenanceDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Date of next scheduled maintenance"
                  },
                  "reportUrl": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL to maintenance report document"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Maintenance record created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": { "data": { "$ref": "#/components/schemas/MaintenanceHistoryV2" } }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/api/v2/machines/{id}": {
      "get": {
        "summary": "Get machine by ID",
        "description": "Get detailed information about a specific machine",
        "tags": ["Machines v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "description": "Machine ID", "schema": { "type": "integer" } }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved machine",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/MachineV2" } } }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "put": {
        "summary": "Update machine",
        "description": "Update an existing machine's information (admin only)",
        "tags": ["Machines v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "description": "Machine ID", "schema": { "type": "integer" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "minLength": 1, "maxLength": 100, "description": "Machine name" },
                  "model": { "type": "string", "maxLength": 100, "description": "Machine model" },
                  "manufacturer": { "type": "string", "maxLength": 100, "description": "Machine manufacturer" },
                  "serialNumber": { "type": "string", "maxLength": 100, "description": "Unique serial number" },
                  "assetNumber": { "type": "string", "maxLength": 50, "description": "Internal asset number" },
                  "departmentId": { "type": "integer", "description": "Department ID" },
                  "areaId": { "type": "integer", "description": "Area ID within department" },
                  "location": { "type": "string", "maxLength": 255, "description": "Physical location" },
                  "machineType": {
                    "type": "string",
                    "enum": ["production", "packaging", "quality_control", "logistics", "utility", "other"],
                    "description": "Type of machine"
                  },
                  "status": {
                    "type": "string",
                    "enum": ["operational", "maintenance", "repair", "standby", "decommissioned"],
                    "description": "Current machine status"
                  },
                  "purchaseDate": { "type": "string", "format": "date", "description": "Date of purchase" },
                  "installationDate": { "type": "string", "format": "date", "description": "Date of installation" },
                  "warrantyUntil": { "type": "string", "format": "date", "description": "Warranty expiration date" },
                  "lastMaintenance": { "type": "string", "format": "date", "description": "Date of last maintenance" },
                  "nextMaintenance": {
                    "type": "string",
                    "format": "date",
                    "description": "Date of next scheduled maintenance"
                  },
                  "operatingHours": { "type": "integer", "minimum": 0, "description": "Total operating hours" },
                  "productionCapacity": { "type": "string", "maxLength": 100, "description": "Production capacity" },
                  "energyConsumption": { "type": "string", "maxLength": 100, "description": "Energy consumption" },
                  "manualUrl": { "type": "string", "format": "uri", "description": "URL to machine manual" },
                  "qrCode": { "type": "string", "maxLength": 255, "description": "QR code data" },
                  "notes": { "type": "string", "description": "Additional notes" },
                  "isActive": { "type": "boolean", "description": "Whether the machine is active" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Machine updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/MachineV2" } } }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "delete": {
        "summary": "Delete machine",
        "description": "Soft delete a machine (marks as inactive, admin only)",
        "tags": ["Machines v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "description": "Machine ID", "schema": { "type": "integer" } }
        ],
        "responses": {
          "200": {
            "description": "Machine deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": { "message": { "type": "string", "example": "Machine deleted successfully" } }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/api/v2/machines/{id}/maintenance": {
      "get": {
        "summary": "Get maintenance history",
        "description": "Get all maintenance records for a specific machine",
        "tags": ["Machines v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Machine ID",
            "schema": { "type": "integer" }
          },
          { "$ref": "#/components/parameters/PageParam" },
          { "$ref": "#/components/parameters/LimitParam" }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved maintenance history",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": { "type": "array", "items": { "$ref": "#/components/schemas/MaintenanceHistoryV2" } }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/api/v2/notifications": {
      "get": {
        "summary": "List notifications for the authenticated user",
        "tags": ["Notifications"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": { "type": "string", "enum": ["email", "push", "in_app"] },
            "description": "Filter by notification type"
          },
          {
            "in": "query",
            "name": "priority",
            "schema": { "type": "string", "enum": ["low", "medium", "high"] },
            "description": "Filter by priority"
          },
          {
            "in": "query",
            "name": "unread",
            "schema": { "type": "boolean" },
            "description": "Filter unread notifications only"
          },
          {
            "in": "query",
            "name": "page",
            "schema": { "type": "integer", "default": 1 },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "integer", "default": 20 },
            "description": "Items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of notifications",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotificationListResponse" } } }
          }
        }
      },
      "post": {
        "summary": "Create a new notification (admin only)",
        "tags": ["Notifications"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateNotificationRequest" } } }
        },
        "responses": {
          "201": {
            "description": "Notification created successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotificationResponse" } } }
          },
          "403": { "description": "Forbidden - Admin only" }
        }
      }
    },
    "/api/v2/notifications/{id}/read": {
      "put": {
        "summary": "Mark notification as read",
        "tags": ["Notifications"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Notification ID"
          }
        ],
        "responses": {
          "200": { "description": "Notification marked as read" },
          "404": { "description": "Notification not found" }
        }
      }
    },
    "/api/v2/notifications/mark-all-read": {
      "put": {
        "summary": "Mark all notifications as read",
        "tags": ["Notifications"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "All notifications marked as read",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "updated": { "type": "integer", "description": "Number of notifications marked as read" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/notifications/{id}": {
      "delete": {
        "summary": "Delete notification",
        "tags": ["Notifications"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Notification ID"
          }
        ],
        "responses": {
          "200": { "description": "Notification deleted successfully" },
          "404": { "description": "Notification not found" }
        }
      }
    },
    "/api/v2/notifications/preferences": {
      "get": {
        "summary": "Get notification preferences for authenticated user",
        "tags": ["Notifications"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User notification preferences",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/NotificationPreferencesResponse" } }
            }
          }
        }
      },
      "put": {
        "summary": "Update notification preferences",
        "tags": ["Notifications"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdatePreferencesRequest" } } }
        },
        "responses": { "200": { "description": "Preferences updated successfully" } }
      }
    },
    "/api/v2/notifications/stats": {
      "get": {
        "summary": "Get notification statistics (admin only)",
        "tags": ["Notifications"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Notification statistics",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/NotificationStatsResponse" } }
            }
          },
          "403": { "description": "Forbidden - Admin only" }
        }
      }
    },
    "/api/v2/notifications/stats/me": {
      "get": {
        "summary": "Get personal notification statistics",
        "tags": ["Notifications"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Personal notification statistics",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PersonalStatsResponse" } } }
          }
        }
      }
    },
    "/api/v2/notifications/subscribe": {
      "post": {
        "summary": "Subscribe to push notifications",
        "tags": ["Notifications"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SubscribeRequest" } } }
        },
        "responses": {
          "200": {
            "description": "Successfully subscribed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": { "type": "object", "properties": { "subscriptionId": { "type": "string" } } }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/notifications/subscribe/{id}": {
      "delete": {
        "summary": "Unsubscribe from push notifications",
        "tags": ["Notifications"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" },
            "description": "Subscription ID"
          }
        ],
        "responses": { "200": { "description": "Successfully unsubscribed" } }
      }
    },
    "/api/v2/notifications/templates": {
      "get": {
        "summary": "Get notification templates (admin only)",
        "tags": ["Notifications"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "List of notification templates",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TemplatesResponse" } } }
          },
          "403": { "description": "Forbidden - Admin only" }
        }
      }
    },
    "/api/v2/notifications/from-template": {
      "post": {
        "summary": "Create notification from template (admin only)",
        "tags": ["Notifications"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateFromTemplateRequest" } } }
        },
        "responses": {
          "201": {
            "description": "Notification created from template",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NotificationResponse" } } }
          },
          "403": { "description": "Forbidden - Admin only" },
          "404": { "description": "Template not found" }
        }
      }
    },
    "/api/v2/plans": {
      "get": {
        "summary": "Get all available plans",
        "description": "Retrieve all subscription plans with their features. Public endpoint - no authentication required.",
        "tags": ["Plans"],
        "parameters": [
          {
            "in": "query",
            "name": "includeInactive",
            "schema": { "type": "boolean", "default": false },
            "description": "Include inactive plans in the response"
          }
        ],
        "responses": {
          "200": {
            "description": "List of plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "code": { "type": "string" },
                          "name": { "type": "string" },
                          "description": { "type": "string" },
                          "basePrice": { "type": "number" },
                          "maxEmployees": { "type": "integer" },
                          "maxAdmins": { "type": "integer" },
                          "maxStorageGb": { "type": "integer" },
                          "isActive": { "type": "boolean" },
                          "features": { "type": "array", "items": { "type": "object" } }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "timestamp": { "type": "string", "format": "date-time" },
                        "version": { "type": "string", "example": "2.0" }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": { "description": "Server error" }
        }
      }
    },
    "/api/v2/plans/current": {
      "get": {
        "summary": "Get current tenant plan",
        "description": "Retrieve the current subscription plan for the authenticated tenant including details, features, addons, and costs",
        "tags": ["Plans"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Current plan retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "plan": { "type": "object" },
                        "addons": { "type": "array" },
                        "costs": { "type": "object" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "404": { "description": "No active plan found" }
        }
      }
    },
    "/api/v2/plans/addons": {
      "get": {
        "summary": "Get tenant addons",
        "description": "Retrieve current addons for the authenticated tenant",
        "tags": ["Plans"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Addons retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "employees": { "type": "integer" },
                        "admins": { "type": "integer" },
                        "storageGb": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" }
        }
      },
      "put": {
        "summary": "Update tenant addons",
        "description": "Update addon quantities for the authenticated tenant",
        "tags": ["Plans"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "employees": { "type": "integer", "minimum": 0 },
                  "admins": { "type": "integer", "minimum": 0 },
                  "storageGb": { "type": "integer", "minimum": 0 }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Addons updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "employees": { "type": "integer" },
                        "admins": { "type": "integer" },
                        "storageGb": { "type": "integer" }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": { "message": { "type": "string", "example": "Addons updated successfully" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Admin access required" }
        }
      }
    },
    "/api/v2/plans/costs": {
      "get": {
        "summary": "Calculate tenant costs",
        "description": "Calculate current monthly costs for the authenticated tenant",
        "tags": ["Plans"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Costs calculated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "basePlanCost": { "type": "number" },
                        "addonCosts": {
                          "type": "object",
                          "properties": {
                            "employees": { "type": "number" },
                            "admins": { "type": "number" },
                            "storage": { "type": "number" }
                          }
                        },
                        "totalMonthlyCost": { "type": "number" },
                        "currency": { "type": "string", "example": "EUR" }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/api/v2/plans/{id}": {
      "get": {
        "summary": "Get plan by ID",
        "description": "Retrieve a specific plan by its ID",
        "tags": ["Plans"],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Plan ID" }
        ],
        "responses": {
          "200": {
            "description": "Plan retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "integer" },
                        "code": { "type": "string" },
                        "name": { "type": "string" },
                        "basePrice": { "type": "number" },
                        "features": { "type": "array", "items": { "type": "object" } }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid plan ID" },
          "404": { "description": "Plan not found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/api/v2/plans/{id}/features": {
      "get": {
        "summary": "Get plan features",
        "description": "Retrieve all features included in a specific plan",
        "tags": ["Plans"],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Plan ID" }
        ],
        "responses": {
          "200": {
            "description": "Features retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "planId": { "type": "integer" },
                          "featureId": { "type": "integer" },
                          "featureCode": { "type": "string" },
                          "featureName": { "type": "string" },
                          "isIncluded": { "type": "boolean" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid plan ID" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/api/v2/plans/{id}/upgrade": {
      "put": {
        "summary": "Upgrade or downgrade plan",
        "description": "Change the subscription plan for the authenticated tenant",
        "tags": ["Plans"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Target plan ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["newPlanCode"],
                "properties": {
                  "newPlanCode": { "type": "string", "description": "Code of the new plan" },
                  "effectiveDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When the change should take effect"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plan upgraded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": { "type": "object", "description": "Updated plan information" },
                    "meta": {
                      "type": "object",
                      "properties": { "message": { "type": "string", "example": "Plan changed successfully" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid request or validation error" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Admin access required" },
          "500": { "description": "Server error or upgrade failed" }
        }
      }
    },
    "/api/v2/reports/overview": {
      "get": {
        "summary": "Get company overview report",
        "description": "Get high-level KPIs and metrics for the entire company",
        "tags": ["Reports v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "schema": { "type": "string", "format": "date" },
            "description": "Start date for the report (defaults to 30 days ago)"
          },
          {
            "name": "dateTo",
            "in": "query",
            "schema": { "type": "string", "format": "date" },
            "description": "End date for the report (defaults to today)"
          }
        ],
        "responses": {
          "200": {
            "description": "Overview report retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "employees": {
                              "type": "object",
                              "properties": {
                                "total": { "type": "integer" },
                                "active": { "type": "integer" },
                                "newThisMonth": { "type": "integer" }
                              }
                            },
                            "departments": {
                              "type": "object",
                              "properties": {
                                "total": { "type": "integer" },
                                "avgEmployeesPerDept": { "type": "number" }
                              }
                            },
                            "shifts": {
                              "type": "object",
                              "properties": {
                                "totalScheduled": { "type": "integer" },
                                "overtimeHours": { "type": "number" },
                                "coverageRate": { "type": "number" }
                              }
                            },
                            "kvp": {
                              "type": "object",
                              "properties": {
                                "totalSuggestions": { "type": "integer" },
                                "implemented": { "type": "integer" },
                                "totalSavings": { "type": "number" },
                                "avgROI": { "type": "number" }
                              }
                            },
                            "surveys": {
                              "type": "object",
                              "properties": { "active": { "type": "integer" }, "avgResponseRate": { "type": "number" } }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/reports/employees": {
      "get": {
        "summary": "Get employee analytics report",
        "description": "Get detailed employee metrics and trends",
        "tags": ["Reports v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "dateFrom", "in": "query", "schema": { "type": "string", "format": "date" } },
          { "name": "dateTo", "in": "query", "schema": { "type": "string", "format": "date" } },
          {
            "name": "departmentId",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "Filter by department"
          },
          { "name": "teamId", "in": "query", "schema": { "type": "integer" }, "description": "Filter by team" }
        ],
        "responses": {
          "200": {
            "description": "Employee report retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "headcount": {
                              "type": "object",
                              "properties": {
                                "trend": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": { "date": { "type": "string" }, "count": { "type": "integer" } }
                                  }
                                }
                              }
                            },
                            "attendance": {
                              "type": "object",
                              "properties": { "avgRate": { "type": "number" }, "absences": { "type": "integer" } }
                            },
                            "performance": {
                              "type": "object",
                              "properties": {
                                "kvpParticipation": { "type": "number" },
                                "avgShiftCompletion": { "type": "number" }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/reports/departments": {
      "get": {
        "summary": "Get department analytics report",
        "description": "Get performance metrics by department",
        "tags": ["Reports v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "dateFrom", "in": "query", "schema": { "type": "string", "format": "date" } },
          { "name": "dateTo", "in": "query", "schema": { "type": "string", "format": "date" } }
        ],
        "responses": {
          "200": {
            "description": "Department report retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "departmentId": { "type": "integer" },
                              "departmentName": { "type": "string" },
                              "metrics": {
                                "type": "object",
                                "properties": {
                                  "employees": { "type": "integer" },
                                  "teams": { "type": "integer" },
                                  "kvpSuggestions": { "type": "integer" },
                                  "shiftCoverage": { "type": "number" },
                                  "avgOvertime": { "type": "number" }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/reports/shifts": {
      "get": {
        "summary": "Get shift analytics report",
        "description": "Get detailed shift coverage and overtime analytics",
        "tags": ["Reports v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "dateFrom", "in": "query", "schema": { "type": "string", "format": "date" } },
          { "name": "dateTo", "in": "query", "schema": { "type": "string", "format": "date" } },
          { "name": "departmentId", "in": "query", "schema": { "type": "integer" } },
          { "name": "teamId", "in": "query", "schema": { "type": "integer" } }
        ],
        "responses": {
          "200": {
            "description": "Shift report retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "totalShifts": { "type": "integer" },
                            "coverage": {
                              "type": "object",
                              "properties": {
                                "scheduled": { "type": "integer" },
                                "filled": { "type": "integer" },
                                "rate": { "type": "number" }
                              }
                            },
                            "overtime": {
                              "type": "object",
                              "properties": {
                                "totalHours": { "type": "number" },
                                "totalCost": { "type": "number" },
                                "byDepartment": { "type": "array", "items": { "type": "object" } }
                              }
                            },
                            "patterns": {
                              "type": "object",
                              "properties": {
                                "peakHours": { "type": "array", "items": { "type": "string" } },
                                "understaffedShifts": { "type": "integer" }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/reports/kvp": {
      "get": {
        "summary": "Get KVP ROI report",
        "description": "Get return on investment analysis for KVP suggestions",
        "tags": ["Reports v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "dateFrom", "in": "query", "schema": { "type": "string", "format": "date" } },
          { "name": "dateTo", "in": "query", "schema": { "type": "string", "format": "date" } },
          {
            "name": "categoryId",
            "in": "query",
            "schema": { "type": "integer" },
            "description": "Filter by KVP category"
          }
        ],
        "responses": {
          "200": {
            "description": "KVP report retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "summary": {
                              "type": "object",
                              "properties": {
                                "totalSuggestions": { "type": "integer" },
                                "implemented": { "type": "integer" },
                                "totalCost": { "type": "number" },
                                "totalSavings": { "type": "number" },
                                "roi": { "type": "number" }
                              }
                            },
                            "byCategory": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "categoryId": { "type": "integer" },
                                  "categoryName": { "type": "string" },
                                  "suggestions": { "type": "integer" },
                                  "implemented": { "type": "integer" },
                                  "avgSavings": { "type": "number" }
                                }
                              }
                            },
                            "topPerformers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "userId": { "type": "integer" },
                                  "name": { "type": "string" },
                                  "suggestions": { "type": "integer" },
                                  "totalSavings": { "type": "number" }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/reports/attendance": {
      "get": {
        "summary": "Get attendance report",
        "description": "Get detailed attendance and absence analytics",
        "tags": ["Reports v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "dateFrom", "in": "query", "required": true, "schema": { "type": "string", "format": "date" } },
          { "name": "dateTo", "in": "query", "required": true, "schema": { "type": "string", "format": "date" } },
          { "name": "departmentId", "in": "query", "schema": { "type": "integer" } },
          { "name": "teamId", "in": "query", "schema": { "type": "integer" } }
        ],
        "responses": {
          "200": {
            "description": "Attendance report retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "summary": {
                              "type": "object",
                              "properties": {
                                "avgAttendanceRate": { "type": "number" },
                                "totalAbsences": { "type": "integer" },
                                "totalLateArrivals": { "type": "integer" }
                              }
                            },
                            "byEmployee": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "userId": { "type": "integer" },
                                  "name": { "type": "string" },
                                  "attendanceRate": { "type": "number" },
                                  "absences": { "type": "integer" },
                                  "lateArrivals": { "type": "integer" }
                                }
                              }
                            },
                            "trends": {
                              "type": "object",
                              "properties": {
                                "daily": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": { "date": { "type": "string" }, "rate": { "type": "number" } }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/reports/compliance": {
      "get": {
        "summary": "Get compliance report",
        "description": "Get labor law compliance metrics (working hours, breaks, etc.)",
        "tags": ["Reports v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "dateFrom", "in": "query", "required": true, "schema": { "type": "string", "format": "date" } },
          { "name": "dateTo", "in": "query", "required": true, "schema": { "type": "string", "format": "date" } },
          { "name": "departmentId", "in": "query", "schema": { "type": "integer" } }
        ],
        "responses": {
          "200": {
            "description": "Compliance report retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "violations": {
                              "type": "object",
                              "properties": {
                                "total": { "type": "integer" },
                                "byType": {
                                  "type": "object",
                                  "properties": {
                                    "maxWorkingHours": { "type": "integer" },
                                    "missingBreaks": { "type": "integer" },
                                    "insufficientRest": { "type": "integer" }
                                  }
                                }
                              }
                            },
                            "riskEmployees": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "userId": { "type": "integer" },
                                  "name": { "type": "string" },
                                  "violations": { "type": "integer" },
                                  "issues": { "type": "array", "items": { "type": "string" } }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/reports/custom": {
      "post": {
        "summary": "Generate custom report",
        "description": "Build a custom report with selected metrics and filters",
        "tags": ["Reports v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "metrics", "dateFrom", "dateTo"],
                "properties": {
                  "name": { "type": "string", "minLength": 3, "maxLength": 100 },
                  "description": { "type": "string", "maxLength": 500 },
                  "metrics": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "string",
                      "enum": ["employees", "departments", "shifts", "kvp", "attendance", "compliance"]
                    }
                  },
                  "dateFrom": { "type": "string", "format": "date" },
                  "dateTo": { "type": "string", "format": "date" },
                  "filters": {
                    "type": "object",
                    "properties": {
                      "departmentIds": { "type": "array", "items": { "type": "integer" } },
                      "teamIds": { "type": "array", "items": { "type": "integer" } }
                    }
                  },
                  "groupBy": { "type": "string", "enum": ["department", "team", "week", "month"] }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Custom report generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "reportId": { "type": "string" },
                            "name": { "type": "string" },
                            "generatedAt": { "type": "string", "format": "date-time" },
                            "data": { "type": "object", "description": "Dynamic report data based on selected metrics" }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/reports/export/{type}": {
      "get": {
        "summary": "Export report",
        "description": "Export any report as PDF, Excel or CSV",
        "tags": ["Reports v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["overview", "employees", "departments", "shifts", "kvp", "attendance", "compliance"]
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "enum": ["pdf", "excel", "csv"] }
          },
          { "name": "dateFrom", "in": "query", "schema": { "type": "string", "format": "date" } },
          { "name": "dateTo", "in": "query", "schema": { "type": "string", "format": "date" } },
          { "name": "departmentId", "in": "query", "schema": { "type": "integer" } },
          { "name": "teamId", "in": "query", "schema": { "type": "integer" } }
        ],
        "responses": {
          "200": {
            "description": "Report exported successfully",
            "content": {
              "application/pdf": { "schema": { "type": "string", "format": "binary" } },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": { "type": "string", "format": "binary" }
              },
              "text/csv": { "schema": { "type": "string" } }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/role-switch/to-employee": {
      "post": {
        "summary": "Switch to employee view",
        "description": "Allows admin and root users to switch their view to employee mode",
        "tags": ["Role Switch"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "Successfully switched to employee view" },
          "403": { "description": "Insufficient permissions" }
        }
      }
    },
    "/api/v2/role-switch/to-original": {
      "post": {
        "summary": "Switch back to original role",
        "description": "Switch back from employee view to original role (admin/root)",
        "tags": ["Role Switch"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "Successfully switched back to original role" },
          "403": { "description": "Insufficient permissions" }
        }
      }
    },
    "/api/v2/role-switch/root-to-admin": {
      "post": {
        "summary": "Switch root to admin view",
        "description": "Allows root users to switch their view to admin mode",
        "tags": ["Role Switch"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "Successfully switched to admin view" },
          "403": { "description": "Only root users can use this endpoint" }
        }
      }
    },
    "/api/v2/role-switch/status": {
      "get": {
        "summary": "Get role switch status",
        "description": "Get current role switch status and permissions",
        "tags": ["Role Switch"],
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "Current role switch status" } }
      }
    },
    "/api/v2/roles": {
      "get": {
        "summary": "Get all available roles",
        "description": "Get a list of all available roles in the system",
        "tags": ["Roles v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Roles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string", "enum": ["admin", "employee", "root"] },
                          "name": { "type": "string", "example": "Administrator" },
                          "description": {
                            "type": "string",
                            "example": "Tenant administrator with full access within their tenant"
                          },
                          "level": { "type": "integer", "example": 50 },
                          "permissions": {
                            "type": "array",
                            "items": { "type": "string" },
                            "example": ["users.manage", "departments.manage"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/roles/hierarchy": {
      "get": {
        "summary": "Get role hierarchy",
        "description": "Get the hierarchy of roles showing which roles can manage others",
        "tags": ["Roles v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Role hierarchy retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "hierarchy": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "role": { "$ref": "#/components/schemas/Role" },
                              "canManage": {
                                "type": "array",
                                "items": { "type": "string", "enum": ["admin", "employee", "root"] }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/roles/assignable": {
      "get": {
        "summary": "Get assignable roles",
        "description": "Get roles that the current user can assign to others",
        "tags": ["Roles v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Assignable roles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": { "type": "array", "items": { "$ref": "#/components/schemas/Role" } }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/roles/{id}": {
      "get": {
        "summary": "Get a specific role",
        "description": "Get details of a specific role by ID",
        "tags": ["Roles v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "enum": ["admin", "employee", "root"] },
            "description": "Role ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Role retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "success": { "type": "boolean" }, "data": { "$ref": "#/components/schemas/Role" } }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestV2" },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/roles/check": {
      "post": {
        "summary": "Check user role",
        "description": "Check if a user has a specific role (admin/root only)",
        "tags": ["Roles v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["userId", "requiredRole"],
                "properties": {
                  "userId": { "type": "integer", "description": "User ID to check" },
                  "requiredRole": {
                    "type": "string",
                    "enum": ["admin", "employee", "root"],
                    "description": "Role to check for"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role check completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "hasRole": { "type": "boolean", "description": "Whether user has the exact role" },
                        "userRole": {
                          "type": "string",
                          "enum": ["admin", "employee", "root"],
                          "description": "User's actual role"
                        },
                        "requiredRole": {
                          "type": "string",
                          "enum": ["admin", "employee", "root"],
                          "description": "The role that was checked"
                        },
                        "hasAccess": {
                          "type": "boolean",
                          "description": "Whether user has equal or higher access level"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequestV2" },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/root/admins": {
      "get": {
        "summary": "Get all admin users",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "List of admin users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "admins": { "type": "array", "items": { "$ref": "#/components/schemas/AdminUser" } } }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new admin user",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateAdminRequest" } } }
        },
        "responses": {
          "201": { "description": "Admin created successfully" },
          "409": { "description": "Username or email already exists" }
        }
      }
    },
    "/api/v2/root/admins/{id}": {
      "get": {
        "summary": "Get admin user by ID",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "id", "required": true, "schema": { "type": "integer" } }],
        "responses": { "200": { "description": "Admin user details" }, "404": { "description": "Admin not found" } }
      },
      "put": {
        "summary": "Update admin user",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "id", "required": true, "schema": { "type": "integer" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateAdminRequest" } } }
        },
        "responses": {
          "200": { "description": "Admin updated successfully" },
          "404": { "description": "Admin not found" }
        }
      },
      "delete": {
        "summary": "Delete admin user",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "id", "required": true, "schema": { "type": "integer" } }],
        "responses": {
          "200": { "description": "Admin deleted successfully" },
          "404": { "description": "Admin not found" }
        }
      }
    },
    "/api/v2/root/admins/{id}/logs": {
      "get": {
        "summary": "Get admin activity logs",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" } },
          { "in": "query", "name": "days", "schema": { "type": "integer", "default": 30 } }
        ],
        "responses": { "200": { "description": "List of admin logs" }, "404": { "description": "Admin not found" } }
      }
    },
    "/api/v2/root/tenants": {
      "get": {
        "summary": "Get all tenants (super admin only)",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "List of all tenants" } }
      }
    },
    "/api/v2/root/users": {
      "get": {
        "summary": "Get all root users",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "List of root users" } }
      },
      "post": {
        "summary": "Create new root user",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateRootUserRequest" } } }
        },
        "responses": {
          "201": { "description": "Root user created successfully" },
          "400": { "description": "Email already in use" }
        }
      }
    },
    "/api/v2/root/users/{id}": {
      "get": {
        "summary": "Get root user by ID",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "id", "required": true, "schema": { "type": "integer" } }],
        "responses": { "200": { "description": "Root user details" }, "404": { "description": "Root user not found" } }
      },
      "put": {
        "summary": "Update root user",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "id", "required": true, "schema": { "type": "integer" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateRootUserRequest" } } }
        },
        "responses": {
          "200": { "description": "Root user updated successfully" },
          "404": { "description": "Root user not found" }
        }
      },
      "delete": {
        "summary": "Delete root user",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "id", "required": true, "schema": { "type": "integer" } }],
        "responses": {
          "200": { "description": "Root user deleted successfully" },
          "400": { "description": "Cannot delete yourself or last root user" },
          "404": { "description": "Root user not found" }
        }
      }
    },
    "/api/v2/root/dashboard": {
      "get": {
        "summary": "Get dashboard statistics",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "Dashboard statistics" } }
      }
    },
    "/api/v2/root/storage": {
      "get": {
        "summary": "Get storage information",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "Storage information and usage" },
          "404": { "description": "Tenant not found" }
        }
      }
    },
    "/api/v2/root/tenant/deletion": {
      "post": {
        "summary": "Request tenant deletion",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "type": "object", "properties": { "reason": { "type": "string" } } } }
          }
        },
        "responses": {
          "200": { "description": "Deletion requested successfully" },
          "400": { "description": "Insufficient root users" }
        }
      }
    },
    "/api/v2/root/tenant/deletion-status": {
      "get": {
        "summary": "Get current tenant deletion status",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "Deletion status" },
          "404": { "description": "No active deletion found" }
        }
      }
    },
    "/api/v2/root/tenant/cancel-deletion": {
      "post": {
        "summary": "Cancel tenant deletion",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "Deletion cancelled successfully" },
          "404": { "description": "No active deletion found" }
        }
      }
    },
    "/api/v2/root/deletion-approvals": {
      "get": {
        "summary": "Get all deletion requests",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "List of all deletion requests" } }
      }
    },
    "/api/v2/root/deletion-approvals/pending": {
      "get": {
        "summary": "Get pending deletion approvals",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "List of pending approvals" } }
      }
    },
    "/api/v2/root/deletion-approvals/{queueId}/approve": {
      "post": {
        "summary": "Approve deletion request",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "queueId", "required": true, "schema": { "type": "integer" } }],
        "requestBody": {
          "content": {
            "application/json": { "schema": { "type": "object", "properties": { "comment": { "type": "string" } } } }
          }
        },
        "responses": { "200": { "description": "Deletion approved" } }
      }
    },
    "/api/v2/root/deletion-approvals/{queueId}/reject": {
      "post": {
        "summary": "Reject deletion request",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "queueId", "required": true, "schema": { "type": "integer" } }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "object", "required": ["reason"], "properties": { "reason": { "type": "string" } } }
            }
          }
        },
        "responses": { "200": { "description": "Deletion rejected" }, "400": { "description": "Reason required" } }
      }
    },
    "/api/v2/root/deletion-queue/{queueId}/emergency-stop": {
      "post": {
        "summary": "Emergency stop deletion",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "queueId", "required": true, "schema": { "type": "integer" } }],
        "responses": { "200": { "description": "Emergency stop activated" } }
      }
    },
    "/api/v2/root/tenant/deletion-dry-run": {
      "post": {
        "summary": "Perform deletion dry run",
        "tags": ["Root"],
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "Dry run report" } }
      }
    },
    "/api/v2/settings/system": {
      "get": {
        "summary": "Get all system settings",
        "description": "Retrieve all system settings (admin/root only)",
        "tags": ["Settings v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "enum": ["general", "appearance", "notifications", "security", "workflow", "integration", "other"]
            }
          },
          { "in": "query", "name": "is_public", "schema": { "type": "boolean" } },
          { "in": "query", "name": "search", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Settings retrieved successfully" },
          "403": { "description": "Access denied" }
        }
      },
      "post": {
        "summary": "Create system setting",
        "description": "Create a new system setting (root only)",
        "tags": ["Settings v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["setting_key", "setting_value"],
                "properties": {
                  "setting_key": { "type": "string" },
                  "setting_value": { "type": "any" },
                  "value_type": { "type": "string", "enum": ["string", "number", "boolean", "json"] },
                  "category": { "type": "string" },
                  "description": { "type": "string" },
                  "is_public": { "type": "boolean" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Setting created successfully" },
          "403": { "description": "Access denied" }
        }
      }
    },
    "/api/v2/settings/system/{key}": {
      "get": {
        "summary": "Get single system setting",
        "description": "Retrieve a specific system setting by key",
        "tags": ["Settings v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "key", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "description": "Setting retrieved successfully" },
          "404": { "description": "Setting not found" }
        }
      },
      "put": {
        "summary": "Update system setting",
        "description": "Update an existing system setting (root only)",
        "tags": ["Settings v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "key", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["setting_value"],
                "properties": {
                  "setting_value": { "type": "any" },
                  "value_type": { "type": "string", "enum": ["string", "number", "boolean", "json"] },
                  "category": { "type": "string" },
                  "description": { "type": "string" },
                  "is_public": { "type": "boolean" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Setting updated successfully" },
          "403": { "description": "Access denied" }
        }
      },
      "delete": {
        "summary": "Delete system setting",
        "description": "Delete a system setting (root only)",
        "tags": ["Settings v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "key", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "description": "Setting deleted successfully" },
          "403": { "description": "Access denied" },
          "404": { "description": "Setting not found" }
        }
      }
    },
    "/api/v2/settings/tenant": {
      "get": {
        "summary": "Get all tenant settings",
        "description": "Retrieve all settings for the current tenant",
        "tags": ["Settings v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "enum": ["general", "appearance", "notifications", "security", "workflow", "integration", "other"]
            }
          },
          { "in": "query", "name": "search", "schema": { "type": "string" } }
        ],
        "responses": { "200": { "description": "Settings retrieved successfully" } }
      },
      "post": {
        "summary": "Create tenant setting",
        "description": "Create a new tenant setting (admin/root only)",
        "tags": ["Settings v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["setting_key", "setting_value"],
                "properties": {
                  "setting_key": { "type": "string" },
                  "setting_value": { "type": "any" },
                  "value_type": { "type": "string", "enum": ["string", "number", "boolean", "json"] },
                  "category": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Setting created successfully" },
          "403": { "description": "Access denied" }
        }
      }
    },
    "/api/v2/settings/tenant/{key}": {
      "get": {
        "summary": "Get single tenant setting",
        "description": "Retrieve a specific tenant setting by key",
        "tags": ["Settings v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "key", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "description": "Setting retrieved successfully" },
          "404": { "description": "Setting not found" }
        }
      },
      "put": {
        "summary": "Update tenant setting",
        "description": "Update an existing tenant setting (admin/root only)",
        "tags": ["Settings v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "key", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["setting_value"],
                "properties": {
                  "setting_value": { "type": "any" },
                  "value_type": { "type": "string", "enum": ["string", "number", "boolean", "json"] },
                  "category": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Setting updated successfully" },
          "403": { "description": "Access denied" }
        }
      },
      "delete": {
        "summary": "Delete tenant setting",
        "description": "Delete a tenant setting (admin/root only)",
        "tags": ["Settings v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "key", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "description": "Setting deleted successfully" },
          "403": { "description": "Access denied" },
          "404": { "description": "Setting not found" }
        }
      }
    },
    "/api/v2/settings/user": {
      "get": {
        "summary": "Get all user settings",
        "description": "Retrieve all settings for the current user",
        "tags": ["Settings v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "enum": ["general", "appearance", "notifications", "security", "workflow", "integration", "other"]
            }
          },
          { "in": "query", "name": "search", "schema": { "type": "string" } }
        ],
        "responses": { "200": { "description": "Settings retrieved successfully" } }
      },
      "post": {
        "summary": "Create user setting",
        "description": "Create a new user setting",
        "tags": ["Settings v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["setting_key", "setting_value"],
                "properties": {
                  "setting_key": { "type": "string" },
                  "setting_value": { "type": "any" },
                  "value_type": { "type": "string", "enum": ["string", "number", "boolean", "json"] },
                  "category": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": { "200": { "description": "Setting created successfully" } }
      }
    },
    "/api/v2/settings/user/{key}": {
      "get": {
        "summary": "Get single user setting",
        "description": "Retrieve a specific user setting by key",
        "tags": ["Settings v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "key", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "description": "Setting retrieved successfully" },
          "404": { "description": "Setting not found" }
        }
      },
      "put": {
        "summary": "Update user setting",
        "description": "Update an existing user setting",
        "tags": ["Settings v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "key", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["setting_value"],
                "properties": {
                  "setting_value": { "type": "any" },
                  "value_type": { "type": "string", "enum": ["string", "number", "boolean", "json"] },
                  "category": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": { "200": { "description": "Setting updated successfully" } }
      },
      "delete": {
        "summary": "Delete user setting",
        "description": "Delete a user setting",
        "tags": ["Settings v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "key", "required": true, "schema": { "type": "string" } }],
        "responses": {
          "200": { "description": "Setting deleted successfully" },
          "404": { "description": "Setting not found" }
        }
      }
    },
    "/api/v2/settings/admin/users/{userId}": {
      "get": {
        "summary": "Get another user's settings",
        "description": "Retrieve settings for a specific user (admin/root only)",
        "tags": ["Settings v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "in": "path", "name": "userId", "required": true, "schema": { "type": "integer" } }],
        "responses": {
          "200": { "description": "Settings retrieved successfully" },
          "403": { "description": "Access denied" },
          "404": { "description": "User not found" }
        }
      }
    },
    "/api/v2/settings/categories": {
      "get": {
        "summary": "Get settings categories",
        "description": "Retrieve all available settings categories",
        "tags": ["Settings v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": { "200": { "description": "Categories retrieved successfully" } }
      }
    },
    "/api/v2/settings/bulk": {
      "put": {
        "summary": "Bulk update settings",
        "description": "Update multiple settings at once",
        "tags": ["Settings v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["type", "settings"],
                "properties": {
                  "type": { "type": "string", "enum": ["system", "tenant", "user"] },
                  "settings": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": ["setting_key", "setting_value"],
                      "properties": {
                        "setting_key": { "type": "string" },
                        "setting_value": { "type": "any" },
                        "value_type": { "type": "string", "enum": ["string", "number", "boolean", "json"] },
                        "category": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": { "200": { "description": "Settings updated successfully" } }
      }
    },
    "/api/v2/shifts": {
      "get": {
        "summary": "List shifts",
        "tags": ["Shifts v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "schema": { "type": "string", "format": "date" },
            "description": "Filter by specific date"
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": { "type": "string", "format": "date" },
            "description": "Filter by start date"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": { "type": "string", "format": "date" },
            "description": "Filter by end date"
          },
          { "in": "query", "name": "userId", "schema": { "type": "integer" }, "description": "Filter by user ID" },
          {
            "in": "query",
            "name": "departmentId",
            "schema": { "type": "integer" },
            "description": "Filter by department ID"
          },
          {
            "in": "query",
            "name": "status",
            "schema": { "type": "string", "enum": ["planned", "confirmed", "in_progress", "completed", "cancelled"] },
            "description": "Filter by status"
          },
          {
            "in": "query",
            "name": "type",
            "schema": { "type": "string", "enum": ["regular", "overtime", "standby", "vacation", "sick", "holiday"] },
            "description": "Filter by type"
          },
          { "in": "query", "name": "page", "schema": { "type": "integer", "minimum": 1, "default": 1 } },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100, "default": 20 }
          }
        ],
        "responses": {
          "200": {
            "description": "Shifts retrieved successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ShiftListResponseV2" } } }
          }
        }
      },
      "post": {
        "summary": "Create new shift",
        "tags": ["Shifts v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateShiftRequestV2" } } }
        },
        "responses": {
          "201": {
            "description": "Shift created successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ShiftResponseV2" } } }
          }
        }
      }
    },
    "/api/v2/shifts/templates": {
      "get": {
        "summary": "List shift templates",
        "tags": ["Shifts v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Templates retrieved successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TemplateListResponseV2" } } }
          }
        }
      },
      "post": {
        "summary": "Create shift template",
        "tags": ["Shifts v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateTemplateRequestV2" } } }
        },
        "responses": {
          "201": {
            "description": "Template created successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TemplateResponseV2" } } }
          }
        }
      }
    },
    "/api/v2/shifts/templates/{id}": {
      "get": {
        "summary": "Get template by ID",
        "tags": ["Shifts v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Template ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Template retrieved successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TemplateResponseV2" } } }
          },
          "404": { "description": "Template not found" }
        }
      },
      "put": {
        "summary": "Update shift template",
        "tags": ["Shifts v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Template ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateTemplateRequestV2" } } }
        },
        "responses": {
          "200": {
            "description": "Template updated successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TemplateResponseV2" } } }
          },
          "404": { "description": "Template not found" }
        }
      },
      "delete": {
        "summary": "Delete shift template",
        "tags": ["Shifts v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Template ID"
          }
        ],
        "responses": {
          "200": { "description": "Template deleted successfully" },
          "404": { "description": "Template not found" }
        }
      }
    },
    "/api/v2/shifts/swap-requests": {
      "get": {
        "summary": "List swap requests",
        "tags": ["Shifts v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "query", "name": "userId", "schema": { "type": "integer" }, "description": "Filter by user ID" },
          {
            "in": "query",
            "name": "status",
            "schema": { "type": "string", "enum": ["pending", "approved", "rejected", "cancelled"] },
            "description": "Filter by status"
          }
        ],
        "responses": {
          "200": {
            "description": "Swap requests retrieved successfully",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/SwapRequestListResponseV2" } }
            }
          }
        }
      },
      "post": {
        "summary": "Create swap request",
        "tags": ["Shifts v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateSwapRequestV2" } } }
        },
        "responses": {
          "201": {
            "description": "Swap request created successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SwapRequestResponseV2" } } }
          },
          "403": { "description": "You can only request swaps for your own shifts" },
          "404": { "description": "Shift not found" }
        }
      }
    },
    "/api/v2/shifts/swap-requests/{id}/status": {
      "put": {
        "summary": "Update swap request status",
        "tags": ["Shifts v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Swap request ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["status"],
                "properties": { "status": { "type": "string", "enum": ["approved", "rejected", "cancelled"] } }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Status updated successfully" },
          "404": { "description": "Swap request not found" }
        }
      }
    },
    "/api/v2/shifts/overtime": {
      "get": {
        "summary": "Get overtime report",
        "tags": ["Shifts v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "userId",
            "schema": { "type": "integer" },
            "description": "User ID (defaults to current user)"
          },
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "description": "Start date for report"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "description": "End date for report"
          }
        ],
        "responses": {
          "200": {
            "description": "Overtime report retrieved successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OvertimeReportResponseV2" } } }
          },
          "400": { "description": "Invalid date range" }
        }
      }
    },
    "/api/v2/shifts/export": {
      "get": {
        "summary": "Export shifts",
        "tags": ["Shifts v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "description": "Start date for export"
          },
          {
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "description": "End date for export"
          },
          {
            "in": "query",
            "name": "departmentId",
            "schema": { "type": "integer" },
            "description": "Filter by department ID"
          },
          { "in": "query", "name": "teamId", "schema": { "type": "integer" }, "description": "Filter by team ID" },
          { "in": "query", "name": "userId", "schema": { "type": "integer" }, "description": "Filter by user ID" },
          {
            "in": "query",
            "name": "format",
            "schema": { "type": "string", "enum": ["csv", "excel"], "default": "csv" },
            "description": "Export format"
          }
        ],
        "responses": {
          "200": {
            "description": "Export generated successfully",
            "content": { "text/csv": { "schema": { "type": "string" } } }
          },
          "501": { "description": "Excel export not yet implemented" }
        }
      }
    },
    "/api/v2/shifts/{id}": {
      "get": {
        "summary": "Get shift by ID",
        "tags": ["Shifts v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Shift ID" }
        ],
        "responses": {
          "200": {
            "description": "Shift retrieved successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ShiftResponseV2" } } }
          },
          "404": { "description": "Shift not found" }
        }
      },
      "put": {
        "summary": "Update shift",
        "tags": ["Shifts v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Shift ID" }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateShiftRequestV2" } } }
        },
        "responses": {
          "200": {
            "description": "Shift updated successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ShiftResponseV2" } } }
          },
          "404": { "description": "Shift not found" }
        }
      },
      "delete": {
        "summary": "Delete shift",
        "tags": ["Shifts v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Shift ID" }
        ],
        "responses": {
          "200": { "description": "Shift deleted successfully" },
          "404": { "description": "Shift not found" }
        }
      }
    },
    "/api/v2/signup": {
      "post": {
        "summary": "Register a new tenant",
        "description": "Register a new company with an admin user account",
        "tags": ["Signup v2"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "companyName",
                  "subdomain",
                  "email",
                  "phone",
                  "adminEmail",
                  "adminPassword",
                  "adminFirstName",
                  "adminLastName"
                ],
                "properties": {
                  "companyName": { "type": "string", "description": "Company name", "example": "Acme Corporation" },
                  "subdomain": {
                    "type": "string",
                    "description": "Unique subdomain for the tenant",
                    "pattern": "^[a-z0-9-]+$",
                    "example": "acme-corp"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Company contact email",
                    "example": "contact@acme.com"
                  },
                  "phone": {
                    "type": "string",
                    "description": "Phone number with country code",
                    "pattern": "^\\+[0-9]{7,29}$",
                    "example": 491234567890
                  },
                  "address": { "type": "string", "description": "Company address", "maxLength": 500 },
                  "adminEmail": {
                    "type": "string",
                    "format": "email",
                    "description": "Admin user email",
                    "example": "admin@acme.com"
                  },
                  "adminPassword": {
                    "type": "string",
                    "format": "password",
                    "description": "Admin user password",
                    "minLength": 8
                  },
                  "adminFirstName": { "type": "string", "description": "Admin user first name", "maxLength": 100 },
                  "adminLastName": { "type": "string", "description": "Admin user last name", "maxLength": 100 },
                  "selectedPlan": {
                    "type": "string",
                    "enum": ["basic", "professional", "enterprise"],
                    "description": "Selected subscription plan",
                    "default": "basic"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registration successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tenantId": { "type": "integer", "example": 123 },
                        "userId": { "type": "integer", "example": 456 },
                        "subdomain": { "type": "string", "example": "acme-corp" },
                        "trialEndsAt": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2025-08-17T00:00:00.000Z"
                        },
                        "message": { "type": "string", "example": "Registration successful! You can now log in." }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponseV2" } } }
          },
          "409": {
            "description": "Conflict - subdomain already taken",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponseV2" } } }
          },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/signup/check-subdomain/{subdomain}": {
      "get": {
        "summary": "Check subdomain availability",
        "description": "Check if a subdomain is available for registration",
        "tags": ["Signup v2"],
        "parameters": [
          {
            "in": "path",
            "name": "subdomain",
            "required": true,
            "schema": { "type": "string", "pattern": "^[a-z0-9-]+$" },
            "description": "Subdomain to check",
            "example": "acme-corp"
          }
        ],
        "responses": {
          "200": {
            "description": "Subdomain availability check result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "data": {
                      "type": "object",
                      "properties": {
                        "available": {
                          "type": "boolean",
                          "description": "Whether the subdomain is available",
                          "example": true
                        },
                        "subdomain": {
                          "type": "string",
                          "description": "The subdomain that was checked",
                          "example": "acme-corp"
                        },
                        "error": { "type": "string", "description": "Error message if subdomain is invalid" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid subdomain format",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponseV2" } } }
          },
          "500": { "$ref": "#/components/responses/InternalServerErrorV2" }
        }
      }
    },
    "/api/v2/surveys": {
      "get": {
        "summary": "List surveys based on user role and permissions",
        "description": "Returns surveys based on user role:\n- Root: All surveys\n- Admin: Surveys in their departments\n- Employee: Assigned surveys only\n",
        "tags": ["Surveys v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": { "type": "string", "enum": ["draft", "active", "closed"] },
            "description": "Filter by survey status"
          },
          {
            "in": "query",
            "name": "page",
            "schema": { "type": "integer", "minimum": 1, "default": 1 },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100, "default": 20 },
            "description": "Items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Surveys retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiPaginatedResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": { "type": "array", "items": { "$ref": "#/components/schemas/SurveyListItemV2" } }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "post": {
        "summary": "Create a new survey",
        "description": "Create a new survey with questions and assignments (admin/root only)",
        "tags": ["Surveys v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SurveyCreateRequest" } } }
        },
        "responses": {
          "201": {
            "description": "Survey created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/SurveyV2" } } }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" }
        }
      }
    },
    "/api/v2/surveys/templates": {
      "get": {
        "summary": "Get available survey templates",
        "description": "Retrieve all available survey templates for the tenant",
        "tags": ["Surveys v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Templates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": { "type": "array", "items": { "$ref": "#/components/schemas/SurveyTemplateV2" } }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/surveys/templates/{templateId}": {
      "post": {
        "summary": "Create survey from template",
        "description": "Create a new survey based on an existing template",
        "tags": ["Surveys v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "templateId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Template ID"
          }
        ],
        "responses": {
          "201": {
            "description": "Survey created successfully from template",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/SurveyV2" } } }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "404": {
            "description": "Template not found",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } }
          }
        }
      }
    },
    "/api/v2/surveys/{id}": {
      "get": {
        "summary": "Get survey by ID",
        "description": "Retrieve a specific survey with all questions and assignments",
        "tags": ["Surveys v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Survey ID" }
        ],
        "responses": {
          "200": {
            "description": "Survey retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/SurveyV2" } } }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "put": {
        "summary": "Update a survey",
        "description": "Update an existing survey (admin/root only, cannot update if responses exist)",
        "tags": ["Surveys v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Survey ID" }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SurveyUpdateRequest" } } }
        },
        "responses": {
          "200": {
            "description": "Survey updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/SurveyV2" } } }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "404": { "$ref": "#/components/responses/NotFoundError" },
          "409": {
            "description": "Cannot update survey with existing responses",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } }
          }
        }
      },
      "delete": {
        "summary": "Delete a survey",
        "description": "Delete a survey (admin/root only, cannot delete if responses exist)",
        "tags": ["Surveys v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Survey ID" }
        ],
        "responses": {
          "200": {
            "description": "Survey deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": { "type": null },
                        "message": { "type": "string", "example": "Survey deleted successfully" }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "404": { "$ref": "#/components/responses/NotFoundError" },
          "409": {
            "description": "Cannot delete survey with existing responses",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } }
          }
        }
      }
    },
    "/api/v2/surveys/{id}/statistics": {
      "get": {
        "summary": "Get survey statistics and response analytics",
        "description": "Get detailed statistics and analytics for survey responses (admin/root only)",
        "tags": ["Surveys v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Survey ID" }
        ],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": { "data": { "$ref": "#/components/schemas/SurveyStatisticsV2" } }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/api/v2/teams": {
      "get": {
        "summary": "List all teams",
        "tags": ["Teams v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "departmentId",
            "schema": { "type": "integer" },
            "description": "Filter by department ID"
          },
          {
            "in": "query",
            "name": "search",
            "schema": { "type": "string" },
            "description": "Search teams by name or description"
          },
          {
            "in": "query",
            "name": "includeMembers",
            "schema": { "type": "boolean" },
            "description": "Include member count in response"
          }
        ],
        "responses": {
          "200": {
            "description": "List of teams",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TeamsListResponseV2" } } }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedV2" }
        }
      },
      "post": {
        "summary": "Create new team",
        "tags": ["Teams v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateTeamRequestV2" } } }
        },
        "responses": {
          "201": {
            "description": "Team created successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TeamResponseV2" } } }
          },
          "400": { "$ref": "#/components/responses/BadRequestV2" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" }
        }
      }
    },
    "/api/v2/teams/{id}": {
      "get": {
        "summary": "Get team by ID",
        "tags": ["Teams v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Team ID" }
        ],
        "responses": {
          "200": {
            "description": "Team details",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TeamResponseV2" } } }
          },
          "404": { "$ref": "#/components/responses/NotFoundV2" }
        }
      },
      "put": {
        "summary": "Update team",
        "tags": ["Teams v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Team ID" }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateTeamRequestV2" } } }
        },
        "responses": {
          "200": {
            "description": "Team updated successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TeamResponseV2" } } }
          },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" }
        }
      },
      "delete": {
        "summary": "Delete team",
        "tags": ["Teams v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Team ID" }
        ],
        "responses": {
          "200": {
            "description": "Team deleted successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessMessageResponseV2" } } }
          },
          "400": { "description": "Cannot delete team with members" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" }
        }
      }
    },
    "/api/v2/teams/{id}/members": {
      "get": {
        "summary": "Get team members",
        "tags": ["Teams v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Team ID" }
        ],
        "responses": {
          "200": {
            "description": "List of team members",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TeamMembersResponseV2" } } }
          },
          "404": { "$ref": "#/components/responses/NotFoundV2" }
        }
      },
      "post": {
        "summary": "Add member to team",
        "tags": ["Teams v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Team ID" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["userId"],
                "properties": { "userId": { "type": "integer", "description": "User ID to add to team" } }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Member added successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessMessageResponseV2" } } }
          },
          "400": { "description": "Invalid user ID or user already in team" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" }
        }
      }
    },
    "/api/v2/teams/{id}/members/{userId}": {
      "delete": {
        "summary": "Remove member from team",
        "tags": ["Teams v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Team ID" },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "User ID to remove"
          }
        ],
        "responses": {
          "200": {
            "description": "Member removed successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessMessageResponseV2" } } }
          },
          "400": { "description": "User is not a member of this team" },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" }
        }
      }
    },
    "/api/v2/teams/{id}/machines": {
      "get": {
        "summary": "Get team machines",
        "tags": ["Teams v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Team ID" }
        ],
        "responses": {
          "200": {
            "description": "Team machines retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "integer" },
                      "name": { "type": "string" },
                      "serial_number": { "type": "string" },
                      "status": { "type": "string" },
                      "is_primary": { "type": "boolean" },
                      "assigned_at": { "type": "string", "format": "date-time" }
                    }
                  }
                }
              }
            }
          },
          "404": { "$ref": "#/components/responses/NotFoundV2" }
        }
      },
      "post": {
        "summary": "Add machine to team",
        "tags": ["Teams v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Team ID" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["machineId"],
                "properties": { "machineId": { "type": "integer", "description": "Machine ID to add to team" } }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Machine added to team successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessMessageResponseV2" } } }
          },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" },
          "409": { "description": "Machine already assigned to this team" }
        }
      }
    },
    "/api/v2/teams/{id}/machines/{machineId}": {
      "delete": {
        "summary": "Remove machine from team",
        "tags": ["Teams v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "path", "name": "id", "required": true, "schema": { "type": "integer" }, "description": "Team ID" },
          {
            "in": "path",
            "name": "machineId",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Machine ID to remove"
          }
        ],
        "responses": {
          "200": {
            "description": "Machine removed successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SuccessMessageResponseV2" } } }
          },
          "403": { "$ref": "#/components/responses/ForbiddenV2" },
          "404": { "$ref": "#/components/responses/NotFoundV2" }
        }
      }
    },
    "/api/v2/users": {
      "get": {
        "summary": "List all users",
        "description": "Get a paginated list of users with optional filters (admin only)",
        "tags": ["Users v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/PageParam" },
          { "$ref": "#/components/parameters/LimitParam" },
          { "$ref": "#/components/parameters/SearchParam" },
          {
            "name": "role",
            "in": "query",
            "description": "Filter by user role",
            "schema": { "type": "string", "enum": ["employee", "admin", "root"] }
          },
          {
            "name": "isActive",
            "in": "query",
            "description": "Filter by active status",
            "schema": { "type": "boolean" }
          },
          {
            "name": "isArchived",
            "in": "query",
            "description": "Filter by archived status",
            "schema": { "type": "boolean" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "enum": ["created_at", "updated_at", "last_name", "email"],
              "default": "created_at"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order",
            "schema": { "type": "string", "enum": ["asc", "desc"], "default": "desc" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved users list",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": { "data": { "type": "array", "items": { "$ref": "#/components/schemas/UserV2" } } }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" }
        }
      },
      "post": {
        "summary": "Create new user",
        "description": "Create a new user account (admin only)",
        "tags": ["Users v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password", "firstName", "lastName", "role"],
                "properties": {
                  "email": { "type": "string", "format": "email", "example": "newuser@example.com" },
                  "password": { "type": "string", "format": "password", "minLength": 8, "example": "SecurePass123!" },
                  "firstName": { "type": "string", "minLength": 2, "maxLength": 50, "example": "John" },
                  "lastName": { "type": "string", "minLength": 2, "maxLength": 50, "example": "Doe" },
                  "role": { "type": "string", "enum": ["employee", "admin"], "example": "employee" },
                  "employeeNumber": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "EMP001",
                    "description": "Optional employee number (auto-generated if not provided)"
                  },
                  "phone": { "type": "string", "maxLength": 20, "example": 1234567890 },
                  "position": { "type": "string", "maxLength": 100, "example": "Software Developer" },
                  "departmentId": { "type": "integer", "example": 1 },
                  "teamId": { "type": "integer", "example": 1 },
                  "address": { "type": "string", "maxLength": 255, "example": "123 Main St, City" },
                  "emergencyContact": { "type": "string", "maxLength": 100, "example": "Jane Doe" },
                  "emergencyPhone": { "type": "string", "maxLength": 20, "example": 987654321 }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/UserV2" } } }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "409": {
            "description": "Email already exists",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } }
          }
        }
      }
    },
    "/api/v2/users/me": {
      "get": {
        "summary": "Get current user",
        "description": "Get the profile of the currently authenticated user",
        "tags": ["Users v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Successfully retrieved user profile",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/UserV2" } } }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/users/{id}": {
      "get": {
        "summary": "Get user by ID",
        "description": "Get a specific user by their ID (admin only)",
        "tags": ["Users v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "description": "User ID", "schema": { "type": "integer" } }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/UserV2" } } }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "put": {
        "summary": "Update user",
        "description": "Update user information (admin only)",
        "tags": ["Users v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "description": "User ID", "schema": { "type": "integer" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "format": "email" },
                  "firstName": { "type": "string" },
                  "lastName": { "type": "string" },
                  "role": { "type": "string", "enum": ["employee", "admin"] },
                  "phone": { "type": "string" },
                  "position": { "type": "string" },
                  "departmentId": { "type": "integer" },
                  "teamId": { "type": "integer" },
                  "address": { "type": "string" },
                  "emergencyContact": { "type": "string" },
                  "emergencyPhone": { "type": "string" },
                  "isActive": { "type": "boolean" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/UserV2" } } }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      },
      "delete": {
        "summary": "Delete user",
        "description": "Permanently delete a user (admin only)",
        "tags": ["Users v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "description": "User ID", "schema": { "type": "integer" } }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": { "type": null },
                        "message": { "type": "string", "example": "User deleted successfully" }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Cannot delete your own account",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/api/v2/users/me/profile": {
      "put": {
        "summary": "Update profile",
        "description": "Update current user's profile (limited fields)",
        "tags": ["Users v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": { "type": "string", "minLength": 2, "maxLength": 50 },
                  "lastName": { "type": "string", "minLength": 2, "maxLength": 50 },
                  "phone": { "type": "string", "maxLength": 20 },
                  "address": { "type": "string", "maxLength": 255 },
                  "emergencyContact": { "type": "string", "maxLength": 100 },
                  "emergencyPhone": { "type": "string", "maxLength": 20 }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/UserV2" } } }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/api/v2/users/me/password": {
      "put": {
        "summary": "Change password",
        "description": "Change current user's password",
        "tags": ["Users v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["currentPassword", "newPassword"],
                "properties": {
                  "currentPassword": { "type": "string", "format": "password", "description": "Current password" },
                  "newPassword": {
                    "type": "string",
                    "format": "password",
                    "minLength": 8,
                    "description": "New password (min 8 chars, must contain uppercase, lowercase, number and special char)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": { "type": null },
                        "message": { "type": "string", "example": "Password changed successfully" }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": {
            "description": "Invalid current password",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } }
          }
        }
      }
    },
    "/api/v2/users/{id}/archive": {
      "post": {
        "summary": "Archive user",
        "description": "Archive a user account (admin only)",
        "tags": ["Users v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "description": "User ID", "schema": { "type": "integer" } }
        ],
        "responses": {
          "200": {
            "description": "User archived successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": { "type": null },
                        "message": { "type": "string", "example": "User archived successfully" }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/api/v2/users/{id}/unarchive": {
      "post": {
        "summary": "Unarchive user",
        "description": "Unarchive a user account (admin only)",
        "tags": ["Users v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "description": "User ID", "schema": { "type": "integer" } }
        ],
        "responses": {
          "200": {
            "description": "User unarchived successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": { "type": null },
                        "message": { "type": "string", "example": "User unarchived successfully" }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    },
    "/api/v2/users/me/profile-picture": {
      "get": {
        "summary": "Get profile picture",
        "description": "Get the current user's profile picture",
        "tags": ["Users v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Profile picture file",
            "content": {
              "image/jpeg": { "schema": { "type": "string", "format": "binary" } },
              "image/png": { "schema": { "type": "string", "format": "binary" } }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": {
            "description": "Profile picture not found",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } }
          }
        }
      },
      "post": {
        "summary": "Upload profile picture",
        "description": "Upload a new profile picture for the current user",
        "tags": ["Users v2"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["profilePicture"],
                "properties": {
                  "profilePicture": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file (JPEG, PNG, max 5MB)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile picture uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/UserV2" } } }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid file or file too large",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "delete": {
        "summary": "Delete profile picture",
        "description": "Delete the current user's profile picture",
        "tags": ["Users v2"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Profile picture deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": { "type": null },
                        "message": { "type": "string", "example": "Profile picture deleted successfully" }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "404": {
            "description": "No profile picture to delete",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiErrorResponse" } } }
          }
        }
      }
    },
    "/api/v2/users/{id}/availability": {
      "put": {
        "summary": "Update availability",
        "description": "Update user's availability status (admin only)",
        "tags": ["Users v2"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "description": "User ID", "schema": { "type": "integer" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["availabilityStatus"],
                "properties": {
                  "availabilityStatus": {
                    "type": "string",
                    "enum": ["available", "vacation", "sick", "training", "business_trip"],
                    "description": "Current availability status",
                    "example": "vacation"
                  },
                  "availabilityStart": {
                    "type": "string",
                    "format": "date",
                    "description": "Start date of unavailability",
                    "example": "2025-08-01"
                  },
                  "availabilityEnd": {
                    "type": "string",
                    "format": "date",
                    "description": "End date of unavailability",
                    "example": "2025-08-15"
                  },
                  "availabilityNotes": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Additional notes about availability",
                    "example": "Summer vacation"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Availability updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiSuccessResponse" },
                    { "type": "object", "properties": { "data": { "$ref": "#/components/schemas/UserV2" } } }
                  ]
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ValidationError" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" },
          "403": { "$ref": "#/components/responses/ForbiddenError" },
          "404": { "$ref": "#/components/responses/NotFoundError" }
        }
      }
    }
  }
}
