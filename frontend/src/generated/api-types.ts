/* eslint-disable */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/admin/employees': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all employees
     * @description Retrieve a list of all employees within the admin's tenant
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number for pagination */
          page?: number;
          /** @description Number of items per page */
          limit?: number;
          /** @description Search term for filtering employees by name or email */
          search?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of employees retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['User'][];
          };
        };
        /** @description Unauthorized - Invalid or missing token */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - User is not an admin */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /**
     * Create a new employee
     * @description Create a new employee account within the admin's tenant
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * @description Unique username for the employee
             * @example john.doe
             */
            username: string;
            /**
             * Format: email
             * @description Employee email address
             * @example john.doe@company.com
             */
            email: string;
            /**
             * Format: password
             * @description Initial password for the employee
             * @example SecurePass123!
             */
            password: string;
            /**
             * @description Employee first name
             * @example John
             */
            first_name?: string;
            /**
             * @description Employee last name
             * @example Doe
             */
            last_name?: string;
            /**
             * @description Employee phone number
             * @example +49 123 456789
             */
            phone?: string;
            /**
             * @description Department ID to assign the employee to
             * @example 1
             */
            department_id?: number;
            /**
             * @description Job position/title
             * @example Software Developer
             */
            position?: string;
          };
        };
      };
      responses: {
        /** @description Employee created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Mitarbeiter erfolgreich erstellt */
              message?: string;
              /**
               * @description ID of the newly created employee
               * @example 123
               */
              employeeId?: number;
            };
          };
        };
        /** @description Bad request - validation error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized - Invalid or missing token */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - User is not an admin */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Conflict - Username or email already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Ein Mitarbeiter mit diesem Benutzernamen oder dieser E-Mail existiert bereits. */
              message?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/admin/employees/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get single employee
     * @description Retrieve detailed information about a specific employee
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Employee ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Employee information retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['User'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - User is not an admin */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Employee not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Mitarbeiter nicht gefunden */
              message?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /**
     * Update employee information
     * @description Update an existing employee's information (Admin only)
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Employee ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * Format: email
             * @description Updated email address
             */
            email?: string;
            /** @description Updated first name */
            first_name?: string;
            /** @description Updated last name */
            last_name?: string;
            /** @description Updated phone number */
            phone?: string;
            /** @description Updated department ID */
            department_id?: number;
            /** @description Updated job position */
            position?: string;
            /** @description Active status */
            is_active?: boolean;
          };
        };
      };
      responses: {
        /** @description Employee updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Mitarbeiter erfolgreich aktualisiert */
              message?: string;
              /** @example true */
              success?: boolean;
            };
          };
        };
        /** @description Bad request - validation error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - Cannot change employee role or not an admin */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Die Rolle eines Mitarbeiters kann nicht ge√§ndert werden */
              message?: string;
            };
          };
        };
        /** @description Employee not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Mitarbeiter nicht gefunden */
              message?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/admin/upload-document/{employeeId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload document for employee
     * @description Upload a PDF document for a specific employee (Admin only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Employee ID to upload document for */
          employeeId: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'multipart/form-data': {
            /**
             * Format: binary
             * @description PDF file to upload (max 3MB)
             */
            document: string;
            /** @description Document title */
            title?: string;
            /** @description Document description */
            description?: string;
            /** @description Year (for payroll documents) */
            year?: string;
            /** @description Month (for payroll documents) */
            month?: string;
          };
        };
      };
      responses: {
        /** @description Document uploaded successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Dokument erfolgreich hochgeladen */
              message?: string;
              /** @description ID of the uploaded document */
              documentId?: number;
            };
          };
        };
        /** @description Bad request - No file uploaded */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Keine Datei hochgeladen */
              message?: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - User is not an admin */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Employee not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Mitarbeiter nicht gefunden */
              message?: string;
            };
          };
        };
        /** @description File too large */
        413: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Nur PDF-Dateien sind erlaubt! */
              error?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/admin/dashboard-stats': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get admin dashboard statistics
     * @description Retrieve statistics for the admin dashboard including employee, department, team, and document counts
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Dashboard statistics retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /**
               * @description Total number of employees in the tenant
               * @example 42
               */
              employeeCount?: number;
              /**
               * @description Total number of departments in the tenant
               * @example 5
               */
              departmentCount?: number;
              /**
               * @description Total number of teams in the tenant
               * @example 12
               */
              teamCount?: number;
              /**
               * @description Total number of documents in the tenant
               * @example 156
               */
              documentCount?: number;
              /**
               * @description Username of the current admin
               * @example admin123
               */
              adminName?: string;
            };
          };
        };
        /** @description Unauthorized - Invalid or missing token */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - User is not an admin */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/validate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Validate current JWT token
     * @description Validates the current JWT token and returns user information if valid
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Token is valid */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
              /** @example true */
              valid?: boolean;
              user?: {
                id?: number;
                username?: string;
                /** @enum {string} */
                role?: 'root' | 'admin' | 'employee';
                tenant_id?: number;
              };
            };
          };
        };
        /** @description Token is invalid or expired */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Login user
     * @description Authenticate user with username, password and optional browser fingerprint
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * @description Username for authentication
             * @example admin
             */
            username: string;
            /**
             * Format: password
             * @description User password
             * @example SecurePass123!
             */
            password: string;
            /**
             * @description Browser fingerprint for session isolation
             * @example abc123def456
             */
            fingerprint?: string;
          };
        };
      };
      responses: {
        /** @description Login successful */
        200: {
          headers: {
            'Set-Cookie'?: string;
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Login erfolgreich */
              message?: string;
              /** @description JWT token (also set as httpOnly cookie) */
              token?: string;
              /** @enum {string} */
              role?: 'root' | 'admin' | 'employee';
              user?: {
                id?: number;
                username?: string;
                email?: string;
                role?: string;
                tenant_id?: number;
              };
            };
          };
        };
        /** @description Bad request - missing credentials */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Invalid credentials */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Register new user
     * @description Create a new user account with optional tenant assignment
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * @description Unique username
             * @example johndoe
             */
            username: string;
            /**
             * Format: email
             * @description Email address
             * @example john.doe@example.com
             */
            email: string;
            /**
             * Format: password
             * @description Strong password
             * @example SecurePass123!
             */
            password: string;
            /**
             * @description First name
             * @example John
             */
            first_name?: string;
            /**
             * @description Last name
             * @example Doe
             */
            last_name?: string;
            /**
             * @description User role (cannot register as root)
             * @example employee
             * @enum {string}
             */
            role?: 'admin' | 'employee';
            /**
             * @description Tenant ID for multi-tenant assignment
             * @example 1
             */
            tenant_id?: number;
          };
        };
      };
      responses: {
        /** @description Registration successful */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Registration successful */
              message?: string;
              user?: components['schemas']['User'];
            };
          };
        };
        /** @description Bad request - validation error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Logout user
     * @description Logout the current user and clear authentication token
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Logout successful */
        200: {
          headers: {
            'Set-Cookie'?: string;
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Logout successful */
              message?: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/blackboard': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all blackboard entries
     * @description Retrieve all blackboard entries visible to the user with pagination and filtering
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter by entry status */
          status?: 'active' | 'archived';
          /** @description Filter by visibility scope */
          filter?: 'all' | 'company' | 'department' | 'team' | 'personal';
          /** @description Search in title and content */
          search?: string;
          /** @description Page number */
          page?: number;
          /** @description Items per page */
          limit?: number;
          /** @description Sort by field */
          sortBy?: 'created_at' | 'updated_at' | 'title' | 'priority';
          /** @description Sort direction */
          sortDir?: 'ASC' | 'DESC';
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Blackboard entries retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              entries?: components['schemas']['BlackboardEntry'][];
              pagination?: {
                currentPage?: number;
                totalPages?: number;
                totalItems?: number;
                itemsPerPage?: number;
                hasNext?: boolean;
                hasPrev?: boolean;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /**
     * Create blackboard entry
     * @description Create a new blackboard entry with optional file attachment
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'multipart/form-data': {
            /**
             * @description Entry title
             * @example Wichtige Ank√ºndigung
             */
            title: string;
            /**
             * @description Entry content (supports Markdown)
             * @example Dies ist eine wichtige Mitteilung f√ºr alle Mitarbeiter.
             */
            content: string;
            /**
             * @description Organizational level
             * @enum {string}
             */
            org_level: 'company' | 'department' | 'team';
            /** @description Department/Team ID (not needed for company level) */
            org_id?: number;
            /**
             * @description Entry priority
             * @default normal
             * @enum {string}
             */
            priority?: 'low' | 'normal' | 'high' | 'urgent';
            /**
             * @description Display color
             * @default blue
             * @enum {string}
             */
            color?: 'blue' | 'green' | 'yellow' | 'red' | 'purple';
            /**
             * Format: date-time
             * @description Expiration date (optional)
             */
            expires_at?: string;
            /** @description Tags for categorization */
            tags?: string[];
            /**
             * @description Whether users must confirm reading
             * @default false
             */
            requires_confirmation?: boolean;
            /**
             * Format: binary
             * @description Optional file attachment (PDF, JPEG, PNG, GIF - max 10MB)
             */
            attachment?: string;
          };
        };
      };
      responses: {
        /** @description Entry created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Blackboard entry created successfully */
              message?: string;
              entry?: components['schemas']['BlackboardEntry'];
            };
          };
        };
        /** @description Bad request - validation error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              message?: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - No permission for this org level */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example You do not have permission to create entries at this level */
              message?: string;
            };
          };
        };
        /** @description File too large */
        413: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Nur PDF und Bilder (JPEG, PNG, GIF) sind erlaubt! */
              error?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/calendar': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all calendar events
     * @description Retrieve all calendar events visible to the user with pagination and filtering
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter by event status */
          status?: 'active' | 'cancelled';
          /** @description Filter by visibility scope */
          filter?: 'all' | 'company' | 'department' | 'team' | 'personal';
          /** @description Search in title and description */
          search?: string;
          /** @description Filter events starting from this date */
          start_date?: string;
          /** @description Filter events ending before this date */
          end_date?: string;
          /** @description Page number */
          page?: number;
          /** @description Items per page */
          limit?: number;
          /** @description Sort by field */
          sortBy?: 'start_date' | 'end_date' | 'title' | 'created_at';
          /** @description Sort direction */
          sortDir?: 'ASC' | 'DESC';
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Calendar events retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              events?: components['schemas']['CalendarEvent'][];
              pagination?: {
                currentPage?: number;
                totalPages?: number;
                totalItems?: number;
                itemsPerPage?: number;
                hasNext?: boolean;
                hasPrev?: boolean;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/chat/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get available chat users
     * @description Retrieve list of users available for chat within the tenant
     */
    get: {
      parameters: {
        query?: {
          /** @description Search by username or name */
          search?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Users retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              users?: {
                id?: number;
                username?: string;
                first_name?: string;
                last_name?: string;
                role?: string;
                is_online?: boolean;
                /** Format: date-time */
                last_seen?: string;
              }[];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/chat/conversations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user conversations
     * @description Retrieve all conversations for the authenticated user
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Conversations retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              conversations?: components['schemas']['Conversation'][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /**
     * Create new conversation
     * @description Create a new chat conversation with one or more participants
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * @description Array of user IDs to include in conversation
             * @example [
             *       2,
             *       3,
             *       4
             *     ]
             */
            participants: number[];
            /**
             * @description Optional conversation name (for group chats)
             * @example Project Team Chat
             */
            name?: string;
          };
        };
      };
      responses: {
        /** @description Conversation created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Konversation erfolgreich erstellt */
              message?: string;
              conversation?: components['schemas']['Conversation'];
            };
          };
        };
        /** @description Validation error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/chat/conversations/{id}/messages': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get messages from conversation
     * @description Retrieve all messages from a specific conversation
     */
    get: {
      parameters: {
        query?: {
          /** @description Page number */
          page?: number;
          /** @description Messages per page */
          limit?: number;
        };
        header?: never;
        path: {
          /** @description Conversation ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Messages retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              messages?: components['schemas']['ChatMessage'][];
              pagination?: components['schemas']['PaginationInfo'];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - Not a participant in this conversation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Sie sind kein Teilnehmer dieser Konversation */
              error?: string;
            };
          };
        };
        /** @description Conversation not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Konversation nicht gefunden */
              error?: string;
            };
          };
        };
      };
    };
    put?: never;
    /**
     * Send message to conversation
     * @description Send a new message to a conversation with optional file attachment
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Conversation ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'multipart/form-data': {
            /**
             * @description Message content
             * @example Hallo, wie geht es dir?
             */
            message: string;
            /**
             * Format: binary
             * @description Optional file attachment (max 10MB)
             */
            attachment?: string;
          };
          'application/json': {
            /**
             * @description Message content
             * @example Hallo, wie geht es dir?
             */
            message: string;
          };
        };
      };
      responses: {
        /** @description Message sent successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Nachricht erfolgreich gesendet */
              message?: string;
              data?: components['schemas']['ChatMessage'];
            };
          };
        };
        /** @description Validation error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - Not a participant in this conversation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Sie sind kein Teilnehmer dieser Konversation */
              error?: string;
            };
          };
        };
        /** @description Conversation not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Konversation nicht gefunden */
              error?: string;
            };
          };
        };
        /** @description File too large */
        413: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Dateityp nicht erlaubt */
              error?: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/chat/attachments/{filename}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Download chat attachment
     * @description Download a file attachment from a chat message
     */
    get: {
      parameters: {
        query?: {
          /** @description Force download instead of inline display */
          download?: boolean;
        };
        header?: never;
        path: {
          /** @description Attachment filename */
          filename: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description File content */
        200: {
          headers: {
            'Content-Disposition'?: string;
            [name: string]: unknown;
          };
          content: {
            'image/jpeg': string;
            'image/png': string;
            'image/gif': string;
            'image/webp': string;
            'application/pdf': string;
            'text/plain': string;
            'application/msword': string;
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document': string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - No access to this file */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Kein Zugriff auf diese Datei */
              error?: string;
            };
          };
        };
        /** @description File not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Datei nicht gefunden */
              error?: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/chat/unread-count': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get unread message count
     * @description Get the total number of unread messages for the authenticated user
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Unread count retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /**
               * @description Total number of unread messages
               * @example 5
               */
              unreadCount?: number;
              conversations?: {
                conversationId?: number;
                unreadCount?: number;
                /** Format: date-time */
                lastMessage?: string;
              }[];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/chat/conversations/{id}/read': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Mark conversation as read
     * @description Mark all messages in a conversation as read
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Conversation ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Conversation marked as read */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Konversation als gelesen markiert */
              message?: string;
              /** @description Number of messages marked as read */
              markedCount?: number;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - Not a participant in this conversation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Sie sind kein Teilnehmer dieser Konversation */
              error?: string;
            };
          };
        };
        /** @description Conversation not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Konversation nicht gefunden */
              error?: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/chat/conversations/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete conversation
     * @description Delete a conversation (admin only or if you're the only participant)
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Conversation ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Conversation deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Konversation erfolgreich gel√∂scht */
              message?: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - Cannot delete this conversation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Sie k√∂nnen diese Konversation nicht l√∂schen */
              error?: string;
            };
          };
        };
        /** @description Conversation not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Konversation nicht gefunden */
              error?: string;
            };
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/departments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all departments
     * @description Retrieve all departments for the tenant
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Departments retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Department'][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /**
     * Create a new department
     * @description Create a new department (Admin/Root only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * @description Department name
             * @example Produktion
             */
            name: string;
            /**
             * @description Department description
             * @example Produktionsabteilung f√ºr alle Fertigungsprozesse
             */
            description?: string;
            /**
             * @description User ID of department manager
             * @example 42
             */
            manager_id?: number;
            /**
             * @description Parent department ID for hierarchical structure
             * @example 1
             */
            parent_id?: number;
            /**
             * @description Physical location
             * @example Geb√§ude A, 2. Stock
             */
            location?: string;
            /**
             * @description Cost center code
             * @example CC-PROD-001
             */
            cost_center?: string;
          };
        };
      };
      responses: {
        /** @description Department created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Abteilung erfolgreich erstellt */
              message?: string;
              /** @example 5 */
              departmentId?: number;
            };
          };
        };
        /** @description Validation error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Abteilungsname ist erforderlich */
              message?: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - Not admin/root */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Zugriff verweigert */
              message?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/departments/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get department by ID
     * @description Retrieve a specific department by its ID
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Department ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Department retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Department'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Department not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Abteilung nicht gefunden */
              message?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /**
     * Update department
     * @description Update an existing department (Admin/Root only)
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Department ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * @description Department name
             * @example Produktion
             */
            name?: string;
            /** @description Department description */
            description?: string;
            /** @description User ID of department manager */
            manager_id?: number;
            /** @description Parent department ID */
            parent_id?: number;
            /** @description Physical location */
            location?: string;
            /** @description Cost center code */
            cost_center?: string;
          };
        };
      };
      responses: {
        /** @description Department updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Abteilung erfolgreich aktualisiert */
              message?: string;
            };
          };
        };
        /** @description Validation error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Eine Abteilung kann nicht sich selbst als √úbergeordnete haben */
              message?: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - Not admin/root */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Zugriff verweigert */
              message?: string;
            };
          };
        };
        /** @description Department not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Abteilung nicht gefunden */
              message?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    post?: never;
    /**
     * Delete department
     * @description Delete a department (Admin/Root only). Cannot delete if users are assigned.
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Department ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Department deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Abteilung erfolgreich gel√∂scht */
              message?: string;
            };
          };
        };
        /** @description Cannot delete - has assigned users */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Diese Abteilung kann nicht gel√∂scht werden, da ihr noch Benutzer zugeordnet sind */
              message?: string;
              users?: components['schemas']['User'][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - Not admin/root */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Zugriff verweigert */
              message?: string;
            };
          };
        };
        /** @description Department not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Abteilung nicht gefunden */
              message?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/departments/{id}/members': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get department members
     * @description Retrieve all users assigned to a specific department
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Department ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Department members retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              id?: number;
              username?: string;
              email?: string;
              first_name?: string;
              last_name?: string;
              /** @enum {string} */
              role?: 'root' | 'admin' | 'employee';
              position?: string;
              is_active?: boolean;
            }[];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Department not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Abteilung nicht gefunden */
              message?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents/upload': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload a document
     * @description Upload a PDF document to the system (Admin only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'multipart/form-data': {
            /**
             * Format: binary
             * @description PDF file to upload (max 5MB)
             */
            document: string;
            /**
             * @description Document title
             * @example Arbeitsvertrag
             */
            title?: string;
            /**
             * @description Document description
             * @example Arbeitsvertrag f√ºr neuen Mitarbeiter
             */
            description?: string;
            /**
             * @description Document category
             * @enum {string}
             */
            category: 'personal' | 'company' | 'department' | 'team' | 'payroll';
            /** @description Target user ID (for personal documents) */
            userId?: number;
            /** @description Target team ID (for team documents) */
            teamId?: number;
            /** @description Target department ID (for department documents) */
            departmentId?: number;
            /**
             * @description Year (for payroll documents)
             * @example 2025
             */
            year?: number;
            /**
             * @description Month (for payroll documents)
             * @example 6
             */
            month?: number;
          };
        };
      };
      responses: {
        /** @description Document uploaded successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Dokument erfolgreich hochgeladen */
              message?: string;
              /**
               * @description ID of the uploaded document
               * @example 123
               */
              documentId?: number;
            };
          };
        };
        /** @description Bad request - Invalid file or parameters */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized - Invalid or missing token */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - User is not an admin */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description File too large */
        413: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Nur PDF-Dateien sind erlaubt! */
              error?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all documents
     * @description Retrieve a list of documents with optional filtering (Admin only)
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter by document category */
          category?: 'personal' | 'company' | 'department' | 'team' | 'payroll';
          /** @description Filter by target user ID */
          userId?: number;
          /** @description Filter by year (for payroll documents) */
          year?: number;
          /** @description Filter by month (for payroll documents) */
          month?: number;
          /** @description Page number for pagination */
          page?: number;
          /** @description Number of items per page */
          limit?: number;
          /** @description Filter by archived status */
          archived?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Documents retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              documents?: components['schemas']['Document'][];
              pagination?: {
                currentPage?: number;
                totalPages?: number;
                totalDocuments?: number;
                hasNext?: boolean;
                hasPrev?: boolean;
              };
            };
          };
        };
        /** @description Unauthorized - Invalid or missing token */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - User is not an admin */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/documents/preview/{documentId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Preview document
     * @description Get document content for inline preview (iframe display)
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Document ID to preview */
          documentId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Document content for preview */
        200: {
          headers: {
            'Content-Type'?: string;
            'Content-Disposition'?: string;
            [name: string]: unknown;
          };
          content: {
            'application/pdf': string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - No access to this document */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Kein Zugriff auf dieses Dokument */
              message?: string;
            };
          };
        };
        /** @description Document not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Dokument nicht gefunden */
              message?: string;
            };
          };
        };
        /** @description Server error or document has no content */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Dokument hat keinen Inhalt */
              message?: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/employee/info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get employee information
     * @description Retrieve the current employee's personal information
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Employee information retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['User'];
          };
        };
        /** @description Unauthorized - Invalid or missing token */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - User is not an employee */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Employee not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Mitarbeiter nicht gefunden */
              message?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/employee/documents': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get employee documents
     * @description Retrieve all documents accessible to the employee (personal, team, department, and company documents)
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Documents retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Document'][];
          };
        };
        /** @description Unauthorized - Invalid or missing token */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - User is not an employee */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/kvp': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all KVP suggestions
     * @description Retrieve all KVP suggestions visible to the user with pagination and filtering
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter by suggestion status */
          status?: 'pending' | 'approved' | 'implemented' | 'rejected';
          /** @description Filter by category */
          category?: string;
          /** @description Search in title and description */
          search?: string;
          /** @description Page number */
          page?: number;
          /** @description Items per page */
          limit?: number;
          /** @description Filter by shared/private status */
          shared?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description KVP suggestions retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              data?: components['schemas']['KvpSuggestion'][];
              pagination?: {
                currentPage?: number;
                totalPages?: number;
                totalItems?: number;
                itemsPerPage?: number;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /**
     * Create KVP suggestion
     * @description Create a new KVP suggestion
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * @description Suggestion title
             * @example Optimierung der Pausenzeiten
             */
            title: string;
            /**
             * @description Detailed description
             * @example Durch versetzte Pausenzeiten k√∂nnen wir die Produktivit√§t steigern...
             */
            description: string;
            /**
             * @description Suggestion category
             * @enum {string}
             */
            category: 'Sicherheit' | 'Produktivit√§t' | 'Qualit√§t' | 'Kosten' | 'Umwelt' | 'Sonstiges';
            /**
             * @description Estimated savings in EUR
             * @example 5000
             */
            potential_savings?: number;
            /**
             * @description Effort required
             * @enum {string}
             */
            implementation_effort?: 'low' | 'medium' | 'high';
            /**
             * @description Share with other users
             * @default false
             */
            is_shared?: boolean;
          };
        };
      };
      responses: {
        /** @description Suggestion created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example KVP-Vorschlag erfolgreich erstellt */
              message?: string;
              suggestion?: components['schemas']['KvpSuggestion'];
            };
          };
        };
        /** @description Validation error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/kvp/categories': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get KVP categories
     * @description Retrieve all available KVP categories
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Categories retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': string[];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/kvp/stats': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get KVP statistics
     * @description Retrieve statistics about KVP suggestions
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Statistics retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @description Total number of suggestions */
              total?: number;
              byStatus?: {
                pending?: number;
                approved?: number;
                implemented?: number;
                rejected?: number;
              };
              byCategory?: {
                [key: string]: number;
              };
              /** @description Suggestions created this month */
              thisMonth?: number;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/kvp/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get KVP suggestion by ID
     * @description Retrieve a specific KVP suggestion with all details
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description KVP suggestion ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description KVP suggestion retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['KvpSuggestion'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Suggestion not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Vorschlag nicht gefunden */
              error?: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/kvp/{id}/comments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get comments for KVP suggestion
     * @description Retrieve all comments for a specific KVP suggestion
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description KVP suggestion ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Comments retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example [
               *       {
               *         "id": 1,
               *         "comment": "Sehr gute Idee! Das sollten wir umsetzen.",
               *         "created_by": 42,
               *         "created_by_name": "Max Mustermann",
               *         "created_at": "2025-06-23T10:30:00Z"
               *       }
               *     ] */
              comments?: {
                id?: number;
                comment?: string;
                created_by?: number;
                created_by_name?: string;
                /** Format: date-time */
                created_at?: string;
              }[];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Suggestion not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Add comment to KVP suggestion
     * @description Add a new comment to a specific KVP suggestion
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description KVP suggestion ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * @description Comment text
             * @example Sehr gute Idee! Das sollten wir umsetzen.
             */
            comment: string;
          };
        };
      };
      responses: {
        /** @description Comment added successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Kommentar erfolgreich hinzugef√ºgt */
              message?: string;
              comment?: {
                id?: number;
                comment?: string;
                /** Format: date-time */
                created_at?: string;
              };
            };
          };
        };
        /** @description Validation error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Suggestion not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/shifts/templates': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all shift templates
     * @description Retrieve all available shift templates for the tenant
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Shift templates retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              templates?: components['schemas']['ShiftTemplate'][];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example false */
              success?: boolean;
              /** @example Fehler beim Laden der Schichtvorlagen */
              message?: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/shifts/plans': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all shift plans
     * @description Retrieve shift plans with optional filtering
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter by department ID */
          department_id?: number;
          /** @description Filter by team ID */
          team_id?: number;
          /** @description Filter plans starting from this date */
          start_date?: string;
          /** @description Filter plans ending before this date */
          end_date?: string;
          /** @description Filter by plan status */
          status?: 'draft' | 'published' | 'archived';
          /** @description Page number */
          page?: number;
          /** @description Items per page */
          limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Shift plans retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              plans?: components['schemas']['ShiftPlan'][];
              /** @description Total number of plans */
              total?: number;
              /** @description Current page */
              page?: number;
              /** @description Items per page */
              limit?: number;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/surveys': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all surveys
     * @description Retrieve all surveys for the tenant with pagination and filtering
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter by survey status */
          status?: 'active' | 'draft' | 'closed';
          /** @description Page number */
          page?: number;
          /** @description Items per page */
          limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Surveys retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              surveys?: components['schemas']['Survey'][];
              pagination?: {
                currentPage?: number;
                totalPages?: number;
                totalItems?: number;
                itemsPerPage?: number;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Feature not available */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Feature not available for your subscription */
              error?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Fehler beim Abrufen der Umfragen */
              error?: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/teams': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all teams
     * @description Retrieve all teams for the tenant
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Teams retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Team'][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /**
     * Create a new team
     * @description Create a new team (Admin/Root only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * @description Team name
             * @example DevOps Team
             */
            name: string;
            /**
             * @description Team description
             * @example Verantwortlich f√ºr CI/CD und Infrastruktur
             */
            description?: string;
            /**
             * @description Department ID this team belongs to
             * @example 2
             */
            department_id?: number;
            /**
             * @description User ID of team leader
             * @example 15
             */
            leader_id?: number;
            /**
             * @description Maximum team size
             * @example 10
             */
            max_members?: number;
            /**
             * @description Team location
             * @example Geb√§ude B, Raum 201
             */
            location?: string;
            /**
             * @description Team budget
             * @example 50000
             */
            budget?: number;
            /**
             * @description Whether team is active
             * @default true
             */
            is_active?: boolean;
            /** @description Team goals and objectives */
            goals?: string;
          };
        };
      };
      responses: {
        /** @description Team created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Team erfolgreich erstellt */
              message?: string;
              /** @example 8 */
              teamId?: number;
            };
          };
        };
        /** @description Validation error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Teamname ist erforderlich */
              message?: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - Not admin/root */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Zugriff verweigert */
              message?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/teams/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get team by ID
     * @description Retrieve a specific team by its ID
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Team ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Team retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Team'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Team not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Team nicht gefunden */
              message?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /**
     * Update team
     * @description Update an existing team (Admin/Root only)
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Team ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description Team name */
            name?: string;
            /** @description Team description */
            description?: string;
            /** @description Department ID */
            department_id?: number;
            /** @description Team leader user ID */
            leader_id?: number;
            /** @description Maximum team size */
            max_members?: number;
            /** @description Team location */
            location?: string;
            /** @description Team budget */
            budget?: number;
            /** @description Whether team is active */
            is_active?: boolean;
            /** @description Team goals */
            goals?: string;
          };
        };
      };
      responses: {
        /** @description Team updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Team erfolgreich aktualisiert */
              message?: string;
            };
          };
        };
        /** @description Validation error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Teamname ist erforderlich */
              message?: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - Not admin/root */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Zugriff verweigert */
              message?: string;
            };
          };
        };
        /** @description Team not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Team nicht gefunden */
              message?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    post?: never;
    /**
     * Delete team
     * @description Delete a team (Admin/Root only)
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Team ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Team deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Team erfolgreich gel√∂scht */
              message?: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - Not admin/root */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Zugriff verweigert */
              message?: string;
            };
          };
        };
        /** @description Team not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Team nicht gefunden */
              message?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/teams/{id}/members': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get team members
     * @description Retrieve all members of a specific team
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Team ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Team members retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              id?: number;
              username?: string;
              email?: string;
              first_name?: string;
              last_name?: string;
              /** @enum {string} */
              role?: 'root' | 'admin' | 'employee';
              position?: string;
              /** Format: date-time */
              joined_at?: string;
              is_leader?: boolean;
            }[];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Team not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Team nicht gefunden */
              message?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /**
     * Add user to team
     * @description Add a user to a team (Admin/Root only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Team ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * @description User ID to add to team
             * @example 42
             */
            userId: number;
          };
        };
      };
      responses: {
        /** @description User added to team successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Benutzer erfolgreich zum Team hinzugef√ºgt */
              message?: string;
            };
          };
        };
        /** @description Validation error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Benutzer-ID ist erforderlich */
              message?: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - Not admin/root */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Zugriff verweigert */
              message?: string;
            };
          };
        };
        /** @description Team or user not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Team nicht gefunden */
              message?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/teams/{id}/members/{userId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Remove user from team
     * @description Remove a user from a team (Admin/Root only)
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Team ID */
          id: number;
          /** @description User ID to remove */
          userId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User removed from team successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Benutzer erfolgreich aus dem Team entfernt */
              message?: string;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Forbidden - Not admin/root */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Zugriff verweigert */
              message?: string;
            };
          };
        };
        /** @description Team, user, or membership not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Benutzer ist kein Mitglied dieses Teams */
              message?: string;
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/users/profile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get current user profile */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User profile retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: Record<string, never>;
            };
          };
        };
        /** @description Not authenticated */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/admin-permissions/my': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get current admin's permissions
     * @description Get all department and group permissions for the currently authenticated admin
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Permissions retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
              data?: {
                departments?: {
                  id?: number;
                  name?: string;
                  description?: string;
                  canRead?: boolean;
                  canWrite?: boolean;
                  canDelete?: boolean;
                }[];
                groups?: {
                  id?: number;
                  name?: string;
                  departmentCount?: number;
                  canRead?: boolean;
                  canWrite?: boolean;
                  canDelete?: boolean;
                }[];
                hasAllAccess?: boolean;
                totalDepartments?: number;
                assignedDepartments?: number;
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/admin-permissions/{adminId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get permissions for a specific admin
     * @description Get all department and group permissions for a specific admin (root only)
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Admin user ID */
          adminId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Permissions retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/admin-permissions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Set permissions for an admin
     * @description Set department and/or group permissions for an admin user (root only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description Admin user ID */
            adminId: number;
            /** @description Array of department IDs to grant access to */
            departmentIds?: number[];
            /** @description Array of group IDs to grant access to */
            groupIds?: number[];
            permissions?: {
              /** @default true */
              canRead?: boolean;
              /** @default false */
              canWrite?: boolean;
              /** @default false */
              canDelete?: boolean;
            };
          };
        };
      };
      responses: {
        /** @description Permissions set successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/admin-permissions/{adminId}/departments/{departmentId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Remove department permission
     * @description Remove a specific department permission from an admin (root only)
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Admin user ID */
          adminId: number;
          /** @description Department ID */
          departmentId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Permission removed successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/admin-permissions/{adminId}/groups/{groupId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Remove group permission
     * @description Remove a specific group permission from an admin (root only)
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Admin user ID */
          adminId: number;
          /** @description Group ID */
          groupId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Group permission removed successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/admin-permissions/bulk': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Bulk update permissions
     * @description Assign or remove permissions for multiple admins at once (root only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description Array of admin user IDs */
            adminIds: number[];
            /**
             * @description Operation to perform
             * @enum {string}
             */
            operation: 'assign' | 'remove';
            /** @description Department IDs for assign operation */
            departmentIds?: number[];
            /** @description Group IDs for assign operation */
            groupIds?: number[];
            permissions?: {
              /** @default true */
              canRead?: boolean;
              /** @default false */
              canWrite?: boolean;
              /** @default false */
              canDelete?: boolean;
            };
          };
        };
      };
      responses: {
        /** @description Bulk operation completed */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                successCount?: number;
                totalCount?: number;
                errors?: string[];
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/admin-permissions/{adminId}/check/{departmentId}/{permissionLevel}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Check admin access
     * @description Check if an admin has specific access to a department (root only, for debugging)
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Admin user ID */
          adminId: number;
          /** @description Department ID */
          departmentId: number;
          /** @description Permission level to check */
          permissionLevel: 'read' | 'write' | 'delete';
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Access check result */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                hasAccess?: boolean;
                /** @enum {string} */
                source?: 'direct' | 'group';
                permissions?: {
                  canRead?: boolean;
                  canWrite?: boolean;
                  canDelete?: boolean;
                };
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/audit-trail': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get audit entries
     * @description Retrieve audit trail entries with optional filters. Users can only see their own entries unless they are root.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter by user ID (root only) */
          userId?: number;
          /** @description Filter by action type */
          action?: string;
          /** @description Filter by resource type */
          resourceType?: string;
          /** @description Filter by resource ID */
          resourceId?: number;
          /** @description Filter by status */
          status?: 'success' | 'failure';
          /** @description Start date (ISO 8601) */
          dateFrom?: string;
          /** @description End date (ISO 8601) */
          dateTo?: string;
          /** @description Search in user name, resource name, or action */
          search?: string;
          /** @description Page number */
          page?: number;
          /** @description Items per page */
          limit?: number;
          /** @description Sort field */
          sortBy?: 'created_at' | 'action' | 'user_id' | 'resource_type';
          /** @description Sort order */
          sortOrder?: 'asc' | 'desc';
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Audit entries retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                entries?: Record<string, never>[];
                /** @description Reference removed due to missing definition */
                pagination?: Record<string, never>;
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/audit-trail/stats': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get audit statistics
     * @description Get aggregated statistics from audit trail (admin/root only)
     */
    get: {
      parameters: {
        query?: {
          /** @description Start date (ISO 8601) */
          dateFrom?: string;
          /** @description End date (ISO 8601) */
          dateTo?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Statistics retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/audit-trail/reports': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Generate compliance report
     * @description Generate a compliance report based on audit trail data (admin/root only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * @description Type of compliance report
             * @enum {string}
             */
            reportType: 'gdpr' | 'data_access' | 'data_changes' | 'user_activity';
            /**
             * Format: date-time
             * @description Start date for the report
             */
            dateFrom: string;
            /**
             * Format: date-time
             * @description End date for the report
             */
            dateTo: string;
          };
        };
      };
      responses: {
        /** @description Report generated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/audit-trail/export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Export audit entries
     * @description Export audit entries in JSON or CSV format (admin/root only)
     */
    get: {
      parameters: {
        query?: {
          /** @description Export format */
          format?: 'json' | 'csv';
          /** @description Start date (ISO 8601) */
          dateFrom?: string;
          /** @description End date (ISO 8601) */
          dateTo?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Export successful */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
            'text/csv': string;
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/audit-trail/retention': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete old audit entries
     * @description Delete audit entries older than specified days (root only, minimum 90 days)
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description Delete entries older than this many days */
            olderThanDays: number;
            /** @description User's password for confirmation */
            confirmPassword: string;
          };
        };
      };
      responses: {
        /** @description Entries deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                deletedCount?: number;
                /** Format: date-time */
                cutoffDate?: string;
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/audit-trail/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get specific audit entry
     * @description Get a specific audit entry by ID. Users can only see their own entries unless they are root.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Audit entry ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Entry retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * User login
     * @description Authenticate user with email and password
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * Format: email
             * @example user@example.com
             */
            email: string;
            /**
             * Format: password
             * @example SecurePass123!
             */
            password: string;
          };
        };
      };
      responses: {
        /** @description Login successful */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
              data?: {
                accessToken?: string;
                refreshToken?: string;
                user?: {
                  id?: number;
                  email?: string;
                  firstName?: string;
                  lastName?: string;
                  role?: string;
                };
              };
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/auth/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Register new user
     * @description Create a new user account (tenant admins only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** Format: email */
            email: string;
            /** Format: password */
            password: string;
            firstName: string;
            lastName: string;
            /**
             * @default employee
             * @enum {string}
             */
            role?: 'employee' | 'admin';
          };
        };
      };
      responses: never;
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/auth/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * User logout
     * @description Invalidate user session and tokens
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Logout successful */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/auth/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Refresh access token
     * @description Get new access token using refresh token
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            refreshToken: string;
          };
        };
      };
      responses: {
        /** @description Token refreshed successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/auth/verify': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Verify current token
     * @description Check if current access token is valid
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Token is valid */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/auth/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get current user
     * @description Get current authenticated user information
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User information retrieved */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/blackboard/entries': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List blackboard entries */
    get: {
      parameters: {
        query?: {
          /** @description Filter by status */
          status?: 'active' | 'archived';
          /** @description Filter by organization level */
          filter?: 'all' | 'company' | 'department' | 'team';
          /** @description Search in title and content */
          search?: string;
          /** @description Filter by priority */
          priority?: 'low' | 'medium' | 'high' | 'urgent';
          /** @description Filter by confirmation requirement */
          requiresConfirmation?: boolean;
          /** @description Page number */
          page?: number;
          /** @description Items per page */
          limit?: number;
          /** @description Sort field */
          sortBy?: 'created_at' | 'updated_at' | 'title' | 'priority' | 'expires_at';
          /** @description Sort direction */
          sortDir?: 'ASC' | 'DESC';
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of blackboard entries */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    put?: never;
    /** Create new blackboard entry */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Entry created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/blackboard/entries/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get blackboard entry by ID */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Entry ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Blackboard entry details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Update blackboard entry */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Entry ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Entry updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /** Delete blackboard entry */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Entry ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Entry deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/blackboard/entries/{id}/archive': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Archive blackboard entry */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Entry ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Entry archived successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/blackboard/entries/{id}/unarchive': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Unarchive blackboard entry */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Entry ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Entry unarchived successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/blackboard/entries/{id}/confirm': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Confirm reading a blackboard entry */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Entry ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Entry confirmed successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/blackboard/entries/{id}/confirmations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get confirmation status for an entry */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Entry ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of users and their confirmation status */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/blackboard/dashboard': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get dashboard entries for current user */
    get: {
      parameters: {
        query?: {
          /** @description Number of entries to return */
          limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Priority entries for dashboard */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/blackboard/tags': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all available tags */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of tags */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/blackboard/entries/{id}/attachments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get attachments for an entry */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Entry ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of attachments */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    put?: never;
    /** Upload attachment to entry */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Entry ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'multipart/form-data': {
            /**
             * Format: binary
             * @description File to upload (PDF or image)
             */
            attachment?: string;
          };
        };
      };
      responses: {
        /** @description Attachment uploaded successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/blackboard/attachments/{attachmentId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Download attachment */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Attachment ID */
          attachmentId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description File download */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/octet-stream': string;
          };
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete attachment */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Attachment ID */
          attachmentId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Attachment deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/calendar/events': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get calendar events */
    get: {
      parameters: {
        query?: {
          /** @description Filter by event status */
          status?: 'active' | 'cancelled';
          /** @description Filter by visibility scope */
          filter?: 'all' | 'company' | 'department' | 'team' | 'personal';
          /** @description Search in title and description */
          search?: string;
          /** @description Filter events starting from this date */
          startDate?: string;
          /** @description Filter events ending before this date */
          endDate?: string;
          page?: number;
          limit?: number;
          sortBy?: 'startDate' | 'endDate' | 'title' | 'createdAt';
          sortOrder?: 'asc' | 'desc';
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    put?: never;
    /** Create a new event */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            title: string;
            description?: string;
            location?: string;
            /** Format: date-time */
            startTime: string;
            /** Format: date-time */
            endTime: string;
            allDay?: boolean;
            /** @enum {string} */
            orgLevel: 'company' | 'department' | 'team' | 'personal';
            orgId?: number;
            reminderMinutes?: number;
            color?: string;
            recurrenceRule?: string;
            attendeeIds?: number[];
          };
        };
      };
      responses: {
        /** @description Event created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Validation error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/calendar/events/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get event by ID */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Event ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Event not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Update an event */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Event ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            title?: string;
            description?: string;
            location?: string;
            /** Format: date-time */
            startTime?: string;
            /** Format: date-time */
            endTime?: string;
            allDay?: boolean;
            /** @enum {string} */
            orgLevel?: 'company' | 'department' | 'team' | 'personal';
            orgId?: number;
            reminderMinutes?: number;
            color?: string;
            recurrenceRule?: string;
            /** @enum {string} */
            status?: 'tentative' | 'confirmed' | 'cancelled';
          };
        };
      };
      responses: {
        /** @description Event updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Event not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /** Delete an event */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Event ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Event deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Event not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/calendar/events/{id}/attendees/response': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Update attendee response */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Event ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @enum {string} */
            response: 'accepted' | 'declined' | 'tentative';
          };
        };
      };
      responses: {
        /** @description Response updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Event not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/calendar/export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Export calendar events */
    get: {
      parameters: {
        query: {
          /** @description Export format */
          format: 'ics' | 'csv';
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Export file */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/calendar': string;
            'text/csv': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/calendar/dashboard': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get upcoming events for dashboard */
    get: {
      parameters: {
        query?: {
          /** @description Number of days to look ahead */
          days?: number;
          /** @description Maximum number of events to return */
          limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Upcoming events */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: components['schemas']['CalendarEvent'][];
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/calendar/unread-events': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get unread calendar events (events requiring response) */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of unread events */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @description Total count of events requiring response */
              totalUnread?: number;
              eventsRequiringResponse?: {
                id?: number;
                title?: string;
                startTime?: string;
                requiresResponse?: boolean;
              }[];
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/chat/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get available chat users */
    get: {
      parameters: {
        query?: {
          /** @description Search by name, username, or email */
          search?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Users retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/chat/conversations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get user's conversations */
    get: {
      parameters: {
        query?: {
          /** @description Filter by group conversations */
          isGroup?: boolean;
          /** @description Filter conversations with unread messages */
          hasUnread?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Conversations retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Create a new conversation */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description Array of user IDs to include */
            participantIds: number[];
            /** @description Conversation name (for groups) */
            name?: string;
            /** @description Force group conversation */
            isGroup?: boolean;
          };
        };
      };
      responses: {
        /** @description Conversation created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/chat/conversations/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get conversation details */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Conversation ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Conversation retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Update conversation */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            name?: string;
          };
        };
      };
      responses: {
        /** @description Conversation updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /** Delete conversation */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Conversation deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/chat/conversations/{id}/messages': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get messages from conversation */
    get: {
      parameters: {
        query?: {
          startDate?: string;
          endDate?: string;
          hasAttachment?: boolean;
        };
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Messages retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Send message to conversation */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'multipart/form-data': {
            /** @description Message content */
            message?: string;
            /**
             * Format: binary
             * @description Optional file attachment
             */
            attachment?: string;
          };
          'application/json': {
            message: string;
          };
        };
      };
      responses: {
        /** @description Message sent successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/chat/messages/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Edit a message */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            message: string;
          };
        };
      };
      responses: {
        /** @description Message updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /** Delete a message */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Message deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/chat/conversations/{id}/read': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Mark conversation as read */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Conversation marked as read */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/chat/unread-count': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get unread message count */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Unread count retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/chat/attachments/{filename}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Download chat attachment */
    get: {
      parameters: {
        query?: {
          /** @description Force download instead of inline */
          download?: boolean;
        };
        header?: never;
        path: {
          filename: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description File content */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/octet-stream': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/chat/conversations/{id}/participants': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Add participants to conversation */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            participantIds: number[];
          };
        };
      };
      responses: {
        /** @description Participants added successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/chat/conversations/{id}/participants/{userId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Remove participant from conversation */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
          userId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Participant removed successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/chat/conversations/{id}/leave': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Leave conversation */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Left conversation successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/chat/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Search messages across all conversations */
    get: {
      parameters: {
        query: {
          /** @description Search query */
          q: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Search results retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/department-groups': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all department groups
     * @description Get all department groups with hierarchical structure
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Department groups retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
              data?: {
                id?: number;
                name?: string;
                description?: string;
                parentGroupId?: number;
                memberCount?: number;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: number;
                departments?: {
                  id?: number;
                  name?: string;
                  description?: string;
                }[];
                subgroups?: Record<string, never>[];
              }[];
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Create a new department group
     * @description Create a new department group (root only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description Group name */
            name: string;
            /** @description Group description */
            description?: string;
            /** @description Parent group ID for hierarchical structure */
            parentGroupId?: number;
            /** @description Initial departments to add to the group */
            departmentIds?: number[];
          };
        };
      };
      responses: {
        /** @description Department group created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                id?: number;
              };
              message?: string;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Conflict - Group name already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/department-groups/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a department group by ID
     * @description Get a single department group by its ID
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Department group ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Department group retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Update a department group
     * @description Update a department group (root only)
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Department group ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description Group name */
            name: string;
            /** @description Group description */
            description?: string;
          };
        };
      };
      responses: {
        /** @description Department group updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              message?: string;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Conflict - Group name already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /**
     * Delete a department group
     * @description Delete a department group (root only). Cannot delete if group has admin permissions or subgroups.
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Department group ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Department group deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              message?: string;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Conflict - Group has admin permissions or subgroups */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/department-groups/{id}/departments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get departments in a group
     * @description Get all departments in a department group
     */
    get: {
      parameters: {
        query?: {
          /** @description Include departments from subgroups */
          includeSubgroups?: boolean;
        };
        header?: never;
        path: {
          /** @description Department group ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Departments retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                id?: number;
                name?: string;
                description?: string;
              }[];
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Add departments to a group
     * @description Add one or more departments to a department group (root only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Department group ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description Array of department IDs to add */
            departmentIds: number[];
          };
        };
      };
      responses: {
        /** @description Departments added successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              message?: string;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/department-groups/{id}/departments/{departmentId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Remove a department from a group
     * @description Remove a department from a department group (root only)
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Department group ID */
          id: number;
          /** @description Department ID to remove */
          departmentId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Department removed successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              message?: string;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/departments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all departments
     * @description Retrieve all departments for the authenticated user's tenant
     */
    get: {
      parameters: {
        query?: {
          /** @description Include extended fields (managerName, employeeCount, teamCount) */
          includeExtended?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Departments retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Create a new department
     * @description Create a new department (admin/root only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Department created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/departments/stats': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get department statistics
     * @description Get statistics about departments and teams for the tenant
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Statistics retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/departments/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get department by ID
     * @description Retrieve a specific department by its ID
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Department ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Department retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Update a department
     * @description Update an existing department (admin/root only)
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Department ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Department updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /**
     * Delete a department
     * @description Delete a department (admin/root only). Cannot delete if users are assigned.
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Department ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Department deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/departments/{id}/members': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get department members
     * @description Retrieve all users assigned to a specific department
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Department ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Department members retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/documents': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List documents with filters */
    get: {
      parameters: {
        query?: {
          /** @description Filter by document category */
          category?: 'general' | 'personal' | 'work' | 'training' | 'hr' | 'salary';
          /** @description Filter by recipient type */
          recipientType?: 'user' | 'team' | 'department' | 'company';
          /** @description Filter by user ID (admin only) */
          userId?: number;
          /** @description Filter by team ID */
          teamId?: number;
          /** @description Filter by department ID */
          departmentId?: number;
          /** @description Filter by year (for salary documents) */
          year?: number;
          /** @description Filter by month (for salary documents) */
          month?: number;
          /** @description Filter archived documents */
          isArchived?: boolean;
          /** @description Search in filename and description */
          search?: string;
          page?: number;
          limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Upload a new document */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'multipart/form-data': {
            /**
             * Format: binary
             * @description PDF file to upload
             */
            document: string;
            /** @enum {string} */
            category: 'general' | 'personal' | 'work' | 'training' | 'hr' | 'salary';
            /** @enum {string} */
            recipientType: 'user' | 'team' | 'department' | 'company';
            /** @description Required when recipientType is 'user' */
            userId?: number;
            /** @description Required when recipientType is 'team' */
            teamId?: number;
            /** @description Required when recipientType is 'department' */
            departmentId?: number;
            description?: string;
            /** @description JSON array of tags */
            tags?: string;
            /** @description Required for salary documents */
            year?: number;
            /** @description Required for salary documents */
            month?: number;
          };
        };
      };
      responses: {
        /** @description Document created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Bad request - Invalid data */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden - Admin only */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/documents/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get document by ID */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Document ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden - No access to document */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Document not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Update document metadata */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Document ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            filename?: string;
            /** @enum {string} */
            category?: 'general' | 'personal' | 'work' | 'training' | 'hr' | 'salary';
            description?: string;
            tags?: string[];
            isPublic?: boolean;
            /** Format: date-time */
            expiresAt?: string;
          };
        };
      };
      responses: {
        /** @description Document updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden - Admin only */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Document not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /** Delete a document */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Document ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Document deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                message?: string;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden - Admin only */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Document not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/documents/{id}/archive': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Archive a document */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Document ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Document archived successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                message?: string;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden - Admin only */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Document not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/documents/{id}/unarchive': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Unarchive a document */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Document ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Document unarchived successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                message?: string;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden - Admin only */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Document not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/documents/{id}/download': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Download a document file */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Document ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Document file */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/pdf': string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden - No access to document */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Document not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/documents/{id}/preview': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Preview a document inline */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Document ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Document file for preview */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/pdf': string;
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden - No access to document */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Document not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/documents/stats': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get document statistics */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Document statistics */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                /** @description Number of unread documents */
                unreadCount?: number;
                /** @description Total number of documents */
                totalCount?: number;
                /** @description Storage used in bytes (admin only) */
                storageUsed?: number;
                /** @description Document count by category */
                documentsByCategory?: {
                  [key: string]: number;
                };
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/features': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all available features
     * @description Retrieve all features available in the system. Public endpoint - no authentication required.
     */
    get: {
      parameters: {
        query?: {
          /** @description Include inactive features in the response */
          includeInactive?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Features retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
              data?: Record<string, never>[];
              meta?: {
                /** @example Features retrieved successfully */
                message?: string;
                /** @example 15 */
                count?: number;
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/features/categories': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get features grouped by category
     * @description Retrieve all features organized by their categories. Public endpoint.
     */
    get: {
      parameters: {
        query?: {
          /** @description Include inactive features in the response */
          includeInactive?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Features by category retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/features/{code}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get feature by code
     * @description Retrieve a specific feature by its unique code
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description Unique feature code
           * @example CHAT_MESSAGING
           */
          code: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Feature retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Feature not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/features/tenant/{tenantId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get features for a specific tenant
     * @description Retrieve all features activated for a specific tenant. Admin only.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description Tenant ID
           * @example 1
           */
          tenantId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Tenant features retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Access denied */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/features/my-features': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get features for authenticated user's tenant
     * @description Retrieve all features available for the current user's tenant
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description My features retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/features/tenant/{tenantId}/summary': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get tenant features summary
     * @description Get a summary of activated features for a tenant including counts by category
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description Tenant ID
           * @example 1
           */
          tenantId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Tenant features summary retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Access denied */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/features/activate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Activate a feature for a tenant
     * @description Activate a specific feature for a tenant. Admin/Root only.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Feature activated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Invalid request or feature already active */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Access denied */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Feature not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/features/deactivate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Deactivate a feature for a tenant
     * @description Deactivate a specific feature for a tenant. Admin/Root only.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Feature deactivated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Access denied */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Feature not found or not active */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/features/usage/{featureCode}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get feature usage statistics
     * @description Get usage statistics for a specific feature within a date range
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Start date for usage stats
           * @example 2025-01-01
           */
          startDate: string;
          /**
           * @description End date for usage stats
           * @example 2025-01-31
           */
          endDate: string;
        };
        header?: never;
        path: {
          /**
           * @description Feature code
           * @example CHAT_MESSAGING
           */
          featureCode: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Usage statistics retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Missing required parameters */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Feature not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/features/test/{featureCode}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Test feature access
     * @description Test if the current user's tenant has access to a specific feature
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description Feature code to test
           * @example CHAT_MESSAGING
           */
          featureCode: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Access granted */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Feature access denied */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/features/all-tenants': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all tenants with their features
     * @description Get a complete list of all tenants and their activated features. Root only.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description All tenants with features retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Access denied - Root only */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/kvp/categories': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get KVP categories
     * @description Retrieve all available KVP categories for the tenant
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Categories retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                id?: number;
                name?: string;
                description?: string;
                color?: string;
                icon?: string;
              }[];
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/kvp/dashboard/stats': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get KVP dashboard statistics
     * @description Retrieve statistics about KVP suggestions for dashboard display
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Statistics retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                totalSuggestions?: number;
                newSuggestions?: number;
                inProgress?: number;
                implemented?: number;
                rejected?: number;
                avgSavings?: number | null;
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/kvp/points/award': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Award points to user
     * @description Award points to a user for their KVP suggestion (admin only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description User ID to award points to */
            userId: number;
            /** @description Related suggestion ID */
            suggestionId: number;
            /** @description Number of points to award */
            points: number;
            /** @description Reason for awarding points */
            reason: string;
          };
        };
      };
      responses: {
        /** @description Points awarded successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/kvp/points/user/{userId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user points summary
     * @description Get points summary for a specific user
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description User ID */
          userId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Points summary retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                totalPoints?: number;
                totalAwards?: number;
                suggestionsAwarded?: number;
                latestAwards?: Record<string, never>[];
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/kvp/points/user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get current user points summary
     * @description Get points summary for the authenticated user
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Points summary retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                totalPoints?: number;
                totalAwards?: number;
                suggestionsAwarded?: number;
                latestAwards?: Record<string, never>[];
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/kvp': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List KVP suggestions
     * @description Get a paginated list of KVP suggestions with filters
     */
    get: {
      parameters: {
        query?: {
          status?: 'new' | 'in_progress' | 'implemented' | 'rejected';
          categoryId?: number;
          priority?: 'low' | 'normal' | 'high' | 'urgent';
          orgLevel?: 'company' | 'department' | 'team';
          search?: string;
          page?: number;
          limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Suggestions retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: Record<string, never>[];
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Create KVP suggestion
     * @description Create a new KVP suggestion
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            title: string;
            description: string;
            categoryId: number;
            /** @enum {string} */
            orgLevel: 'company' | 'department' | 'team';
            orgId: number;
            /**
             * @default normal
             * @enum {string}
             */
            priority?: 'low' | 'normal' | 'high' | 'urgent';
            expectedBenefit?: string;
            estimatedCost?: number;
          };
        };
      };
      responses: {
        /** @description Suggestion created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/kvp/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get KVP suggestion by ID
     * @description Retrieve a specific KVP suggestion with all details
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Suggestion ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Suggestion retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Update KVP suggestion
     * @description Update an existing KVP suggestion
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Suggestion ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            title?: string;
            description?: string;
            categoryId?: number;
            /** @enum {string} */
            priority?: 'low' | 'normal' | 'high' | 'urgent';
            /**
             * @description Only admin/manager can change status
             * @enum {string}
             */
            status?: 'new' | 'in_progress' | 'implemented' | 'rejected';
            expectedBenefit?: string;
            estimatedCost?: number;
            /** @description Only admin/manager can set actual savings */
            actualSavings?: number;
            /**
             * Format: date
             * @description Only admin/manager can set implementation date
             */
            implementationDate?: string;
            /** @description User ID assigned to implement (admin/manager only) */
            assignedTo?: number;
          };
        };
      };
      responses: {
        /** @description Suggestion updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /**
     * Delete KVP suggestion
     * @description Delete a KVP suggestion (only own suggestions or admin)
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Suggestion ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Suggestion deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: Record<string, never>;
              /** @example Suggestion deleted successfully */
              message?: string;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/kvp/{id}/comments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get comments for KVP suggestion
     * @description Retrieve all comments for a specific KVP suggestion
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Suggestion ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Comments retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: Record<string, never>[];
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Add comment to KVP suggestion
     * @description Add a new comment to a specific KVP suggestion
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Suggestion ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            comment: string;
            /** @default false */
            isInternal?: boolean;
          };
        };
      };
      responses: {
        /** @description Comment added successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/kvp/{id}/attachments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get attachments for KVP suggestion
     * @description Retrieve all attachments for a specific KVP suggestion
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Suggestion ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Attachments retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: Record<string, never>[];
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Upload attachments to KVP suggestion
     * @description Upload up to 5 attachments to a specific KVP suggestion
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Suggestion ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'multipart/form-data': {
            /** @description File attachments (JPG, PNG, PDF, DOC, DOCX - max 10MB each, max 5 files) */
            files: string[];
          };
        };
      };
      responses: {
        /** @description Attachments uploaded successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                uploadedCount?: number;
                attachments?: Record<string, never>[];
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description File too large */
        413: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/kvp/attachments/{attachmentId}/download': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Download KVP attachment
     * @description Download a specific attachment file
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Attachment ID */
          attachmentId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description File download */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/octet-stream': string;
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/logs': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get system logs
     * @description Retrieve system audit logs with filters (Root only)
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter by user ID */
          userId?: number;
          /** @description Filter by tenant ID */
          tenantId?: number;
          /** @description Filter by action type */
          action?: string;
          /** @description Filter by entity type */
          entityType?: string;
          /** @description Filter logs after this date */
          startDate?: string;
          /** @description Filter logs before this date */
          endDate?: string;
          /** @description Search in user names, emails, actions, entity types */
          search?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully retrieved logs */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                logs?: Record<string, never>[];
                /** @description Reference removed due to missing definition */
                pagination?: Record<string, never>;
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    /**
     * Delete logs
     * @description Delete logs based on filters (Root only, requires password confirmation)
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description Delete logs for specific user */
            userId?: number;
            /** @description Delete logs for specific tenant */
            tenantId?: number;
            /** @description Delete logs older than specified days */
            olderThanDays?: number;
            /**
             * Format: password
             * @description Root user password confirmation
             */
            confirmPassword: string;
          };
        };
      };
      responses: {
        /** @description Successfully deleted logs */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                message?: string;
                deletedCount?: number;
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/logs/stats': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get log statistics
     * @description Get statistical overview of system logs (Root only)
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully retrieved statistics */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                /** @description Total number of logs */
                totalLogs?: number;
                /** @description Number of logs created today */
                todayLogs?: number;
                /** @description Number of unique users in logs */
                uniqueUsers?: number;
                /** @description Number of unique tenants in logs */
                uniqueTenants?: number;
                topActions?: {
                  action?: string;
                  count?: number;
                }[];
                topUsers?: {
                  userId?: number;
                  userName?: string;
                  count?: number;
                }[];
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/machines': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List all machines
     * @description Get a paginated list of machines with optional filters
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter by machine status */
          status?: 'operational' | 'maintenance' | 'repair' | 'standby' | 'decommissioned';
          /** @description Filter by machine type */
          machineType?: 'production' | 'packaging' | 'quality_control' | 'logistics' | 'utility' | 'other';
          /** @description Filter by department ID */
          departmentId?: number;
          /** @description Filter machines needing maintenance */
          needsMaintenance?: boolean;
          /** @description Sort field */
          sortBy?: 'created_at' | 'updated_at' | 'name' | 'next_maintenance';
          /** @description Sort order */
          sortOrder?: 'asc' | 'desc';
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully retrieved machines list */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: Record<string, never>[];
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Create new machine
     * @description Create a new machine in the system (admin only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * @description Machine name
             * @example CNC Machine 001
             */
            name: string;
            /**
             * @description Machine model
             * @example DMG MORI DMU 50
             */
            model?: string;
            /**
             * @description Machine manufacturer
             * @example DMG MORI
             */
            manufacturer?: string;
            /**
             * @description Unique serial number
             * @example SN-2024-001
             */
            serialNumber?: string;
            /**
             * @description Internal asset number
             * @example ASSET-001
             */
            assetNumber?: string;
            /** @description Department ID */
            departmentId?: number;
            /** @description Area ID within department */
            areaId?: number;
            /**
             * @description Physical location
             * @example Building A, Floor 2, Bay 3
             */
            location?: string;
            /**
             * @description Type of machine
             * @default production
             * @enum {string}
             */
            machineType?: 'production' | 'packaging' | 'quality_control' | 'logistics' | 'utility' | 'other';
            /**
             * @description Current machine status
             * @default operational
             * @enum {string}
             */
            status?: 'operational' | 'maintenance' | 'repair' | 'standby' | 'decommissioned';
            /**
             * Format: date
             * @description Date of purchase
             * @example 2024-01-15
             */
            purchaseDate?: string;
            /**
             * Format: date
             * @description Date of installation
             * @example 2024-02-01
             */
            installationDate?: string;
            /**
             * Format: date
             * @description Warranty expiration date
             * @example 2027-01-15
             */
            warrantyUntil?: string;
            /**
             * Format: date
             * @description Date of last maintenance
             */
            lastMaintenance?: string;
            /**
             * Format: date
             * @description Date of next scheduled maintenance
             */
            nextMaintenance?: string;
            /** @description Total operating hours */
            operatingHours?: number;
            /**
             * @description Production capacity
             * @example 500 units/hour
             */
            productionCapacity?: string;
            /**
             * @description Energy consumption
             * @example 50 kW
             */
            energyConsumption?: string;
            /**
             * Format: uri
             * @description URL to machine manual
             */
            manualUrl?: string;
            /** @description QR code data */
            qrCode?: string;
            /** @description Additional notes */
            notes?: string;
          };
        };
      };
      responses: {
        /** @description Machine created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/machines/statistics': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get machine statistics
     * @description Get statistical overview of all machines in the system
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully retrieved machine statistics */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                /** @description Total number of active machines */
                totalMachines?: number;
                /** @description Number of operational machines */
                operational?: number;
                /** @description Number of machines in maintenance */
                inMaintenance?: number;
                /** @description Number of machines in repair */
                inRepair?: number;
                /** @description Number of machines on standby */
                standby?: number;
                /** @description Number of decommissioned machines */
                decommissioned?: number;
                /** @description Number of machines needing maintenance within 30 days */
                needsMaintenanceSoon?: number;
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/machines/categories': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get machine categories
     * @description Get all available machine categories
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully retrieved machine categories */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                id?: number;
                name?: string;
                description?: string;
                icon?: string;
                sortOrder?: number;
                isActive?: boolean;
              }[];
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/machines/upcoming-maintenance': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get upcoming maintenance
     * @description Get machines that need maintenance within specified days
     */
    get: {
      parameters: {
        query?: {
          /** @description Number of days to look ahead (1-365) */
          days?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully retrieved machines needing maintenance */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: Record<string, never>[];
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/machines/maintenance': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add maintenance record
     * @description Record a new maintenance activity for a machine (admin only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description ID of the machine */
            machineId: number;
            /**
             * @description Type of maintenance performed
             * @enum {string}
             */
            maintenanceType: 'preventive' | 'corrective' | 'inspection' | 'calibration' | 'cleaning' | 'other';
            /**
             * Format: date-time
             * @description Date when maintenance was performed
             */
            performedDate: string;
            /** @description ID of the user who performed maintenance */
            performedBy?: number;
            /** @description Name of external company if maintenance was outsourced */
            externalCompany?: string;
            /** @description Detailed description of maintenance performed */
            description?: string;
            /** @description List of parts that were replaced */
            partsReplaced?: string;
            /**
             * Format: float
             * @description Cost of maintenance
             */
            cost?: number;
            /**
             * Format: float
             * @description Duration of maintenance in hours
             */
            durationHours?: number;
            /**
             * @description Machine status after maintenance
             * @default operational
             * @enum {string}
             */
            statusAfter?: 'operational' | 'needs_repair' | 'decommissioned';
            /**
             * Format: date
             * @description Date of next scheduled maintenance
             */
            nextMaintenanceDate?: string;
            /**
             * Format: uri
             * @description URL to maintenance report document
             */
            reportUrl?: string;
          };
        };
      };
      responses: {
        /** @description Maintenance record created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/machines/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get machine by ID
     * @description Get detailed information about a specific machine
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Machine ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully retrieved machine */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Update machine
     * @description Update an existing machine's information (admin only)
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Machine ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description Machine name */
            name?: string;
            /** @description Machine model */
            model?: string;
            /** @description Machine manufacturer */
            manufacturer?: string;
            /** @description Unique serial number */
            serialNumber?: string;
            /** @description Internal asset number */
            assetNumber?: string;
            /** @description Department ID */
            departmentId?: number;
            /** @description Area ID within department */
            areaId?: number;
            /** @description Physical location */
            location?: string;
            /**
             * @description Type of machine
             * @enum {string}
             */
            machineType?: 'production' | 'packaging' | 'quality_control' | 'logistics' | 'utility' | 'other';
            /**
             * @description Current machine status
             * @enum {string}
             */
            status?: 'operational' | 'maintenance' | 'repair' | 'standby' | 'decommissioned';
            /**
             * Format: date
             * @description Date of purchase
             */
            purchaseDate?: string;
            /**
             * Format: date
             * @description Date of installation
             */
            installationDate?: string;
            /**
             * Format: date
             * @description Warranty expiration date
             */
            warrantyUntil?: string;
            /**
             * Format: date
             * @description Date of last maintenance
             */
            lastMaintenance?: string;
            /**
             * Format: date
             * @description Date of next scheduled maintenance
             */
            nextMaintenance?: string;
            /** @description Total operating hours */
            operatingHours?: number;
            /** @description Production capacity */
            productionCapacity?: string;
            /** @description Energy consumption */
            energyConsumption?: string;
            /**
             * Format: uri
             * @description URL to machine manual
             */
            manualUrl?: string;
            /** @description QR code data */
            qrCode?: string;
            /** @description Additional notes */
            notes?: string;
            /** @description Whether the machine is active */
            isActive?: boolean;
          };
        };
      };
      responses: {
        /** @description Machine updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /**
     * Delete machine
     * @description Soft delete a machine (marks as inactive, admin only)
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Machine ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Machine deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                /** @example Machine deleted successfully */
                message?: string;
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/machines/{id}/maintenance': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get maintenance history
     * @description Get all maintenance records for a specific machine
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Machine ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully retrieved maintenance history */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: Record<string, never>[];
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/notifications': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List notifications for the authenticated user */
    get: {
      parameters: {
        query?: {
          /** @description Filter by notification type */
          type?: 'email' | 'push' | 'in_app';
          /** @description Filter by priority */
          priority?: 'low' | 'medium' | 'high';
          /** @description Filter unread notifications only */
          unread?: boolean;
          /** @description Page number */
          page?: number;
          /** @description Items per page */
          limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of notifications */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    put?: never;
    /** Create a new notification (admin only) */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Notification created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Forbidden - Admin only */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/notifications/{id}/read': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Mark notification as read */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Notification ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Notification marked as read */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Notification not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/notifications/mark-all-read': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Mark all notifications as read */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description All notifications marked as read */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                /** @description Number of notifications marked as read */
                updated?: number;
              };
            };
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/notifications/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete notification */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Notification ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Notification deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Notification not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/notifications/preferences': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get notification preferences for authenticated user */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User notification preferences */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    /** Update notification preferences */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Preferences updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/notifications/stats': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get notification statistics (admin only) */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Notification statistics */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Forbidden - Admin only */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/notifications/stats/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get personal notification statistics */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Personal notification statistics */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/notifications/subscribe': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Subscribe to push notifications */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Successfully subscribed */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                subscriptionId?: string;
              };
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/notifications/subscribe/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Unsubscribe from push notifications */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Subscription ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully unsubscribed */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/notifications/templates': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get notification templates (admin only) */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of notification templates */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Forbidden - Admin only */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/notifications/from-template': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create notification from template (admin only) */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Notification created from template */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Forbidden - Admin only */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Template not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/plans': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all available plans
     * @description Retrieve all subscription plans with their features. Public endpoint - no authentication required.
     */
    get: {
      parameters: {
        query?: {
          /** @description Include inactive plans in the response */
          includeInactive?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of plans retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
              data?: {
                id?: number;
                code?: string;
                name?: string;
                description?: string;
                basePrice?: number;
                maxEmployees?: number;
                maxAdmins?: number;
                maxStorageGb?: number;
                isActive?: boolean;
                features?: Record<string, never>[];
              }[];
              meta?: {
                /** Format: date-time */
                timestamp?: string;
                /** @example 2.0 */
                version?: string;
              };
            };
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/plans/current': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get current tenant plan
     * @description Retrieve the current subscription plan for the authenticated tenant including details, features, addons, and costs
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Current plan retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                plan?: Record<string, never>;
                addons?: unknown[];
                costs?: Record<string, never>;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description No active plan found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/plans/addons': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get tenant addons
     * @description Retrieve current addons for the authenticated tenant
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Addons retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                employees?: number;
                admins?: number;
                storageGb?: number;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Update tenant addons
     * @description Update addon quantities for the authenticated tenant
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            employees?: number;
            admins?: number;
            storageGb?: number;
          };
        };
      };
      responses: {
        /** @description Addons updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                employees?: number;
                admins?: number;
                storageGb?: number;
              };
              meta?: {
                /** @example Addons updated successfully */
                message?: string;
              };
            };
          };
        };
        /** @description Validation error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Admin access required */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/plans/costs': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Calculate tenant costs
     * @description Calculate current monthly costs for the authenticated tenant
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Costs calculated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                basePlanCost?: number;
                addonCosts?: {
                  employees?: number;
                  admins?: number;
                  storage?: number;
                };
                totalMonthlyCost?: number;
                /** @example EUR */
                currency?: string;
              };
            };
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/plans/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get plan by ID
     * @description Retrieve a specific plan by its ID
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Plan ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Plan retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                id?: number;
                code?: string;
                name?: string;
                basePrice?: number;
                features?: Record<string, never>[];
              };
            };
          };
        };
        /** @description Invalid plan ID */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Plan not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/plans/{id}/features': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get plan features
     * @description Retrieve all features included in a specific plan
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Plan ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Features retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                planId?: number;
                featureId?: number;
                featureCode?: string;
                featureName?: string;
                isIncluded?: boolean;
              }[];
            };
          };
        };
        /** @description Invalid plan ID */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/plans/{id}/upgrade': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Upgrade or downgrade plan
     * @description Change the subscription plan for the authenticated tenant
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Target plan ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description Code of the new plan */
            newPlanCode: string;
            /**
             * Format: date-time
             * @description When the change should take effect
             */
            effectiveDate?: string;
          };
        };
      };
      responses: {
        /** @description Plan upgraded successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              /** @description Updated plan information */
              data?: Record<string, never>;
              meta?: {
                /** @example Plan changed successfully */
                message?: string;
              };
            };
          };
        };
        /** @description Invalid request or validation error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Admin access required */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Server error or upgrade failed */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/reports/overview': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get company overview report
     * @description Get high-level KPIs and metrics for the entire company
     */
    get: {
      parameters: {
        query?: {
          /** @description Start date for the report (defaults to 30 days ago) */
          dateFrom?: string;
          /** @description End date for the report (defaults to today) */
          dateTo?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Overview report retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                employees?: {
                  total?: number;
                  active?: number;
                  newThisMonth?: number;
                };
                departments?: {
                  total?: number;
                  avgEmployeesPerDept?: number;
                };
                shifts?: {
                  totalScheduled?: number;
                  overtimeHours?: number;
                  coverageRate?: number;
                };
                kvp?: {
                  totalSuggestions?: number;
                  implemented?: number;
                  totalSavings?: number;
                  avgROI?: number;
                };
                surveys?: {
                  active?: number;
                  avgResponseRate?: number;
                };
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/reports/employees': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get employee analytics report
     * @description Get detailed employee metrics and trends
     */
    get: {
      parameters: {
        query?: {
          dateFrom?: string;
          dateTo?: string;
          /** @description Filter by department */
          departmentId?: number;
          /** @description Filter by team */
          teamId?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Employee report retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                headcount?: {
                  trend?: {
                    date?: string;
                    count?: number;
                  }[];
                };
                attendance?: {
                  avgRate?: number;
                  absences?: number;
                };
                performance?: {
                  kvpParticipation?: number;
                  avgShiftCompletion?: number;
                };
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/reports/departments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get department analytics report
     * @description Get performance metrics by department
     */
    get: {
      parameters: {
        query?: {
          dateFrom?: string;
          dateTo?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Department report retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                departmentId?: number;
                departmentName?: string;
                metrics?: {
                  employees?: number;
                  teams?: number;
                  kvpSuggestions?: number;
                  shiftCoverage?: number;
                  avgOvertime?: number;
                };
              }[];
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/reports/shifts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get shift analytics report
     * @description Get detailed shift coverage and overtime analytics
     */
    get: {
      parameters: {
        query?: {
          dateFrom?: string;
          dateTo?: string;
          departmentId?: number;
          teamId?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Shift report retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                totalShifts?: number;
                coverage?: {
                  scheduled?: number;
                  filled?: number;
                  rate?: number;
                };
                overtime?: {
                  totalHours?: number;
                  totalCost?: number;
                  byDepartment?: Record<string, never>[];
                };
                patterns?: {
                  peakHours?: string[];
                  understaffedShifts?: number;
                };
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/reports/kvp': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get KVP ROI report
     * @description Get return on investment analysis for KVP suggestions
     */
    get: {
      parameters: {
        query?: {
          dateFrom?: string;
          dateTo?: string;
          /** @description Filter by KVP category */
          categoryId?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description KVP report retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                summary?: {
                  totalSuggestions?: number;
                  implemented?: number;
                  totalCost?: number;
                  totalSavings?: number;
                  roi?: number;
                };
                byCategory?: {
                  categoryId?: number;
                  categoryName?: string;
                  suggestions?: number;
                  implemented?: number;
                  avgSavings?: number;
                }[];
                topPerformers?: {
                  userId?: number;
                  name?: string;
                  suggestions?: number;
                  totalSavings?: number;
                }[];
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/reports/attendance': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get attendance report
     * @description Get detailed attendance and absence analytics
     */
    get: {
      parameters: {
        query: {
          dateFrom: string;
          dateTo: string;
          departmentId?: number;
          teamId?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Attendance report retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                summary?: {
                  avgAttendanceRate?: number;
                  totalAbsences?: number;
                  totalLateArrivals?: number;
                };
                byEmployee?: {
                  userId?: number;
                  name?: string;
                  attendanceRate?: number;
                  absences?: number;
                  lateArrivals?: number;
                }[];
                trends?: {
                  daily?: {
                    date?: string;
                    rate?: number;
                  }[];
                };
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/reports/compliance': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get compliance report
     * @description Get labor law compliance metrics (working hours, breaks, etc.)
     */
    get: {
      parameters: {
        query: {
          dateFrom: string;
          dateTo: string;
          departmentId?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Compliance report retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                violations?: {
                  total?: number;
                  byType?: {
                    maxWorkingHours?: number;
                    missingBreaks?: number;
                    insufficientRest?: number;
                  };
                };
                riskEmployees?: {
                  userId?: number;
                  name?: string;
                  violations?: number;
                  issues?: string[];
                }[];
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/reports/custom': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Generate custom report
     * @description Build a custom report with selected metrics and filters
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            name: string;
            description?: string;
            metrics: ('employees' | 'departments' | 'shifts' | 'kvp' | 'attendance' | 'compliance')[];
            /** Format: date */
            dateFrom: string;
            /** Format: date */
            dateTo: string;
            filters?: {
              departmentIds?: number[];
              teamIds?: number[];
            };
            /** @enum {string} */
            groupBy?: 'department' | 'team' | 'week' | 'month';
          };
        };
      };
      responses: {
        /** @description Custom report generated successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: {
                reportId?: string;
                name?: string;
                /** Format: date-time */
                generatedAt?: string;
                /** @description Dynamic report data based on selected metrics */
                data?: Record<string, never>;
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/reports/export/{type}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Export report
     * @description Export any report as PDF, Excel or CSV
     */
    get: {
      parameters: {
        query: {
          format: 'pdf' | 'excel' | 'csv';
          dateFrom?: string;
          dateTo?: string;
          departmentId?: number;
          teamId?: number;
        };
        header?: never;
        path: {
          type: 'overview' | 'employees' | 'departments' | 'shifts' | 'kvp' | 'attendance' | 'compliance';
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Report exported successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/pdf': string;
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': string;
            'text/csv': string;
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/role-switch/to-employee': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Switch to employee view
     * @description Allows admin and root users to switch their view to employee mode
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully switched to employee view */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Insufficient permissions */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/role-switch/to-original': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Switch back to original role
     * @description Switch back from employee view to original role (admin/root)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully switched back to original role */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Insufficient permissions */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/role-switch/root-to-admin': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Switch root to admin view
     * @description Allows root users to switch their view to admin mode
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully switched to admin view */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Only root users can use this endpoint */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/role-switch/status': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get role switch status
     * @description Get current role switch status and permissions
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Current role switch status */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/roles': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all available roles
     * @description Get a list of all available roles in the system
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Roles retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
              data?: {
                /** @enum {string} */
                id?: 'admin' | 'employee' | 'root';
                /** @example Administrator */
                name?: string;
                /** @example Tenant administrator with full access within their tenant */
                description?: string;
                /** @example 50 */
                level?: number;
                /** @example [
                 *       "users.manage",
                 *       "departments.manage"
                 *     ] */
                permissions?: string[];
              }[];
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/roles/hierarchy': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get role hierarchy
     * @description Get the hierarchy of roles showing which roles can manage others
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Role hierarchy retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                hierarchy?: {
                  /** @description Reference removed due to missing definition */
                  role?: Record<string, never>;
                  canManage?: ('admin' | 'employee' | 'root')[];
                }[];
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/roles/assignable': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get assignable roles
     * @description Get roles that the current user can assign to others
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Assignable roles retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: Record<string, never>[];
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/roles/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a specific role
     * @description Get details of a specific role by ID
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Role ID */
          id: 'admin' | 'employee' | 'root';
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Role retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/roles/check': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Check user role
     * @description Check if a user has a specific role (admin/root only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description User ID to check */
            userId: number;
            /**
             * @description Role to check for
             * @enum {string}
             */
            requiredRole: 'admin' | 'employee' | 'root';
          };
        };
      };
      responses: {
        /** @description Role check completed */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              success?: boolean;
              data?: {
                /** @description Whether user has the exact role */
                hasRole?: boolean;
                /**
                 * @description User's actual role
                 * @enum {string}
                 */
                userRole?: 'admin' | 'employee' | 'root';
                /**
                 * @description The role that was checked
                 * @enum {string}
                 */
                requiredRole?: 'admin' | 'employee' | 'root';
                /** @description Whether user has equal or higher access level */
                hasAccess?: boolean;
              };
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/root/admins': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all admin users */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of admin users */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              admins?: Record<string, never>[];
            };
          };
        };
      };
    };
    put?: never;
    /** Create new admin user */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Admin created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Username or email already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/root/admins/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get admin user by ID */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Admin user details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Admin not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Update admin user */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Admin updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Admin not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /** Delete admin user */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Admin deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Admin not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/root/admins/{id}/logs': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get admin activity logs */
    get: {
      parameters: {
        query?: {
          days?: number;
        };
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of admin logs */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Admin not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/root/tenants': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all tenants (super admin only) */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of all tenants */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/root/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all root users */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of root users */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Create new root user */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Root user created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Email already in use */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/root/users/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get root user by ID */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Root user details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Root user not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Update root user */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Root user updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Root user not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /** Delete root user */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Root user deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Cannot delete yourself or last root user */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Root user not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/root/dashboard': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get dashboard statistics */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Dashboard statistics */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/root/storage': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get storage information */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Storage information and usage */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Tenant not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/root/tenant/deletion': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Request tenant deletion */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            reason?: string;
          };
        };
      };
      responses: {
        /** @description Deletion requested successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Insufficient root users */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/root/tenant/deletion-status': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get current tenant deletion status */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Deletion status */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description No active deletion found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/root/tenant/cancel-deletion': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Cancel tenant deletion */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Deletion cancelled successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description No active deletion found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/root/deletion-approvals': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all deletion requests */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of all deletion requests */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/root/deletion-approvals/pending': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get pending deletion approvals */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of pending approvals */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/root/deletion-approvals/{queueId}/approve': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Approve deletion request */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          queueId: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            comment?: string;
          };
        };
      };
      responses: {
        /** @description Deletion approved */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/root/deletion-approvals/{queueId}/reject': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Reject deletion request */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          queueId: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            reason: string;
          };
        };
      };
      responses: {
        /** @description Deletion rejected */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reason required */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/root/deletion-queue/{queueId}/emergency-stop': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Emergency stop deletion */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          queueId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Emergency stop activated */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/root/tenant/deletion-dry-run': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Perform deletion dry run */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Dry run report */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/settings/system': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all system settings
     * @description Retrieve all system settings (admin/root only)
     */
    get: {
      parameters: {
        query?: {
          category?: 'general' | 'appearance' | 'notifications' | 'security' | 'workflow' | 'integration' | 'other';
          is_public?: boolean;
          search?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Settings retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Access denied */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Create system setting
     * @description Create a new system setting (root only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            setting_key: string;
            setting_value: Record<string, never>;
            /** @enum {string} */
            value_type?: 'string' | 'number' | 'boolean' | 'json';
            category?: string;
            description?: string;
            is_public?: boolean;
          };
        };
      };
      responses: {
        /** @description Setting created successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Access denied */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/settings/system/{key}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get single system setting
     * @description Retrieve a specific system setting by key
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          key: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Setting retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Setting not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Update system setting
     * @description Update an existing system setting (root only)
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          key: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            setting_value: Record<string, never>;
            /** @enum {string} */
            value_type?: 'string' | 'number' | 'boolean' | 'json';
            category?: string;
            description?: string;
            is_public?: boolean;
          };
        };
      };
      responses: {
        /** @description Setting updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Access denied */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /**
     * Delete system setting
     * @description Delete a system setting (root only)
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          key: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Setting deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Access denied */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Setting not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/settings/tenant': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all tenant settings
     * @description Retrieve all settings for the current tenant
     */
    get: {
      parameters: {
        query?: {
          category?: 'general' | 'appearance' | 'notifications' | 'security' | 'workflow' | 'integration' | 'other';
          search?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Settings retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Create tenant setting
     * @description Create a new tenant setting (admin/root only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            setting_key: string;
            setting_value: Record<string, never>;
            /** @enum {string} */
            value_type?: 'string' | 'number' | 'boolean' | 'json';
            category?: string;
          };
        };
      };
      responses: {
        /** @description Setting created successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Access denied */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/settings/tenant/{key}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get single tenant setting
     * @description Retrieve a specific tenant setting by key
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          key: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Setting retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Setting not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Update tenant setting
     * @description Update an existing tenant setting (admin/root only)
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          key: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            setting_value: Record<string, never>;
            /** @enum {string} */
            value_type?: 'string' | 'number' | 'boolean' | 'json';
            category?: string;
          };
        };
      };
      responses: {
        /** @description Setting updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Access denied */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /**
     * Delete tenant setting
     * @description Delete a tenant setting (admin/root only)
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          key: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Setting deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Access denied */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Setting not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/settings/user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all user settings
     * @description Retrieve all settings for the current user
     */
    get: {
      parameters: {
        query?: {
          category?: 'general' | 'appearance' | 'notifications' | 'security' | 'workflow' | 'integration' | 'other';
          search?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Settings retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Create user setting
     * @description Create a new user setting
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            setting_key: string;
            setting_value: Record<string, never>;
            /** @enum {string} */
            value_type?: 'string' | 'number' | 'boolean' | 'json';
            category?: string;
          };
        };
      };
      responses: {
        /** @description Setting created successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/settings/user/{key}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get single user setting
     * @description Retrieve a specific user setting by key
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          key: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Setting retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Setting not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Update user setting
     * @description Update an existing user setting
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          key: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            setting_value: Record<string, never>;
            /** @enum {string} */
            value_type?: 'string' | 'number' | 'boolean' | 'json';
            category?: string;
          };
        };
      };
      responses: {
        /** @description Setting updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /**
     * Delete user setting
     * @description Delete a user setting
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          key: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Setting deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Setting not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/settings/admin/users/{userId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get another user's settings
     * @description Retrieve settings for a specific user (admin/root only)
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          userId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Settings retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Access denied */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/settings/categories': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get settings categories
     * @description Retrieve all available settings categories
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Categories retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/settings/bulk': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Bulk update settings
     * @description Update multiple settings at once
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @enum {string} */
            type: 'system' | 'tenant' | 'user';
            settings: {
              setting_key: string;
              setting_value: Record<string, never>;
              /** @enum {string} */
              value_type?: 'string' | 'number' | 'boolean' | 'json';
              category?: string;
            }[];
          };
        };
      };
      responses: {
        /** @description Settings updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/shifts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List shifts */
    get: {
      parameters: {
        query?: {
          /** @description Filter by specific date */
          date?: string;
          /** @description Filter by start date */
          startDate?: string;
          /** @description Filter by end date */
          endDate?: string;
          /** @description Filter by user ID */
          userId?: number;
          /** @description Filter by department ID */
          departmentId?: number;
          /** @description Filter by status */
          status?: 'planned' | 'confirmed' | 'in_progress' | 'completed' | 'cancelled';
          /** @description Filter by type */
          type?: 'regular' | 'overtime' | 'standby' | 'vacation' | 'sick' | 'holiday';
          page?: number;
          limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Shifts retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    put?: never;
    /** Create new shift */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Shift created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/shifts/templates': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List shift templates */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Templates retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    put?: never;
    /** Create shift template */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Template created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/shifts/templates/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get template by ID */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Template ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Template retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Template not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Update shift template */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Template ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Template updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Template not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /** Delete shift template */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Template ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Template deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Template not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/shifts/swap-requests': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List swap requests */
    get: {
      parameters: {
        query?: {
          /** @description Filter by user ID */
          userId?: number;
          /** @description Filter by status */
          status?: 'pending' | 'approved' | 'rejected' | 'cancelled';
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Swap requests retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    put?: never;
    /** Create swap request */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Swap request created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description You can only request swaps for your own shifts */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Shift not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/shifts/swap-requests/{id}/status': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Update swap request status */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Swap request ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @enum {string} */
            status: 'approved' | 'rejected' | 'cancelled';
          };
        };
      };
      responses: {
        /** @description Status updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Swap request not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/shifts/overtime': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get overtime report */
    get: {
      parameters: {
        query: {
          /** @description User ID (defaults to current user) */
          userId?: number;
          /** @description Start date for report */
          startDate: string;
          /** @description End date for report */
          endDate: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Overtime report retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Invalid date range */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/shifts/export': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Export shifts */
    get: {
      parameters: {
        query: {
          /** @description Start date for export */
          startDate: string;
          /** @description End date for export */
          endDate: string;
          /** @description Filter by department ID */
          departmentId?: number;
          /** @description Filter by team ID */
          teamId?: number;
          /** @description Filter by user ID */
          userId?: number;
          /** @description Export format */
          format?: 'csv' | 'excel';
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Export generated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/csv': string;
          };
        };
        /** @description Excel export not yet implemented */
        501: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/shifts/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get shift by ID */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Shift ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Shift retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Shift not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Update shift */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Shift ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Shift updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Shift not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /** Delete shift */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Shift ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Shift deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Shift not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/signup': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Register a new tenant
     * @description Register a new company with an admin user account
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * @description Company name
             * @example Acme Corporation
             */
            companyName: string;
            /**
             * @description Unique subdomain for the tenant
             * @example acme-corp
             */
            subdomain: string;
            /**
             * Format: email
             * @description Company contact email
             * @example contact@acme.com
             */
            email: string;
            /**
             * @description Phone number with country code
             * @example 491234567890
             */
            phone: string;
            /** @description Company address */
            address?: string;
            /**
             * Format: email
             * @description Admin user email
             * @example admin@acme.com
             */
            adminEmail: string;
            /**
             * Format: password
             * @description Admin user password
             */
            adminPassword: string;
            /** @description Admin user first name */
            adminFirstName: string;
            /** @description Admin user last name */
            adminLastName: string;
            /**
             * @description Selected subscription plan
             * @default basic
             * @enum {string}
             */
            selectedPlan?: 'basic' | 'professional' | 'enterprise';
          };
        };
      };
      responses: {
        /** @description Registration successful */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
              data?: {
                /** @example 123 */
                tenantId?: number;
                /** @example 456 */
                userId?: number;
                /** @example acme-corp */
                subdomain?: string;
                /**
                 * Format: date-time
                 * @example 2025-08-17T00:00:00.000Z
                 */
                trialEndsAt?: string;
                /** @example Registration successful! You can now log in. */
                message?: string;
              };
            };
          };
        };
        /** @description Bad request - validation error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Conflict - subdomain already taken */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/signup/check-subdomain/{subdomain}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Check subdomain availability
     * @description Check if a subdomain is available for registration
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description Subdomain to check
           * @example acme-corp
           */
          subdomain: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Subdomain availability check result */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example true */
              success?: boolean;
              data?: {
                /**
                 * @description Whether the subdomain is available
                 * @example true
                 */
                available?: boolean;
                /**
                 * @description The subdomain that was checked
                 * @example acme-corp
                 */
                subdomain?: string;
                /** @description Error message if subdomain is invalid */
                error?: string;
              };
            };
          };
        };
        /** @description Bad request - invalid subdomain format */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/surveys': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List surveys based on user role and permissions
     * @description Returns surveys based on user role:
     *     - Root: All surveys
     *     - Admin: Surveys in their departments
     *     - Employee: Assigned surveys only
     *
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter by survey status */
          status?: 'draft' | 'active' | 'closed';
          /** @description Page number */
          page?: number;
          /** @description Items per page */
          limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Surveys retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: Record<string, never>[];
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Create a new survey
     * @description Create a new survey with questions and assignments (admin/root only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Survey created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/surveys/templates': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get available survey templates
     * @description Retrieve all available survey templates for the tenant
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Templates retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: Record<string, never>[];
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/surveys/templates/{templateId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create survey from template
     * @description Create a new survey based on an existing template
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Template ID */
          templateId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Survey created successfully from template */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Template not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/surveys/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get survey by ID
     * @description Retrieve a specific survey with all questions and assignments
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Survey ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Survey retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Update a survey
     * @description Update an existing survey (admin/root only, cannot update if responses exist)
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Survey ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Survey updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Cannot update survey with existing responses */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    post?: never;
    /**
     * Delete a survey
     * @description Delete a survey (admin/root only, cannot delete if responses exist)
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Survey ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Survey deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: Record<string, never>;
              /** @example Survey deleted successfully */
              message?: string;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Cannot delete survey with existing responses */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/surveys/{id}/statistics': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get survey statistics and response analytics
     * @description Get detailed statistics and analytics for survey responses (admin/root only)
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Survey ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Statistics retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/teams': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List all teams */
    get: {
      parameters: {
        query?: {
          /** @description Filter by department ID */
          departmentId?: number;
          /** @description Search teams by name or description */
          search?: string;
          /** @description Include member count in response */
          includeMembers?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of teams */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Create new team */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Team created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/teams/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get team by ID */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Team ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Team details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Update team */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Team ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      responses: {
        /** @description Team updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /** Delete team */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Team ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Team deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Cannot delete team with members */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/teams/{id}/members': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get team members */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Team ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of team members */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Add member to team */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Team ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description User ID to add to team */
            userId: number;
          };
        };
      };
      responses: {
        /** @description Member added successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Invalid user ID or user already in team */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/teams/{id}/members/{userId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Remove member from team */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Team ID */
          id: number;
          /** @description User ID to remove */
          userId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Member removed successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description User is not a member of this team */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/teams/{id}/machines': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get team machines */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Team ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Team machines retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              id?: number;
              name?: string;
              serial_number?: string;
              status?: string;
              is_primary?: boolean;
              /** Format: date-time */
              assigned_at?: string;
            }[];
          };
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Add machine to team */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Team ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description Machine ID to add to team */
            machineId: number;
          };
        };
      };
      responses: {
        /** @description Machine added to team successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Machine already assigned to this team */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/teams/{id}/machines/{machineId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Remove machine from team */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Team ID */
          id: number;
          /** @description Machine ID to remove */
          machineId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Machine removed successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List all users
     * @description Get a paginated list of users with optional filters (admin only)
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter by user role */
          role?: 'employee' | 'admin' | 'root';
          /** @description Filter by active status */
          isActive?: boolean;
          /** @description Filter by archived status */
          isArchived?: boolean;
          /** @description Sort field */
          sortBy?: 'created_at' | 'updated_at' | 'last_name' | 'email';
          /** @description Sort order */
          sortOrder?: 'asc' | 'desc';
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully retrieved users list */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: Record<string, never>[];
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Create new user
     * @description Create a new user account (admin only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * Format: email
             * @example newuser@example.com
             */
            email: string;
            /**
             * Format: password
             * @example SecurePass123!
             */
            password: string;
            /** @example John */
            firstName: string;
            /** @example Doe */
            lastName: string;
            /**
             * @example employee
             * @enum {string}
             */
            role: 'employee' | 'admin';
            /**
             * @description Optional employee number (auto-generated if not provided)
             * @example EMP001
             */
            employeeNumber?: string;
            /** @example 1234567890 */
            phone?: string;
            /** @example Software Developer */
            position?: string;
            /** @example 1 */
            departmentId?: number;
            /** @example 1 */
            teamId?: number;
            /** @example 123 Main St, City */
            address?: string;
            /** @example Jane Doe */
            emergencyContact?: string;
            /** @example 987654321 */
            emergencyPhone?: string;
          };
        };
      };
      responses: {
        /** @description User created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Email already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/users/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get current user
     * @description Get the profile of the currently authenticated user
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully retrieved user profile */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/users/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user by ID
     * @description Get a specific user by their ID (admin only)
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description User ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfully retrieved user */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Update user
     * @description Update user information (admin only)
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description User ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** Format: email */
            email?: string;
            firstName?: string;
            lastName?: string;
            /** @enum {string} */
            role?: 'employee' | 'admin';
            phone?: string;
            position?: string;
            departmentId?: number;
            teamId?: number;
            address?: string;
            emergencyContact?: string;
            emergencyPhone?: string;
            isActive?: boolean;
          };
        };
      };
      responses: {
        /** @description User updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /**
     * Delete user
     * @description Permanently delete a user (admin only)
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description User ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: Record<string, never>;
              /** @example User deleted successfully */
              message?: string;
            };
          };
        };
        /** @description Cannot delete your own account */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/users/me/profile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Update profile
     * @description Update current user's profile (limited fields)
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            firstName?: string;
            lastName?: string;
            phone?: string;
            address?: string;
            emergencyContact?: string;
            emergencyPhone?: string;
          };
        };
      };
      responses: {
        /** @description Profile updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/users/me/password': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Change password
     * @description Change current user's password
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * Format: password
             * @description Current password
             */
            currentPassword: string;
            /**
             * Format: password
             * @description New password (min 8 chars, must contain uppercase, lowercase, number and special char)
             */
            newPassword: string;
          };
        };
      };
      responses: {
        /** @description Password changed successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: Record<string, never>;
              /** @example Password changed successfully */
              message?: string;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Invalid current password */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/users/{id}/archive': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Archive user
     * @description Archive a user account (admin only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description User ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User archived successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: Record<string, never>;
              /** @example User archived successfully */
              message?: string;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/users/{id}/unarchive': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Unarchive user
     * @description Unarchive a user account (admin only)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description User ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User unarchived successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: Record<string, never>;
              /** @example User unarchived successfully */
              message?: string;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/users/me/profile-picture': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get profile picture
     * @description Get the current user's profile picture
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Profile picture file */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'image/jpeg': string;
            'image/png': string;
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Profile picture not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    put?: never;
    /**
     * Upload profile picture
     * @description Upload a new profile picture for the current user
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'multipart/form-data': {
            /**
             * Format: binary
             * @description Image file (JPEG, PNG, max 5MB)
             */
            profilePicture: string;
          };
        };
      };
      responses: {
        /** @description Profile picture uploaded successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Invalid file or file too large */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Delete profile picture
     * @description Delete the current user's profile picture
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Profile picture deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              data?: Record<string, never>;
              /** @example Profile picture deleted successfully */
              message?: string;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description No profile picture to delete */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/users/{id}/availability': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Update availability
     * @description Update user's availability status (admin only)
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description User ID */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * @description Current availability status
             * @example vacation
             * @enum {string}
             */
            availabilityStatus: 'available' | 'vacation' | 'sick' | 'training' | 'business_trip';
            /**
             * Format: date
             * @description Start date of unavailability
             * @example 2025-08-01
             */
            availabilityStart?: string;
            /**
             * Format: date
             * @description End date of unavailability
             * @example 2025-08-15
             */
            availabilityEnd?: string;
            /**
             * @description Additional notes about availability
             * @example Summer vacation
             */
            availabilityNotes?: string;
          };
        };
      };
      responses: {
        /** @description Availability updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never> & {
              /** @description Reference removed due to missing definition */
              data?: Record<string, never>;
            };
          };
        };
        /** @description Reference removed due to missing definition */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Reference removed due to missing definition */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Error: {
      /** @description Error message */
      error?: string;
      /** @description Error message (alternative field) */
      message?: string;
      /** @description Error code */
      code?: string;
      /** @description Additional error details */
      details?: Record<string, never>;
    };
    Success: {
      /** @example true */
      success?: boolean;
      /** @description Success message */
      message?: string;
      /** @description Response data */
      data?: Record<string, never>;
    };
    PaginationInfo: {
      /** @example 1 */
      currentPage?: number;
      /** @example 10 */
      totalPages?: number;
      /** @example 100 */
      totalItems?: number;
      /** @example 10 */
      itemsPerPage?: number;
      /** @example true */
      hasNext?: boolean;
      /** @example false */
      hasPrev?: boolean;
    };
    User: {
      /** @description User ID */
      id: number;
      /** @description Username */
      username: string;
      /**
       * Format: email
       * @description Email address
       */
      email: string;
      /** @description First name */
      first_name?: string;
      /** @description Last name */
      last_name?: string;
      /**
       * @description User role
       * @enum {string}
       */
      role: 'root' | 'admin' | 'employee';
      /** @description Tenant ID */
      tenant_id: number;
      /** @description Department ID */
      department_id?: number | null;
      /** @description Whether the user is active */
      is_active?: boolean;
      /**
       * Format: date-time
       * @description Creation timestamp
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description Last update timestamp
       */
      updated_at?: string;
    };
    LoginRequest: {
      /**
       * @description Username for authentication
       * @example admin
       */
      username: string;
      /**
       * Format: password
       * @description User password
       * @example SecurePass123!
       */
      password: string;
      /**
       * @description Browser fingerprint for session isolation
       * @example abc123def456
       */
      fingerprint?: string;
    };
    LoginResponse: {
      /** @example Login erfolgreich */
      message?: string;
      /** @description JWT token (also set as httpOnly cookie) */
      token?: string;
      /** @enum {string} */
      role?: 'root' | 'admin' | 'employee';
      user?: components['schemas']['User'];
    };
    BlackboardEntry: {
      /** @description Entry ID */
      id: number;
      /** @description Entry title */
      title: string;
      /** @description Entry content */
      content: string;
      /**
       * @description Entry priority
       * @enum {string}
       */
      priority: 'low' | 'normal' | 'high' | 'urgent';
      /**
       * @description Visibility scope
       * @enum {string}
       */
      visibility: 'company' | 'department' | 'team' | 'personal';
      /**
       * @description Entry status
       * @enum {string}
       */
      status: 'active' | 'archived';
      /** @description User ID who created the entry */
      created_by: number;
      /** @description Tenant ID */
      tenant_id: number;
      /** @description Department ID (for department visibility) */
      department_id?: number | null;
      /** @description Team ID (for team visibility) */
      team_id?: number | null;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** @description Whether current user can edit this entry */
      can_edit?: boolean;
      /** @description Whether current user can delete this entry */
      can_delete?: boolean;
      /** @description Whether current user has read this entry */
      is_read?: boolean;
    };
    KvpSuggestion: {
      /** @description Suggestion ID */
      id: number;
      /** @description Suggestion title */
      title: string;
      /** @description Detailed description */
      description: string;
      /**
       * @description Suggestion category
       * @enum {string}
       */
      category: 'Sicherheit' | 'Produktivit√§t' | 'Qualit√§t' | 'Kosten' | 'Umwelt' | 'Sonstiges';
      /**
       * @description Current status
       * @enum {string}
       */
      status: 'pending' | 'approved' | 'implemented' | 'rejected';
      /** @description Whether the suggestion is shared publicly */
      is_shared?: boolean;
      /** @description User ID who created the suggestion */
      created_by: number;
      /** @description Tenant ID */
      tenant_id: number;
      /** @description Estimated savings in EUR */
      potential_savings?: number | null;
      /**
       * @description Effort required to implement
       * @enum {string|null}
       */
      implementation_effort?: 'low' | 'medium' | 'high' | null;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** @description Number of comments */
      comment_count?: number;
      /** @description Number of attachments */
      attachment_count?: number;
    };
    CalendarEvent: {
      /** @description Event ID */
      id: number;
      /** @description Event title */
      title: string;
      /** @description Event description */
      description?: string | null;
      /**
       * Format: date-time
       * @description Event start date and time
       */
      start_date: string;
      /**
       * Format: date-time
       * @description Event end date and time
       */
      end_date: string;
      /** @description Whether this is an all-day event */
      all_day?: boolean;
      /** @description Event location */
      location?: string | null;
      /**
       * @description Event visibility scope
       * @enum {string}
       */
      visibility: 'company' | 'department' | 'team' | 'personal';
      /**
       * @description Event status
       * @enum {string}
       */
      status: 'active' | 'cancelled';
      /** @description User ID who created the event */
      created_by: number;
      /** @description Tenant ID */
      tenant_id: number;
      /** @description Department ID (for department events) */
      department_id?: number | null;
      /** @description Team ID (for team events) */
      team_id?: number | null;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** @description Whether current user can edit this event */
      can_edit?: boolean;
      /** @description Whether current user can delete this event */
      can_delete?: boolean;
    };
    ShiftTemplate: {
      /** @description Template ID */
      id: number;
      /** @description Template name */
      name: string;
      /**
       * Format: time
       * @description Shift start time (HH:mm)
       * @example 08:00
       */
      start_time: string;
      /**
       * Format: time
       * @description Shift end time (HH:mm)
       * @example 16:00
       */
      end_time: string;
      /**
       * @description Break duration in minutes
       * @example 30
       */
      break_duration?: number;
      /**
       * @description Number of required staff
       * @example 3
       */
      required_staff?: number;
      /** @description Template description */
      description?: string | null;
      /**
       * @description Display color (hex)
       * @example #4CAF50
       */
      color?: string | null;
      /** @description Whether template is active */
      is_active?: boolean;
      /** @description Tenant ID */
      tenant_id: number;
      /** Format: date-time */
      created_at?: string;
    };
    ShiftPlan: {
      /** @description Plan ID */
      id: number;
      /** @description Plan name */
      name: string;
      /**
       * Format: date
       * @description Plan start date
       */
      start_date: string;
      /**
       * Format: date
       * @description Plan end date
       */
      end_date: string;
      /** @description Department ID */
      department_id?: number | null;
      /** @description Team ID */
      team_id?: number | null;
      /** @description Plan description */
      description?: string | null;
      /**
       * @description Plan status
       * @enum {string}
       */
      status: 'draft' | 'published' | 'archived';
      /** @description Tenant ID */
      tenant_id: number;
      /** @description User ID who created the plan */
      created_by: number;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    Survey: {
      /** @description Survey ID */
      id: number;
      /** @description Survey title */
      title: string;
      /** @description Survey description */
      description?: string | null;
      /**
       * @description Survey status
       * @enum {string}
       */
      status: 'draft' | 'active' | 'closed';
      /**
       * Format: date
       * @description Survey start date
       */
      start_date?: string | null;
      /**
       * Format: date
       * @description Survey end date
       */
      end_date?: string | null;
      /** @description Whether responses are anonymous */
      is_anonymous?: boolean;
      /** @description Whether survey is mandatory */
      is_mandatory?: boolean;
      /** @description Survey questions */
      questions?: {
        id?: number;
        question?: string;
        /** @enum {string} */
        type?: 'text' | 'radio' | 'checkbox' | 'scale' | 'date';
        required?: boolean;
        options?: string[];
      }[];
      /** @description Number of responses */
      response_count?: number;
      /** @description User ID who created the survey */
      created_by: number;
      /** @description Tenant ID */
      tenant_id: number;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    Document: {
      /** @description Document ID */
      id: number;
      /** @description Document title */
      title: string;
      /** @description Document description */
      description?: string;
      /** @description Original filename */
      file_name: string;
      /** @description Server file path */
      file_path?: string;
      /** @description File size in bytes */
      file_size?: number;
      /** @description MIME type */
      file_type?: string;
      /**
       * @description Document category
       * @enum {string}
       */
      category: 'personal' | 'company' | 'department' | 'team' | 'payroll';
      /** @description Year (for payroll documents) */
      year?: number | null;
      /** @description Month (for payroll documents) */
      month?: number | null;
      /** @description User ID who uploaded the document */
      uploaded_by?: number;
      /** @description Target user (for personal documents) */
      target_user_id?: number | null;
      /** @description Target department */
      target_department_id?: number | null;
      /** @description Target team */
      target_team_id?: number | null;
      /** @description Tenant ID */
      tenant_id: number;
      /**
       * Format: date-time
       * @description Upload timestamp
       */
      created_at?: string;
      /** @description Whether the current user has read this document */
      is_read?: boolean;
    };
    Conversation: {
      /** @description Conversation ID */
      id: number;
      /** @description Conversation name (for group chats) */
      name?: string | null;
      /** @description Whether this is a group conversation */
      is_group: boolean;
      /** @description User ID who created the conversation */
      created_by: number;
      /**
       * Format: date-time
       * @description Creation timestamp
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Last activity timestamp
       */
      updated_at?: string;
      /** @description List of conversation participants */
      participants: {
        user_id?: number;
        username?: string;
        first_name?: string;
        last_name?: string;
        is_online?: boolean;
        /** Format: date-time */
        joined_at?: string;
      }[];
      /** @description Preview of the last message */
      last_message?: {
        id?: number;
        message?: string;
        sender_name?: string;
        /** Format: date-time */
        sent_at?: string;
      } | null;
      /** @description Number of unread messages for current user */
      unread_count?: number;
    };
    ChatMessage: {
      /** @description Message ID */
      id: number;
      /** @description Conversation ID */
      conversation_id: number;
      /** @description Sender user ID */
      sender_id: number;
      /** @description Sender display name */
      sender_name?: string;
      /** @description Message content */
      message: string;
      /** @description File attachment information */
      attachment?: {
        /** @description Attachment filename */
        filename?: string;
        /** @description Original filename */
        original_name?: string;
        /** @description File size in bytes */
        file_size?: number;
        /** @description MIME type */
        mime_type?: string;
      } | null;
      /**
       * Format: date-time
       * @description Message timestamp
       */
      sent_at: string;
      /** @description Whether the current user has read this message */
      is_read?: boolean;
      /**
       * Format: date-time
       * @description When the message was read
       */
      read_at?: string | null;
      /** @description Whether the message has been edited */
      is_edited?: boolean;
      /**
       * Format: date-time
       * @description When the message was edited
       */
      edited_at?: string | null;
    };
    Department: {
      /** @description Department ID */
      id: number;
      /** @description Department name */
      name: string;
      /** @description Department description */
      description?: string | null;
      /** @description User ID of department manager */
      manager_id?: number | null;
      /** @description Manager display name */
      manager_name?: string | null;
      /** @description Parent department ID */
      parent_id?: number | null;
      /** @description Parent department name */
      parent_name?: string | null;
      /** @description Physical location */
      location?: string | null;
      /** @description Cost center code */
      cost_center?: string | null;
      /** @description Number of employees in department */
      employee_count?: number;
      /** @description Tenant ID */
      tenant_id: number;
      /**
       * Format: date-time
       * @description Creation timestamp
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description Last update timestamp
       */
      updated_at?: string;
    };
    Team: {
      /** @description Team ID */
      id: number;
      /** @description Team name */
      name: string;
      /** @description Team description */
      description?: string | null;
      /** @description Department ID this team belongs to */
      department_id?: number | null;
      /** @description Department name */
      department_name?: string | null;
      /** @description User ID of team leader */
      leader_id?: number | null;
      /** @description Leader display name */
      leader_name?: string | null;
      /** @description Maximum team size */
      max_members?: number | null;
      /** @description Current number of team members */
      member_count?: number;
      /** @description Team location */
      location?: string | null;
      /** @description Team budget */
      budget?: number | null;
      /** @description Whether team is active */
      is_active: boolean;
      /** @description Team goals and objectives */
      goals?: string | null;
      /** @description Tenant ID */
      tenant_id: number;
      /**
       * Format: date-time
       * @description Creation timestamp
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description Last update timestamp
       */
      updated_at?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
