<!doctype html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Abteilungen & Teams</title>
    <link rel="stylesheet" href="/styles/breadcrumb-alignment.css" />
    <style>
      body {
        font-family: Arial, sans-serif;
        background-color: #f7f7f7;
        margin: 0;
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
      }
      .container {
        background-color: rgb(81, 80, 80);
        padding: 24px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 1000px;
        color: #f7f7f7;
        margin-top: -37px !important; /* Align first container with sidebar user-info-card */
      }
      h1,
      h2 {
        text-align: center;
        color: #1b8e01;
      }
      .tab-container {
        display: flex;
        border-bottom: 1px solid #ccc;
        margin-bottom: 20px;
      }
      .tab {
        padding: 10px 20px;
        cursor: pointer;
        background-color: #ddd;
        color: #333;
        border: none;
        margin-right: 5px;
        border-radius: 5px 5px 0 0;
      }
      .tab.active {
        background-color: #1b8e01;
        color: white;
      }
      .tab-content {
        display: none;
        background-color: #ffffff;
        padding: 24px;
        border-radius: 5px;
        color: #333;
        margin-bottom: 20px;
      }
      .tab-content.active {
        display: block;
      }
      .card {
        background-color: #f9f9f9;
        border-radius: 5px;
        padding: 15px;
        margin-bottom: 15px;
        border-left: 4px solid #1b8e01;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
      }
      .card-title {
        font-size: 18px;
        font-weight: bold;
        margin: 0;
      }
      .card-subtitle {
        color: #666;
        font-size: 14px;
        margin: 5px 0 0;
      }
      .card-body {
        margin-bottom: 10px;
      }
      .card-footer {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
      }
      .badge {
        display: inline-block;
        padding: 3px 7px;
        font-size: 12px;
        font-weight: bold;
        line-height: 1;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 10px;
        background-color: #6c757d;
        color: white;
        margin-right: 5px;
      }
      .badge-primary {
        background-color: #1b8e01;
      }
      .btn {
        padding: 8px 15px;
        border: none;
        border-radius: 5px;
        font-size: 14px;
        cursor: pointer;
        transition: background-color 0.3s;
      }
      .btn-primary {
        background-color: #1b8e01;
        color: white;
      }
      .btn-secondary {
        background-color: #6c757d;
        color: white;
      }
      .btn-danger {
        background-color: #dc3545;
        color: white;
      }
      .btn-sm {
        padding: 5px 10px;
        font-size: 12px;
      }
      .form-group {
        margin-bottom: 15px;
      }
      .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
      }
      .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-sizing: border-box;
      }
      .form-row {
        display: flex;
        gap: 15px;
        margin-bottom: 15px;
      }
      .form-row .form-group {
        flex: 1;
        margin-bottom: 0;
      }
      .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        backdrop-filter: blur(10px);
        justify-content: center;
        align-items: center;
        z-index: 1000;
      }
      .modal-content {
        background: rgba(255, 255, 255, 0.02);
        backdrop-filter: blur(20px) saturate(180%);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: var(--radius-md);
        box-shadow: var(--shadow-sm);
        padding: var(--spacing-lg);
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
        /* animation: fadeInUp 0.3s ease-out; */
      }
      .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: var(--spacing-lg);
        border-bottom: 1px solid var(--border-color);
        margin: calc(-1 * var(--spacing-lg)) calc(-1 * var(--spacing-lg)) var(--spacing-lg) calc(-1 * var(--spacing-lg));
      }
      .modal-title {
        font-size: 20px;
        font-weight: 600;
        color: var(--primary-color);
        margin: 0;
      }
      .modal-close {
        background: none;
        border: none;
        font-size: 24px;
        color: var(--text-secondary);
        cursor: pointer;
        padding: 0;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: var(--radius-sm);
        transition: all 0.2s ease;
      }

      .modal-close:hover {
        color: var(--text-primary);
        background: rgba(255, 255, 255, 0.1);
        cursor: pointer;
        background: none;
        border: none;
      }
      .team-member {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
      }
      .team-member-img {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        background-color: #1b8e01;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
        margin-right: 10px;
      }
      .team-member-info {
        flex-grow: 1;
      }
      .team-member-actions {
        margin-left: 10px;
      }
      .org-chart {
        overflow: auto;
        padding: 24px;
      }
      .org-node {
        position: relative;
        margin: 0 auto;
        width: 150px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        text-align: center;
        background-color: #f9f9f9;
      }
      .org-level {
        display: flex;
        justify-content: center;
        margin-top: 20px;
      }
      .org-branch {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 0 20px;
      }
      .org-connector {
        height: 20px;
        border-left: 2px solid #ddd;
      }
      .search-bar {
        margin-bottom: 15px;
        display: flex;
        gap: 10px;
      }
      .search-bar input {
        flex-grow: 1;
      }
      .back-btn {
        margin-top: 20px;
        width: 100%;
      }
      @media (max-width: 768px) {
        .form-row {
          flex-direction: column;
          gap: 0;
        }
        .container {
          margin: 10px;
          max-width: calc(100% - 20px);
        }
      }
    </style>
  </head>
  <body>
    <!-- Unified Navigation -->
    <div id="navigation-container"></div>

    <!-- Main Layout mit Sidebar -->
    <div class="layout-container">
      <!-- Main Content -->
      <main class="main-content">
        <!-- Breadcrumb -->
        <div id="breadcrumb-container"></div>

        <div class="container">
          <div class="tab-container">
            <button class="tab active" onclick="showTab('departments')">Abteilungen</button>
            <button class="tab" onclick="showTab('teams')">Teams</button>
            <button class="tab" onclick="showTab('org-structure')">Organisationsstruktur</button>
          </div>

          <!-- Abteilungen Tab -->
          <div id="departments" class="tab-content active">
            <div class="search-bar">
              <input type="text" id="department-search" class="form-control" placeholder="Abteilungen durchsuchen..." />
              <button class="btn btn-primary" onclick="showDepartmentModal()">Neue Abteilung</button>
            </div>

            <div id="departments-container">
              <!-- Wird dynamisch gefüllt -->
            </div>
          </div>

          <!-- Teams Tab -->
          <div id="teams" class="tab-content">
            <div class="search-bar">
              <input type="text" id="team-search" class="form-control" placeholder="Teams durchsuchen..." />
              <button class="btn btn-primary" onclick="showTeamModal()">Neues Team</button>
            </div>

            <div id="teams-container">
              <!-- Wird dynamisch gefüllt -->
            </div>
          </div>

          <!-- Organisationsstruktur Tab -->
          <div id="org-structure" class="tab-content">
            <div class="org-chart" id="org-chart-container">
              <!-- Wird dynamisch gefüllt -->
            </div>
          </div>

          <button class="btn btn-secondary back-btn" onclick="goBack()">Zurück zum Dashboard</button>
        </div>

        <!-- Modal für neue/bearbeiten Abteilung -->
        <div id="department-modal" class="modal">
          <div class="modal-content">
            <div class="modal-header">
              <h3 class="modal-title" id="department-modal-title">Neue Abteilung</h3>
              <button class="modal-close" onclick="hideDepartmentModal()">&times;</button>
            </div>

            <form id="department-form">
              <input type="hidden" id="department-id" name="id" />

              <div class="form-group">
                <label for="department-name">Name</label>
                <input type="text" id="department-name" name="name" class="form-control" required />
              </div>

              <div class="form-group">
                <label for="department-description">Beschreibung</label>
                <textarea id="department-description" name="description" class="form-control" rows="3"></textarea>
              </div>

              <div class="form-group">
                <label for="department-manager">Manager</label>
                <select id="department-manager" name="manager_id" class="form-control">
                  <option value="">Kein Manager</option>
                  <!-- Wird dynamisch gefüllt -->
                </select>
              </div>

              <div class="form-group">
                <label for="department-parent">Übergeordnete Abteilung</label>
                <select id="department-parent" name="parent_id" class="form-control">
                  <option value="">Keine übergeordnete Abteilung</option>
                  <!-- Wird dynamisch gefüllt -->
                </select>
              </div>

              <div class="form-group">
                <button type="submit" class="btn btn-primary">Speichern</button>
                <button type="button" class="btn btn-secondary" onclick="hideDepartmentModal()">Abbrechen</button>
              </div>
            </form>
          </div>
        </div>

        <!-- Modal für neues/bearbeiten Team -->
        <div id="team-modal" class="modal">
          <div class="modal-content">
            <div class="modal-header">
              <h3 class="modal-title" id="team-modal-title">Neues Team</h3>
              <button class="modal-close" onclick="hideTeamModal()">&times;</button>
            </div>

            <form id="team-form">
              <input type="hidden" id="team-id" name="id" />

              <div class="form-group">
                <label for="team-name">Name</label>
                <input type="text" id="team-name" name="name" class="form-control" required />
              </div>

              <div class="form-group">
                <label for="team-description">Beschreibung</label>
                <textarea id="team-description" name="description" class="form-control" rows="3"></textarea>
              </div>

              <div class="form-group">
                <label for="team-department">Abteilung</label>
                <select id="team-department" name="department_id" class="form-control">
                  <option value="">Keine Abteilung</option>
                  <!-- Wird dynamisch gefüllt -->
                </select>
              </div>

              <div class="form-group">
                <label for="team-leader">Teamleiter</label>
                <select id="team-leader" name="leader_id" class="form-control">
                  <option value="">Kein Teamleiter</option>
                  <!-- Wird dynamisch gefüllt -->
                </select>
              </div>

              <div class="form-group">
                <button type="submit" class="btn btn-primary">Speichern</button>
                <button type="button" class="btn btn-secondary" onclick="hideTeamModal()">Abbrechen</button>
              </div>
            </form>
          </div>
        </div>

        <!-- Modal für Team-Mitglieder -->
        <div id="team-members-modal" class="modal">
          <div class="modal-content">
            <div class="modal-header">
              <h3 class="modal-title" id="team-members-modal-title">Team-Mitglieder</h3>
              <button class="modal-close" onclick="hideTeamMembersModal()">&times;</button>
            </div>

            <div class="form-group">
              <label for="add-team-member">Mitarbeiter hinzufügen</label>
              <div class="form-row">
                <select id="add-team-member" class="form-control">
                  <option value="">Mitarbeiter auswählen</option>
                  <!-- Wird dynamisch gefüllt -->
                </select>
                <button type="button" class="btn btn-primary" onclick="addTeamMember()">Hinzufügen</button>
              </div>
            </div>

            <div id="team-members-container">
              <!-- Wird dynamisch gefüllt -->
            </div>

            <div class="form-group mt-3">
              <button type="button" class="btn btn-secondary" onclick="hideTeamMembersModal()">Schließen</button>
            </div>
          </div>
        </div>

        <script>
          let departments = [];
          let teams = [];
          let users = [];
          let currentTeamId = null;

          // Tab-Wechsel-Funktionalität
          function showTab(tabId) {
            // Alle Tabs und Inhalte deaktivieren
            document.querySelectorAll('.tab').forEach((tab) => {
              tab.classList.remove('active');
            });
            document.querySelectorAll('.tab-content').forEach((content) => {
              content.classList.remove('active');
            });

            // Ausgewählten Tab aktivieren
            document.querySelector(`.tab[onclick="showTab('${tabId}')"]`).classList.add('active');
            document.getElementById(tabId).classList.add('active');

            // Wenn Organisationsstruktur-Tab ausgewählt ist, Org-Chart rendern
            if (tabId === 'org-structure') {
              renderOrgChart();
            }
          }

          // Seite laden
          document.addEventListener('DOMContentLoaded', () => {
            loadDepartments();
            loadTeams();
            loadUsers();

            // Event-Listener für Formulare
            document.getElementById('department-form').addEventListener('submit', saveDepartment);
            document.getElementById('team-form').addEventListener('submit', saveTeam);

            // Event-Listener für Suchfelder
            document.getElementById('department-search').addEventListener('input', filterDepartments);
            document.getElementById('team-search').addEventListener('input', filterTeams);
          });

          // Abteilungen laden
          async function loadDepartments() {
            try {
              const response = await fetch('/departments', {
                headers: {
                  Authorization: `Bearer ${localStorage.getItem('token')}`,
                },
              });

              if (response.ok) {
                departments = await response.json();
                renderDepartments();
                populateDepartmentDropdowns();
              } else {
                console.error('Fehler beim Laden der Abteilungen');
              }
            } catch (error) {
              console.error('Fehler beim Laden der Abteilungen:', error);
            }
          }

          // Teams laden
          async function loadTeams() {
            try {
              const response = await fetch('/teams', {
                headers: {
                  Authorization: `Bearer ${localStorage.getItem('token')}`,
                },
              });

              if (response.ok) {
                teams = await response.json();
                renderTeams();
              } else {
                console.error('Fehler beim Laden der Teams');
              }
            } catch (error) {
              console.error('Fehler beim Laden der Teams:', error);
            }
          }

          // Benutzer laden
          async function loadUsers() {
            try {
              const response = await fetch('/users/search', {
                headers: {
                  Authorization: `Bearer ${localStorage.getItem('token')}`,
                },
              });

              if (response.ok) {
                const data = await response.json();
                users = data.users;
                populateUserDropdowns();
              } else {
                console.error('Fehler beim Laden der Benutzer');
              }
            } catch (error) {
              console.error('Fehler beim Laden der Benutzer:', error);
            }
          }

          // Abteilungen anzeigen
          function renderDepartments() {
            const container = document.getElementById('departments-container');
            container.innerHTML = '';

            if (departments.length === 0) {
              container.innerHTML = '<p style="text-align: center;">Keine Abteilungen gefunden</p>';
              return;
            }

            departments.forEach((dept) => {
              // Manager-Info
              let managerInfo = 'Kein Manager';
              if (dept.manager_id) {
                const manager = users.find((u) => u.id === dept.manager_id);
                if (manager) {
                  managerInfo = `${manager.first_name} ${manager.last_name}`;
                }
              }

              // Übergeordnete Abteilung
              let parentInfo = '';
              if (dept.parent_id) {
                const parent = departments.find((d) => d.id === dept.parent_id);
                if (parent) {
                  parentInfo = `<span class="badge badge-primary">${parent.name}</span>`;
                }
              }

              const card = document.createElement('div');
              card.className = 'card';
              card.innerHTML = `
                    <div class="card-header">
                        <div>
                            <h3 class="card-title">${dept.name}</h3>
                            <p class="card-subtitle">Manager: ${managerInfo} ${parentInfo}</p>
                        </div>
                        <div>
                            <span class="badge">${dept.employee_count || 0} Mitarbeiter</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <p>${dept.description || 'Keine Beschreibung'}</p>
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-secondary btn-sm" onclick="editDepartment(${dept.id})">Bearbeiten</button>
                        <button class="btn btn-danger btn-sm" onclick="deleteDepartment(${dept.id})">Löschen</button>
                        <button class="btn btn-primary btn-sm" onclick="viewDepartmentMembers(${dept.id})">Mitarbeiter anzeigen</button>
                    </div>
                `;

              container.appendChild(card);
            });
          }

          // Teams anzeigen
          function renderTeams() {
            const container = document.getElementById('teams-container');
            container.innerHTML = '';

            if (teams.length === 0) {
              container.innerHTML = '<p style="text-align: center;">Keine Teams gefunden</p>';
              return;
            }

            teams.forEach((team) => {
              // Teamleiter-Info
              let leaderInfo = 'Kein Teamleiter';
              if (team.leader_id) {
                const leader = users.find((u) => u.id === team.leader_id);
                if (leader) {
                  leaderInfo = `${leader.first_name} ${leader.last_name}`;
                }
              }

              // Abteilungs-Info
              let departmentInfo = '';
              if (team.department_id) {
                departmentInfo = `<span class="badge badge-primary">${team.department_name}</span>`;
              }

              const card = document.createElement('div');
              card.className = 'card';
              card.innerHTML = `
                    <div class="card-header">
                        <div>
                            <h3 class="card-title">${team.name}</h3>
                            <p class="card-subtitle">Teamleiter: ${leaderInfo} ${departmentInfo}</p>
                        </div>
                        <div>
                            <span class="badge">${team.member_count || 0} Mitglieder</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <p>${team.description || 'Keine Beschreibung'}</p>
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-secondary btn-sm" onclick="editTeam(${team.id})">Bearbeiten</button>
                        <button class="btn btn-danger btn-sm" onclick="deleteTeam(${team.id})">Löschen</button>
                        <button class="btn btn-primary btn-sm" onclick="manageTeamMembers(${team.id})">Mitglieder verwalten</button>
                    </div>
                `;

              container.appendChild(card);
            });
          }

          // Organisationsstruktur rendern
          function renderOrgChart() {
            const container = document.getElementById('org-chart-container');
            container.innerHTML = '';

            if (departments.length === 0) {
              container.innerHTML = '<p style="text-align: center;">Keine Abteilungen gefunden</p>';
              return;
            }

            // Top-Level-Abteilungen (ohne parent_id)
            const topLevelDepts = departments.filter((d) => !d.parent_id);

            if (topLevelDepts.length === 0) {
              container.innerHTML = '<p style="text-align: center;">Keine Top-Level-Abteilungen gefunden</p>';
              return;
            }

            // Erste Ebene erstellen
            const levelDiv = document.createElement('div');
            levelDiv.className = 'org-level';

            topLevelDepts.forEach((dept) => {
              const branchDiv = buildOrgBranch(dept);
              levelDiv.appendChild(branchDiv);
            });

            container.appendChild(levelDiv);
          }

          // Rekursive Funktion zum Aufbau der Organisationsstruktur
          function buildOrgBranch(department) {
            const branchDiv = document.createElement('div');
            branchDiv.className = 'org-branch';

            // Abteilungs-Knoten
            const nodeDiv = document.createElement('div');
            nodeDiv.className = 'org-node';
            nodeDiv.innerHTML = `
                <strong>${department.name}</strong>
                <br>
                <small>${department.manager_name || 'Kein Manager'}</small>
            `;
            branchDiv.appendChild(nodeDiv);

            // Untergeordnete Abteilungen finden
            const childDepts = departments.filter((d) => d.parent_id === department.id);

            if (childDepts.length > 0) {
              // Konnektor erstellen
              const connectorDiv = document.createElement('div');
              connectorDiv.className = 'org-connector';
              branchDiv.appendChild(connectorDiv);

              // Untergeordnete Ebene erstellen
              const childLevelDiv = document.createElement('div');
              childLevelDiv.className = 'org-level';

              childDepts.forEach((childDept) => {
                const childBranchDiv = buildOrgBranch(childDept);
                childLevelDiv.appendChild(childBranchDiv);
              });

              branchDiv.appendChild(childLevelDiv);
            }

            return branchDiv;
          }

          // Dropdown-Felder befüllen
          function populateDepartmentDropdowns() {
            const departmentParentDropdown = document.getElementById('department-parent');
            const teamDepartmentDropdown = document.getElementById('team-department');

            // Dropdown für übergeordnete Abteilung
            if (departmentParentDropdown) {
              departmentParentDropdown.innerHTML = '<option value="">Keine übergeordnete Abteilung</option>';
              departments.forEach((dept) => {
                const option = document.createElement('option');
                option.value = dept.id;
                option.textContent = dept.name;
                departmentParentDropdown.appendChild(option);
              });
            }

            // Dropdown für Team-Abteilung
            if (teamDepartmentDropdown) {
              teamDepartmentDropdown.innerHTML = '<option value="">Keine Abteilung</option>';
              departments.forEach((dept) => {
                const option = document.createElement('option');
                option.value = dept.id;
                option.textContent = dept.name;
                teamDepartmentDropdown.appendChild(option);
              });
            }
          }

          // Benutzer-Dropdowns befüllen
          function populateUserDropdowns() {
            const departmentManagerDropdown = document.getElementById('department-manager');
            const teamLeaderDropdown = document.getElementById('team-leader');
            const addTeamMemberDropdown = document.getElementById('add-team-member');

            // Dropdown für Abteilungsmanager
            if (departmentManagerDropdown) {
              departmentManagerDropdown.innerHTML = '<option value="">Kein Manager</option>';
              users.forEach((user) => {
                const option = document.createElement('option');
                option.value = user.id;
                option.textContent = `${user.first_name} ${user.last_name}`;
                departmentManagerDropdown.appendChild(option);
              });
            }

            // Dropdown für Teamleiter
            if (teamLeaderDropdown) {
              teamLeaderDropdown.innerHTML = '<option value="">Kein Teamleiter</option>';
              users.forEach((user) => {
                const option = document.createElement('option');
                option.value = user.id;
                option.textContent = `${user.first_name} ${user.last_name}`;
                teamLeaderDropdown.appendChild(option);
              });
            }

            // Dropdown für Team-Mitglieder hinzufügen
            if (addTeamMemberDropdown) {
              addTeamMemberDropdown.innerHTML = '<option value="">Mitarbeiter auswählen</option>';
              users
                .filter((u) => u.role === 'employee')
                .forEach((user) => {
                  const option = document.createElement('option');
                  option.value = user.id;
                  option.textContent = `${user.first_name} ${user.last_name}`;
                  addTeamMemberDropdown.appendChild(option);
                });
            }
          }

          // Abteilungen filtern
          function filterDepartments() {
            const searchTerm = document.getElementById('department-search').value.toLowerCase();
            const container = document.getElementById('departments-container');

            const cards = container.getElementsByClassName('card');

            for (let i = 0; i < cards.length; i++) {
              const title = cards[i].querySelector('.card-title').textContent.toLowerCase();
              const description = cards[i].querySelector('.card-body').textContent.toLowerCase();

              if (title.includes(searchTerm) || description.includes(searchTerm)) {
                cards[i].style.display = '';
              } else {
                cards[i].style.display = 'none';
              }
            }
          }

          // Teams filtern
          function filterTeams() {
            const searchTerm = document.getElementById('team-search').value.toLowerCase();
            const container = document.getElementById('teams-container');

            const cards = container.getElementsByClassName('card');

            for (let i = 0; i < cards.length; i++) {
              const title = cards[i].querySelector('.card-title').textContent.toLowerCase();
              const description = cards[i].querySelector('.card-body').textContent.toLowerCase();

              if (title.includes(searchTerm) || description.includes(searchTerm)) {
                cards[i].style.display = '';
              } else {
                cards[i].style.display = 'none';
              }
            }
          }

          // Abteilungs-Modal zeigen/verstecken
          function showDepartmentModal(departmentId = null) {
            const modal = document.getElementById('department-modal');
            const form = document.getElementById('department-form');
            const title = document.getElementById('department-modal-title');

            // Formular zurücksetzen
            form.reset();
            document.getElementById('department-id').value = '';

            if (departmentId) {
              // Bearbeiten-Modus
              title.textContent = 'Abteilung bearbeiten';
              const department = departments.find((d) => d.id === departmentId);

              if (department) {
                document.getElementById('department-id').value = department.id;
                document.getElementById('department-name').value = department.name;
                document.getElementById('department-description').value = department.description || '';
                document.getElementById('department-manager').value = department.manager_id || '';
                document.getElementById('department-parent').value = department.parent_id || '';
              }
            } else {
              // Neu-Modus
              title.textContent = 'Neue Abteilung';
            }

            modal.style.display = 'flex';
          }

          function hideDepartmentModal() {
            document.getElementById('department-modal').style.display = 'none';
          }

          // Team-Modal zeigen/verstecken
          function showTeamModal(teamId = null) {
            const modal = document.getElementById('team-modal');
            const form = document.getElementById('team-form');
            const title = document.getElementById('team-modal-title');

            // Formular zurücksetzen
            form.reset();
            document.getElementById('team-id').value = '';

            if (teamId) {
              // Bearbeiten-Modus
              title.textContent = 'Team bearbeiten';
              const team = teams.find((t) => t.id === teamId);

              if (team) {
                document.getElementById('team-id').value = team.id;
                document.getElementById('team-name').value = team.name;
                document.getElementById('team-description').value = team.description || '';
                document.getElementById('team-department').value = team.department_id || '';
                document.getElementById('team-leader').value = team.leader_id || '';
              }
            } else {
              // Neu-Modus
              title.textContent = 'Neues Team';
            }

            modal.style.display = 'flex';
          }

          function hideTeamModal() {
            document.getElementById('team-modal').style.display = 'none';
          }

          // Team-Mitglieder-Modal zeigen/verstecken
          function showTeamMembersModal(teamId) {
            const modal = document.getElementById('team-members-modal');
            const title = document.getElementById('team-members-modal-title');

            currentTeamId = teamId;
            const team = teams.find((t) => t.id === teamId);

            if (team) {
              title.textContent = `Mitglieder: ${team.name}`;
              loadTeamMembers(teamId);
            }

            modal.style.display = 'flex';
          }

          function hideTeamMembersModal() {
            document.getElementById('team-members-modal').style.display = 'none';
            currentTeamId = null;
          }

          // Abteilung speichern
          async function saveDepartment(e) {
            e.preventDefault();

            const formData = new FormData(e.target);
            const departmentData = Object.fromEntries(formData.entries());
            const departmentId = departmentData.id;

            try {
              let url = '/departments';
              let method = 'POST';

              if (departmentId) {
                // Bearbeiten-Modus
                url = `/departments/${departmentId}`;
                method = 'PUT';
                delete departmentData.id; // ID aus den Daten entfernen
              }

              const response = await fetch(url, {
                method: method,
                headers: {
                  'Content-Type': 'application/json',
                  Authorization: `Bearer ${localStorage.getItem('token')}`,
                },
                body: JSON.stringify(departmentData),
              });

              if (response.ok) {
                const result = await response.json();
                alert(result.message);
                hideDepartmentModal();

                // Liste neu laden
                loadDepartments();
              } else {
                const error = await response.json();
                alert(`Fehler: ${error.message}`);
              }
            } catch (error) {
              console.error('Fehler beim Speichern der Abteilung:', error);
              alert('Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.');
            }
          }

          // Team speichern
          async function saveTeam(e) {
            e.preventDefault();

            const formData = new FormData(e.target);
            const teamData = Object.fromEntries(formData.entries());
            const teamId = teamData.id;

            try {
              let url = '/teams';
              let method = 'POST';

              if (teamId) {
                // Bearbeiten-Modus
                url = `/teams/${teamId}`;
                method = 'PUT';
                delete teamData.id; // ID aus den Daten entfernen
              }

              const response = await fetch(url, {
                method: method,
                headers: {
                  'Content-Type': 'application/json',
                  Authorization: `Bearer ${localStorage.getItem('token')}`,
                },
                body: JSON.stringify(teamData),
              });

              if (response.ok) {
                const result = await response.json();
                alert(result.message);
                hideTeamModal();

                // Liste neu laden
                loadTeams();
              } else {
                const error = await response.json();
                alert(`Fehler: ${error.message}`);
              }
            } catch (error) {
              console.error('Fehler beim Speichern des Teams:', error);
              alert('Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.');
            }
          }

          // Team-Mitglieder laden
          async function loadTeamMembers(teamId) {
            if (!teamId) return;

            try {
              const response = await fetch(`/teams/${teamId}/members`, {
                headers: {
                  Authorization: `Bearer ${localStorage.getItem('token')}`,
                },
              });

              if (response.ok) {
                const members = await response.json();
                displayTeamMembers(members);
              } else {
                console.error('Fehler beim Laden der Team-Mitglieder');
              }
            } catch (error) {
              console.error('Fehler beim Laden der Team-Mitglieder:', error);
            }
          }

          // Team-Mitglieder anzeigen
          function displayTeamMembers(members) {
            const container = document.getElementById('team-members-container');
            container.innerHTML = '';

            if (members.length === 0) {
              container.innerHTML = '<p style="text-align: center;">Keine Mitglieder in diesem Team</p>';
              return;
            }

            members.forEach((member) => {
              const memberDiv = document.createElement('div');
              memberDiv.className = 'team-member';

              // Initialen für Profilbild
              const initials = member.first_name.charAt(0) + member.last_name.charAt(0);

              // Bild-Element
              const imgElem = document.createElement('div');
              if (member.profile_picture) {
                imgElem.innerHTML = `<img src="/${member.profile_picture}" alt="${member.first_name}" style="width: 30px; height: 30px; border-radius: 50%; object-fit: cover;">`;
              } else {
                imgElem.className = 'team-member-img';
                imgElem.textContent = initials;
              }
              memberDiv.appendChild(imgElem);

              // Info-Element
              const infoElem = document.createElement('div');
              infoElem.className = 'team-member-info';
              infoElem.innerHTML = `
                    <div>${member.first_name} ${member.last_name}</div>
                    <div style="font-size: 12px; color: #666;">${member.position || 'Keine Position'}</div>
                `;
              memberDiv.appendChild(infoElem);

              // Aktions-Element
              const actionsElem = document.createElement('div');
              actionsElem.className = 'team-member-actions';
              actionsElem.innerHTML = `
                    <button class="btn btn-danger btn-sm" onclick="removeTeamMember(${member.id})">Entfernen</button>
                `;
              memberDiv.appendChild(actionsElem);

              container.appendChild(memberDiv);
            });
          }

          // Mitglied zum Team hinzufügen
          async function addTeamMember() {
            if (!currentTeamId) return;

            const userId = document.getElementById('add-team-member').value;

            if (!userId) {
              alert('Bitte wählen Sie einen Mitarbeiter aus');
              return;
            }

            try {
              const response = await fetch(`/teams/${currentTeamId}/members`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  Authorization: `Bearer ${localStorage.getItem('token')}`,
                },
                body: JSON.stringify({ userId }),
              });

              if (response.ok) {
                const result = await response.json();
                // Mitglieder neu laden
                loadTeamMembers(currentTeamId);

                // Dropdown zurücksetzen
                document.getElementById('add-team-member').value = '';
              } else {
                const error = await response.json();
                alert(`Fehler: ${error.message}`);
              }
            } catch (error) {
              console.error('Fehler beim Hinzufügen des Mitglieds:', error);
              alert('Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.');
            }
          }

          // Mitglied aus Team entfernen
          async function removeTeamMember(userId) {
            if (!currentTeamId || !userId) return;

            if (!confirm('Sind Sie sicher, dass Sie dieses Mitglied aus dem Team entfernen möchten?')) {
              return;
            }

            try {
              const response = await fetch(`/teams/${currentTeamId}/members/${userId}`, {
                method: 'DELETE',
                headers: {
                  Authorization: `Bearer ${localStorage.getItem('token')}`,
                },
              });

              if (response.ok) {
                const result = await response.json();
                // Mitglieder neu laden
                loadTeamMembers(currentTeamId);
              } else {
                const error = await response.json();
                alert(`Fehler: ${error.message}`);
              }
            } catch (error) {
              console.error('Fehler beim Entfernen des Mitglieds:', error);
              alert('Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.');
            }
          }

          // Abteilung bearbeiten
          function editDepartment(departmentId) {
            showDepartmentModal(departmentId);
          }

          // Abteilung löschen
          async function deleteDepartment(departmentId) {
            if (!confirm('Sind Sie sicher, dass Sie diese Abteilung löschen möchten?')) {
              return;
            }

            try {
              const response = await fetch(`/departments/${departmentId}`, {
                method: 'DELETE',
                headers: {
                  Authorization: `Bearer ${localStorage.getItem('token')}`,
                },
              });

              if (response.ok) {
                const result = await response.json();
                alert(result.message);

                // Liste neu laden
                loadDepartments();
              } else {
                const error = await response.json();
                alert(`Fehler: ${error.message}`);
              }
            } catch (error) {
              console.error('Fehler beim Löschen der Abteilung:', error);
              alert('Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.');
            }
          }

          // Abteilungsmitglieder anzeigen
          async function viewDepartmentMembers(departmentId) {
            try {
              const response = await fetch(`/departments/${departmentId}/members`, {
                headers: {
                  Authorization: `Bearer ${localStorage.getItem('token')}`,
                },
              });

              if (response.ok) {
                const members = await response.json();

                if (members.length === 0) {
                  alert('Diese Abteilung hat keine Mitglieder');
                  return;
                }

                // Hier könnte ein Modal oder eine separate Ansicht für die Mitglieder geöffnet werden
                const department = departments.find((d) => d.id === departmentId);
                let message = `Mitglieder der Abteilung "${department ? department.name : ''}":\n\n`;

                members.forEach((member) => {
                  message += `- ${member.first_name} ${member.last_name} (${member.employee_id || 'Keine ID'})\n`;
                });

                alert(message);
              } else {
                const error = await response.json();
                alert(`Fehler: ${error.message}`);
              }
            } catch (error) {
              console.error('Fehler beim Abrufen der Abteilungsmitglieder:', error);
              alert('Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.');
            }
          }

          // Team bearbeiten
          function editTeam(teamId) {
            showTeamModal(teamId);
          }

          // Team löschen
          async function deleteTeam(teamId) {
            if (!confirm('Sind Sie sicher, dass Sie dieses Team löschen möchten?')) {
              return;
            }

            try {
              const response = await fetch(`/teams/${teamId}`, {
                method: 'DELETE',
                headers: {
                  Authorization: `Bearer ${localStorage.getItem('token')}`,
                },
              });

              if (response.ok) {
                const result = await response.json();
                alert(result.message);

                // Liste neu laden
                loadTeams();
              } else {
                const error = await response.json();
                alert(`Fehler: ${error.message}`);
              }
            } catch (error) {
              console.error('Fehler beim Löschen des Teams:', error);
              alert('Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.');
            }
          }

          // Team-Mitglieder verwalten
          function manageTeamMembers(teamId) {
            showTeamMembersModal(teamId);
          }

          // Zurück zum Dashboard
          function goBack() {
            window.location.href = '/admin-dashboard';
          }
        </script>
      </main>
    </div>
    <!-- Unified Navigation -->
    <script type="module" src="/scripts/components/unified-navigation.ts"></script>
    <!-- Breadcrumb -->
    <script type="module" src="/scripts/components/breadcrumb.js"></script>
  </body>
</html>
